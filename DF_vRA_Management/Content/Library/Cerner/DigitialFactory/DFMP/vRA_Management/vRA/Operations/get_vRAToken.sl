namespace: Cerner.DigitialFactory.DFMP.vRA_Management.vRA.Operations
operation:
  name: get_vRAToken
  inputs:
    - vRA_host: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_host')}"
    - vRA_user: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_user')}"
    - vRA_password: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_password')}"
    - vRA_protocol: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_protocol')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for to get Bearer Token from vRA\r\n#   Operation: get_vRAToken\r\n#   Author: Rakesh Sharma (Rakesh.sharma@cerner.com)\r\n#   Inputs:\r\n#       -   vRA_host\r\n#       -   vRA_user\r\n#       -   vRA_password\r\n#       -   vRA_protocol\r\n\r\n#   Outputs:\r\n#       -   result\r\n#       -   bearerToken\r\n#       -   message\r\n#       -   errorType\r\n#       -   errorMessage\r\n#       -   errorSeverity\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n\r\ndef execute(vRA_host, vRA_user, vRA_password, vRA_protocol):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errortype = \"\"\r\n    bearerToken = \"\"\r\n    errorProvider = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authResponse = get_vRARefreshToken(vRA_host, vRA_user, vRA_password, vRA_protocol)\r\n        if authResponse[\"result\"] == \"True\":\r\n            refresh_token = authResponse[\"refreshToken\"]\r\n            bearerResponse = get_vRABearerToken(vRA_host, vRA_protocol, refresh_token)\r\n            if bearerResponse[\"result\"] == \"True\":\r\n                bearerToken = bearerResponse[\"bearerToken\"]\r\n                result = \"True\"\r\n                message = \"vRA Bearer Token retrieved successfully\"\r\n            else:\r\n                result = bearerResponse[\"result\"]\r\n                message = bearerResponse[\"message\"]\r\n        else:\r\n            result = authResponse[\"result\"]\r\n            message = authResponse[\"message\"]\r\n\r\n        if result == 'False':\r\n            msg = 'Cannot Open Connection to vRA, Wrong URL or Wrong User password or vRA not Available' + \", Provider Response: \" + str(message)\r\n            raise Exception(msg)\r\n    except Exception as e:\r\n        message = str(e)\r\n        errortype = 'e20000'\r\n        errorMessage = message\r\n        errorSeverity = 'ERROR'\r\n        errorProvider = 'vRA'\r\n        result = \"False\"\r\n\r\n    return {\"result\": result, \"bearerToken\": bearerToken, \"message\": message, \"errorType\": errortype,\r\n            \"errorMessage\": errorMessage, \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider}\r\n\r\n\r\n# get vRA refresh_token\r\ndef get_vRARefreshToken(vRA_host, vRA_user, vRA_password, vRA_protocol):\r\n    message = \"\"\r\n    result = \"\"\r\n    refreshToken = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        url = \"{0}://{1}/csp/gateway/am/api/login?access_token\".format(vRA_protocol, vRA_host)\r\n\r\n        payload = json.dumps({\"username\":  vRA_user, \"password\":  vRA_password})\r\n        headers = {\"Content-Type\": \"application/json\"}\r\n\r\n        response = requests.request(\"POST\", url, headers=headers, data=payload, verify=False)\r\n\r\n        if response.status_code == 200:\r\n            vRA_response = json.loads(response.content)\r\n            refreshToken = vRA_response[\"refresh_token\"]\r\n            result = \"True\"\r\n        else:\r\n            result = \"False\"\r\n            message = str(response.text)\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"refreshToken\": refreshToken}\r\n\r\n\r\n# get vRA bearer token\r\ndef get_vRABearerToken(vRA_host, vRA_protocol, refreshToken):\r\n    message = \"\"\r\n    result = \"\"\r\n    bearerToken = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        url = \"{0}://{1}/iaas/api/login\".format(vRA_protocol, vRA_host)\r\n\r\n        payload = json.dumps({\"refreshToken\": refreshToken})\r\n        headers = {\"Content-Type\": \"application/json\"}\r\n\r\n        response = requests.request(\"POST\", url, headers=headers, data=payload, verify=False)\r\n\r\n        if response.status_code == 200:\r\n            vRA_response = json.loads(response.content)\r\n            bearerToken = vRA_response[\"token\"]\r\n            result = \"True\"\r\n        else:\r\n            result = \"False\"\r\n            message = str(response.text)\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"bearerToken\": bearerToken}"
  outputs:
    - result
    - bearerToken
    - message
    - errorType
    - errorMessage
    - errorSeverity
    - errorProvider
  results:
    - SUCCESS: '${result == "True"}'
    - FAILURE
