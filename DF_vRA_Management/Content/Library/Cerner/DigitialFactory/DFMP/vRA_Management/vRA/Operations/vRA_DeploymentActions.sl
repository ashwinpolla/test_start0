########################################################################################################################
#!!
#! @input action: "Deployment Action like: ChangeLease, ChangeOwner, Delete, PowerOff, PowerOn, Update
#! @input action_info: Required only Action is:  ChangeLease,  ChangeOwner, Update
#! @input timeout: timeout value in seconds
#!!#
########################################################################################################################
namespace: Cerner.DigitialFactory.DFMP.vRA_Management.vRA.Operations
operation:
  name: vRA_DeploymentActions
  inputs:
    - vRA_host: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_host')}"
    - vRA_protocol: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_protocol')}"
    - vRA_bearer_token
    - deployment_id
    - action
    - action_info:
        required: false
        default: ''
    - timeout: '2400'
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for to Decode the DIrect Values into the Parameters\r\n#   Operation: vRA_DeploymentActions\r\n#   Author: Rakesh Sharma (Rakesh.sharma@cerner.com)\r\n#   Inputs:\r\n#       -   vRA_host\r\n#       -   vRA_user\r\n#       -   vRA_password\r\n#       -   vRA_protocol\r\n#       -   deployment_id\r\n#       -   action\r\n#       -   action_info\r\n#       -   timeout\r\n#\r\n#   Outputs:\r\n#       -   result\r\n#       -   message\r\n#       -   hostname\r\n#       -   ip_address\r\n#       -   vm_state\r\n#       -   errorType\r\n#       -   errorMessage\r\n#       -   errorSeverity\r\n###############################################################\r\n\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\ninstall(\"pytz\")\r\n\r\ndef execute(vRA_host, vRA_protocol, vRA_bearer_token, deployment_id, action, action_info, timeout):\r\n    message = \"\"\r\n    result = \"False\"\r\n    key = \"\"\r\n    value = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorProvider = \"\"\r\n    hostname = \"\"\r\n    ip_address = \"\"\r\n    vm_state = \"\"\r\n    astatus = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        import time\r\n\r\n        url = \"{0}://{1}/deployment/api/deployments/{2}/requests\".format(vRA_protocol, vRA_host, deployment_id)\r\n\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": \"Bearer {}\".format(vRA_bearer_token)\r\n        }\r\n\r\n        if action == \"ChangeOwner\":\r\n            payload = {\r\n                \"actionId\": \"Deployment.ChangeOwner\",\r\n                \"inputs\": {\r\n                    \"New Owner\": action_info\r\n                }\r\n            }\r\n        elif action == \"Delete\":\r\n            payload = {\r\n                \"actionId\": \"Deployment.Delete\"\r\n            }\r\n        elif action == \"ChangeLease\":\r\n            ldate = unix_to_utcDate(action_info)\r\n            new_leaseDate = ldate[\"utc_date\"]\r\n\r\n            payload = {\r\n                \"actionId\": \"Deployment.ChangeLease\",\r\n                \"inputs\": {\r\n                \"Lease Expiration Date\": str(new_leaseDate)\r\n            }\r\n            }\r\n        elif action == \"Update\":\r\n            action_info = json.loads(action_info)\r\n            payload = {\r\n                \"actionId\": \"Deployment.Update\",\r\n                \"inputs\": action_info\r\n            }\r\n        else:\r\n            msg = \"Unsupported Action, Kindly Check again Unsupported Actions with required inputs\"\r\n            raise Exception(msg)\r\n\r\n        payload = json.dumps(payload)\r\n\r\n        response = requests.request(\"POST\", url, data=payload, headers=headers, verify=False)\r\n        if response.status_code == 200:\r\n            action_response = json.loads(response.content)\r\n            status = action_response[\"status\"]\r\n            action_id = action_response[\"id\"]\r\n        elif response.status_code == 404 and action == 'Delete':\r\n            result = \"True\"\r\n            message = \"Requested VM Deployment does not exist or has already been deleted\"\r\n        else:\r\n            msg = response.content\r\n            raise Exception(msg)\r\n\r\n        if response.status_code == 200:\r\n            turl = \"{0}://{1}/deployment/api/requests/{2}\".format(vRA_protocol, vRA_host, action_id)\r\n            ctime = 0\r\n            while ctime < int(timeout):\r\n                aresponse = requests.request(\"GET\", turl, headers=headers, verify=False)\r\n                if aresponse.status_code == 200:\r\n                    a_response = json.loads(aresponse.content)\r\n                    astatus = a_response[\"status\"]\r\n                    if astatus == \"SUCCESSFUL\":\r\n                        message = 'Requested Action: ' + action + ' completed successfully'\r\n                        result = \"True\"\r\n                        break\r\n                else:\r\n                    result = \"False\"\r\n                    msg = str(response.text)\r\n                    raise Exception(msg)\r\n                    break\r\n                ctime += 10\r\n                time.sleep(10)\r\n            if ctime >= int(timeout) and astatus != \"SUCCESSFUL\":\r\n                msg = \"Action timedout and Provider did not responded with success in specified duration.\"\r\n                raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        errorType = 'e20000'\r\n        message = str(e)\r\n        errorMessage = message\r\n        result = \"False\"\r\n        errorProvider = \"vRA\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorType\": errorType}\r\n\r\n    # return {\"result\": result, \"message\": message, \"hostname\": hostname, \"ip_address\": ip_address,\"vm_state\":vm_state,\r\n    #        \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorType\": errorType}\r\n\r\n## function to convert Unix date to UTC for vMwrae VRA\r\ndef unix_to_utcDate(dt):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorMessage = ''\r\n    errorType = ''\r\n    cst_date = ''\r\n\r\n    try:\r\n        from datetime import datetime\r\n        import pytz\r\n        dt = str(dt)[:10]\r\n        dt = int(dt)\r\n        tt = datetime.fromtimestamp(dt)\r\n        YY = tt.strftime(\"%Y\")\r\n        MM = tt.strftime(\"%m\")\r\n        DD = tt.strftime(\"%d\")\r\n        HH = tt.strftime(\"%H\")\r\n        MI = tt.strftime(\"%M\")\r\n        SS = tt.strftime(\"%S\")\r\n        tutc_date = datetime(int(YY), int(MM), int(DD), int(HH), int(MI), int(SS), tzinfo=pytz.utc)\r\n        fmt = \"%Y-%m-%dT%H:%M:%SZ\"\r\n        utc_date = tutc_date.strftime(fmt)\r\n\r\n        message = utc_date\r\n        result = 'True'\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = 'e10000'\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"utc_date\": utc_date, \"errorType\": errorType,\r\n            \"errorMessage\": errorMessage}"
  outputs:
    - result
    - message
    - errorMessage
    - errorProvider
    - errorType
  results:
    - SUCCESS: "${result == 'True'}"
    - FAILURE
