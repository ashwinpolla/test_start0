########################################################################################################################
#!!
#! @input action: "Deployment PowerOn or PowerOff Action only
#! @input timeout: timeout value in seconds
#!!#
########################################################################################################################
namespace: Cerner.DigitialFactory.DFMP.vRA_Management.vRA.Operations
operation:
  name: vRA_DeploymentPowerOnPowerOff
  inputs:
    - vRA_host: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_host')}"
    - vRA_protocol: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_protocol')}"
    - vRA_bearer_token
    - deployment_id
    - action
    - timeout: '2400'
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for to Decode the DIrect Values into the Parameters\r\n#   Operation: vRA_DeploymentPowerOnPowerOff\r\n#   Author: Rakesh Sharma (Rakesh.sharma@cerner.com)\r\n#   Date: 17 Feb 2022\r\n#   Inputs:\r\n#       -   vRA_host\r\n#       -   vRA_user\r\n#       -   vRA_password\r\n#       -   vRA_protocol\r\n#       -   deployment_id\r\n#       -   action\r\n#       -   timeout\r\n#\r\n#   Outputs:\r\n#       -   result\r\n#       -   message\r\n#       -   hostname\r\n#       -   ip_address\r\n#       -   vm_state\r\n#       -   errorType\r\n#       -   errorMessage\r\n#       -   errorSeverity\r\n###############################################################\r\n\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\ninstall(\"pytz\")\r\n\r\n\r\ndef execute(vRA_host, vRA_protocol, vRA_bearer_token, deployment_id, action, timeout):\r\n    message = \"\"\r\n    result = \"False\"\r\n    key = \"\"\r\n    value = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorProvider = \"\"\r\n    hostname = \"\"\r\n    ip_address = \"\"\r\n    vm_state = \"\"\r\n    astatus = \"\"\r\n    vm_state = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        import time\r\n\r\n        url = \"{0}://{1}/deployment/api/deployments/{2}/requests\".format(vRA_protocol, vRA_host, deployment_id)\r\n\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": \"Bearer {}\".format(vRA_bearer_token)\r\n        }\r\n        \r\n        action = action.strip('_c')\r\n\r\n        if action == \"PowerOn\":\r\n            payload = {\r\n                \"actionId\": \"Deployment.PowerOn\"\r\n            }\r\n        elif action == \"PowerOff\":\r\n            payload = {\r\n                \"actionId\": \"Deployment.PowerOff\"\r\n            }\r\n\r\n        else:\r\n            msg = \"Unsupported Action, Kindly Check again Unsupported Actions with required inputs\"\r\n            raise Exception(msg)\r\n\r\n        payload = json.dumps(payload)\r\n\r\n        ## Get the Current State of VM\r\n        tvm_info = vm_info(vRA_host, vRA_protocol, vRA_bearer_token, deployment_id)\r\n        if tvm_info[\"result\"] == \"True\":\r\n            vm_state = tvm_info[\"vm_state\"]\r\n        else:\r\n            msg = tvm_info[\"message\"]\r\n            result = \"False\"\r\n            raise Exception(msg)\r\n        \r\n\r\n        ## Check te vm status and requested vm status\r\n        if (action == \"PowerOn\" and vm_state == 'ON') or (action == \"PowerOff\" and vm_state == 'OFF'):\r\n            result = \"True\"\r\n            message = \"VM already at requested Power state: \" + vm_state\r\n            return {\"result\": result, \"message\": message, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n                    \"errorType\": errorType}\r\n\r\n        response = requests.request(\"POST\", url, data=payload, headers=headers, verify=False)\r\n        if response.status_code == 200:\r\n            action_response = json.loads(response.content)\r\n            status = action_response[\"status\"]\r\n            action_id = action_response[\"id\"]\r\n\r\n        else:\r\n            msg = response.content\r\n            raise Exception(msg)\r\n\r\n        if response.status_code == 200:\r\n            turl = \"{0}://{1}/deployment/api/requests/{2}\".format(vRA_protocol, vRA_host, action_id)\r\n            ctime = 0\r\n            while ctime < int(timeout):\r\n                aresponse = requests.request(\"GET\", turl, headers=headers, verify=False)\r\n                if aresponse.status_code == 200:\r\n                    a_response = json.loads(aresponse.content)\r\n                    astatus = a_response[\"status\"]\r\n                    if astatus == \"SUCCESSFUL\":\r\n                        message = 'Requested Action: ' + action + ' completed successfully'\r\n                        result = \"True\"\r\n                        break\r\n                else:\r\n                    result = \"False\"\r\n                    message = str(response.text)\r\n                    break\r\n                ctime += 10\r\n                time.sleep(10)\r\n            if ctime >= int(timeout) and astatus != \"SUCCESSFUL\":\r\n                msg = \"Action timedout and Provider did not responded with success in specified duration.\"\r\n                raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        errorType = 'e20000'\r\n        message = str(e)\r\n        errorMessage = message\r\n        result = \"False\"\r\n        errorProvider = \"vRA\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorType\": errorType}\r\n\r\n\r\n## Get the VM Info\r\ndef vm_info(vRA_host, vRA_protocol, vRA_bearer_token, deployment_id):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorProvider = \"\"\r\n    vm_state = \"\"    \r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": \"Bearer {}\".format(vRA_bearer_token)\r\n        }\r\n\r\n        turl = \"{0}://{1}/deployment/api/deployments/{2}/resources\".format(vRA_protocol, vRA_host, deployment_id)\r\n\r\n        dresponse = requests.request(\"GET\", turl, headers=headers, verify=False)\r\n\r\n        if dresponse.status_code == 200:\r\n            dep_info = json.loads(dresponse.content)\r\n            ### Check if vRA Backend is AWS\r\n            if dep_info[\"content\"][0][\"properties\"][\"endpointType\"] == \"aws\":\r\n                vm_state = dep_info[\"content\"][0][\"properties\"][\"powerState\"]\r\n                message = 'VM Info retrieved successfully'\r\n                result = \"True\"\r\n            ## Check if vRA Backend is vCenter\r\n            elif dep_info[\"content\"][0][\"properties\"][\"endpointType\"] == \"vsphere\":\r\n                vm_state = dep_info[\"content\"][0][\"properties\"][\"powerState\"]\r\n                message = 'VM Info retrieved successfully'\r\n                result = \"True\"\r\n            else:\r\n                result = \"False\"\r\n                msg = str(dresponse.text)\r\n                raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        errorType = 'e20000'\r\n        message = str(e)\r\n        errorMessage = message\r\n        result = \"False\"\r\n        errorProvider = \"vRA\"\r\n    return {\"result\": result, \"message\": message, \"vm_state\": vm_state, \"errorProvider\": errorProvider,\r\n            \"errorMessage\": errorMessage, \"errorType\": errorType}"
  outputs:
    - result
    - message
    - errorMessage
    - errorProvider
    - errorType
  results:
    - SUCCESS: "${result == 'True'}"
    - FAILURE
