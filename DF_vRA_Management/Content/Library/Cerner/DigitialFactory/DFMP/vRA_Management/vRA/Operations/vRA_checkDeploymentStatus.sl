########################################################################################################################
#!!
#! @input timeout: timeout value in seconds
#!!#
########################################################################################################################
namespace: Cerner.DigitialFactory.DFMP.vRA_Management.vRA.Operations
operation:
  name: vRA_checkDeploymentStatus
  inputs:
    - vRA_host: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_host')}"
    - vRA_protocol: "${get_sp('Cerner.DigitalFactory.DFMP.vRA_protocol')}"
    - vRA_bearer_token
    - deployment_id
    - timeout: '2400'
    - dep_status: 'CREATE_SUCCESSFUL,UPDATE_SUCCESSFUL'
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for to Decode the DIrect Values into the Parameters\r\n#   Operation: vRA_checkDeploymentStatus\r\n#   Author: Rakesh Sharma (Rakesh.sharma@cerner.com)\r\n#   Inputs:\r\n#       -   vRA_host\r\n#       -   vRA_user\r\n#       -   vRA_password\r\n#       -   vRA_protocol\r\n#       -   deployment_id\r\n#       -   timeout\r\n#       -   dep_status\r\n\r\n#\r\n#   Outputs:\r\n#       -   result\r\n#       -   message\r\n#       -   hostname\r\n#       -   ip_address\r\n#       -   vm_state\r\n#       -   errorType\r\n#       -   errorMessage\r\n#       -   errorSeverity\r\n###############################################################\r\n\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n\r\ndef execute(vRA_host, vRA_protocol, vRA_bearer_token, deployment_id, timeout, dep_status):\r\n    message = \"\"\r\n    result = \"False\"\r\n    key = \"\"\r\n    value = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorProvider = \"\"\r\n    hostname = \"\"\r\n    ip_address = \"\"\r\n    vm_state = \"\"\r\n    vm_leaseExpireAt = \"\"\r\n    flavor = \"\"\r\n    os_type = \"\"\r\n    status_code = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        import time\r\n\r\n        url = \"{0}://{1}/deployment/api/deployments/{2}?expandResources=true\".format(vRA_protocol, vRA_host,\r\n                                                                                     deployment_id)\r\n\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": \"Bearer {}\".format(vRA_bearer_token)\r\n        }\r\n\r\n        ctime = 0\r\n        dep_status = dep_status.split(',')\r\n        while ctime < int(timeout):\r\n            response = requests.request(\"GET\", url, headers=headers, verify=False)\r\n            status_code = response.status_code\r\n            if response.status_code == 200:\r\n                vRA_response = json.loads(response.content)\r\n                status = vRA_response[\"status\"]\r\n                if status == 'CREATE_FAILED':\r\n                    result = 'False'\r\n                    msg = 'VM Deployement has failed, Contact vRA Admins for more support and information, vRA Deployment ID: ' + deployment_id\r\n                    raise Exception(msg)\r\n                if status in dep_status:\r\n                    turl = \"{0}://{1}/deployment/api/deployments/{2}/resources\".format(vRA_protocol, vRA_host,\r\n                                                                                       deployment_id)\r\n                    dresponse = requests.request(\"GET\", turl, headers=headers, verify=False)\r\n\r\n                    if dresponse.status_code == 200:\r\n                        dep_info = json.loads(dresponse.content)\r\n                        ### Check if vRA Backend is AWS\r\n                        # if \"Cloud.AWS\" in dep_info[\"content\"][0][\"type\"]:\r\n                        if dep_info[\"content\"][0][\"properties\"][\"endpointType\"] == \"aws\":\r\n                            hostname = dep_info[\"content\"][0][\"properties\"][\"resourceName\"]\r\n                            vm_state = dep_info[\"content\"][0][\"properties\"][\"powerState\"]\r\n                            os_type = dep_info[\"content\"][0][\"properties\"][\"osType\"]\r\n                            flavor = dep_info[\"content\"][0][\"properties\"][\"flavor\"]\r\n                            ip_address = dep_info[\"content\"][0][\"properties\"][\"networks\"][0][\"address\"]\r\n                            ip_address_type = dep_info[\"content\"][0][\"properties\"][\"networks\"][0][\"assignment\"]\r\n                            message = 'VM deployed in AWS and deployment info retrieved successfully'\r\n                            result = \"True\"\r\n                        ## Check if Backend is vCenter\r\n                        elif dep_info[\"content\"][0][\"properties\"][\"endpointType\"] == \"vsphere\":\r\n                            hostname = dep_info[\"content\"][0][\"properties\"][\"resourceName\"]\r\n                            vm_state = dep_info[\"content\"][0][\"properties\"][\"powerState\"]\r\n                            os_type = dep_info[\"content\"][0][\"properties\"][\"osType\"]\r\n                            flavor = dep_info[\"content\"][0][\"properties\"][\"flavor\"]\r\n                            ip_address = dep_info[\"content\"][0][\"properties\"][\"networks\"][0][\"address\"]\r\n                            ip_address_type = dep_info[\"content\"][0][\"properties\"][\"networks\"][0][\"assignment\"]\r\n                            message = 'VM deployed in vCenter and deployment info retrieved successfully'\r\n                            result = \"True\"\r\n                        else:\r\n                            message = 'VM deployed successfully but failed to get hostname and IP Address'\r\n                            result = \"False\"\r\n                    break\r\n            elif response.status_code == 404:\r\n                result = \"True\"\r\n                message = \"Requested Deployment not Found\"\r\n                break\r\n            else:\r\n                result = \"False\"\r\n                msg = str(response.text)\r\n                raise Exception(msg)\r\n                \r\n            ctime += 30\r\n            time.sleep(30)\r\n\r\n        # Get Lease date of the deployment\r\n        if response.status_code == 200 and result == \"True\":\r\n            lurl = \"{0}://{1}/deployment/api/deployments/{2}\".format(vRA_protocol, vRA_host, deployment_id)\r\n            lresponse = requests.request(\"GET\", lurl, headers=headers, verify=False)\r\n            if lresponse.status_code == 200:\r\n                l_info = json.loads(lresponse.content)\r\n                vm_leaseExpireAt = l_info[\"leaseExpireAt\"]\r\n\r\n    except Exception as e:\r\n        errorType = 'e20000'\r\n        message = str(e)\r\n        errorMessage = message\r\n        if \"'address'\" == message:\r\n            errorMessage = \"Failed to get IP Address from the Deployment, Contact vRA Admins for further Assistance\"\r\n\r\n        result = \"False\"\r\n        errorProvider = \"vRA\"\r\n\r\n    return {\"result\": result, \"status_code\": status_code, \"message\": message, \"hostname\": hostname, \"ip_address\": ip_address, \"vm_state\": vm_state,\"flavor\": flavor,\"os_type\":os_type,\r\n            \"vm_leaseExpireAt\": vm_leaseExpireAt, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorType\": errorType}"
  outputs:
    - result
    - message
    - status_code
    - hostname
    - ip_address
    - errorMessage
    - errorProvider
    - flavor
    - errorType
    - vm_state
    - os_type
    - vm_leaseExpireAt
  results:
    - SUCCESS: "${result == 'True'}"
    - FAILURE
