namespace: Cerner.DFMP.Schedulers.SMAX.Operations
operation:
  name: getPersonIdOfWatchersForSmaxRequests
  inputs:
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - sqlOutputArray:
        required: false
    - http_fail_status_codes: "${get_sp('Cerner.DigitalFactory.http_fail_status_codes')}"
    - previous_errorLogs:
        required: false
    - smax_authToken
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Watchers From Jira TO Smax\r\n#    Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Operation: getPersonIdOfWatchersForSmaxRequests\r\n#   Inputs:\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       - sqlOutputArray\r\n#       - http_fail_status_codes\r\n#       - previous_errorLogs\r\n#       - smax_authToken\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - newWatcherIdList\r\n#       - existingWatcherList\r\n#       - watcherPersonIdList\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorMessage\r\n#       - errorLogs\r\n#       - provider_issue\r\n# Modified on 21 June 2022 by Sirisha to reflect correct error message\r\n# Modified on 16 Aug 2022 by Ashwini Shalke for error logs\r\n# Modified on 04 Oct 2022 by Rakesh Sharma to ignore the service accounts starting with first 3 chars as \"svc\" in function fetchUserIdForWatcher\r\n# Modified on 05 Jan 2023 by Sirisha Krishna to capture error logs when any watchers is missing in SMAX without failure of the flow\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e30000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# main function\r\ndef execute(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, sqlOutputArray,\r\n            http_fail_status_codes, previous_errorLogs, smax_authToken):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    newWatcherIdList = \"\"\r\n    existingWatcherList = \"\"\r\n    watcherPersonIdList = \"\"\r\n    watcherMissingInSmax = \"\"\r\n    smaxticketID = \"\"\r\n    jiraticketID = \"\"\r\n    reqUrl = \"\"\r\n    newWatcherIdListDetail = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    tmsg = \"\"\r\n\r\n    try:\r\n        import json\r\n        import requests\r\n        status_codes = json.loads(http_fail_status_codes)\r\n\r\n        ####################calling getAttachmentFromJIRA to fetch all attachments from Jira based on jiraTicketID##########\r\n        newWatcherIdListDetail = getnewWatcherIdList(smax_baseurl, smax_tenantId, smax_user, smax_password,\r\n                                                     smax_authToken, sqlOutputArray, status_codes)\r\n\r\n        tresult = newWatcherIdListDetail[\"result\"]\r\n        message = newWatcherIdListDetail[\"message\"]\r\n        smaxticketID = newWatcherIdListDetail[\"smaxticketID\"]\r\n        jiraticketID = newWatcherIdListDetail[\"jiraticketID\"]\r\n        errorType = newWatcherIdListDetail[\"errorType\"]\r\n        provider_issue = newWatcherIdListDetail[\"provider_issue\"]\r\n        newWatcherIdList = newWatcherIdListDetail[\"newWatcherIdList\"]\r\n        existingWatcherList = newWatcherIdListDetail[\"existingWatcherList\"]\r\n        errorLogs += newWatcherIdListDetail[\"errorLogs\"]\r\n        if tresult == \"False\" and provider_issue == \"True\":\r\n            raise Exception(message)\r\n\r\n        if len(newWatcherIdList) > 0:\r\n            newWatcherIdList = newWatcherIdList[1:]\r\n            fetchUserId = fetchUserIdForWatcher(smax_auth_baseurl, smax_user, smax_password, smax_tenantId,\r\n                                                smax_baseurl, newWatcherIdList, smax_authToken, status_codes,smaxticketID,jiraticketID)\r\n            message = fetchUserId[\"message\"]\r\n            tresult = fetchUserId[\"result\"]\r\n            errorType = fetchUserId[\"errorType\"]\r\n            provider_issue = fetchUserId[\"provider_issue\"]\r\n            watcherPersonIdList = fetchUserId[\"watcherPersonIdList\"]\r\n            watcherMissingInSmax = fetchUserId[\"watcherMissingInSmax\"]\r\n            errorLogs += fetchUserId[\"errorLogs\"]\r\n            if tresult == \"False\" and provider_issue == \"True\":\r\n                message = fetchUserId[\"message\"]\r\n                raise Exception(message)\r\n        else:\r\n            message = \"No recent updated watchers in SMAX\"\r\n            result = \"True\"\r\n\r\n        result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n        if not errorLogs:\r\n            errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"watcherMissingInSmax\": watcherMissingInSmax,\r\n            \"newWatcherIdList\": newWatcherIdList, \"existingWatcherList\": existingWatcherList,\r\n            \"watcherPersonIdList\": watcherPersonIdList, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorLogs\": errorLogs + previous_errorLogs,\r\n            \"provider_issue\": provider_issue}\r\n\r\n\r\ndef getnewWatcherIdList(smax_baseurl, smax_tenantId, smax_user, smax_password, smax_authToken, sqlOutputArray,\r\n                        status_codes):\r\n    existingWatcherList = \"\"\r\n    newWatcherIdList = \"\"\r\n    tmsg = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    smaxticketID = \"\"\r\n    jiraticketID = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    response = \"\"\r\n    message = \"\"\r\n    responseCode = \"\"\r\n\r\n    try:\r\n        import json\r\n        import requests\r\n        # data = json.dumps(sqlOutputArray)\r\n        json_data = json.loads(sqlOutputArray)\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n        for i in json_data:\r\n            jiraticketID = i[\"jiraid\"]\r\n            smaxticketID = i[\"hcmxid\"]\r\n            watcherId = i[\"lower_user_name\"].upper()\r\n            watcherIdLowerDomain = watcherId + \"@cerner.net\"\r\n            watcherIdUpperDomain = watcherId + \"@Cerner.net\"\r\n            reqUrl = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Request/\" + smaxticketID + \"/associations/FollowedByUsers?layout=Id,Upn\"\r\n\r\n            response = requests.get(reqUrl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n            responseCode = str(response.status_code)\r\n\r\n            if response.status_code == 200:\r\n                responseData = json.loads(response.content)\r\n                message = responseData\r\n                if responseData[\"meta\"][\"total_count\"] > 0:\r\n                    json_string = json.dumps(responseData)\r\n                    if (json_string.find(watcherIdLowerDomain) != -1) or (json_string.find(watcherIdUpperDomain) != -1):\r\n                        existingWatcherList += \"♪\" + watcherIdLowerDomain + \"♫\" + smaxticketID\r\n                    else:\r\n                        newWatcherIdList += \"♪\" + watcherIdLowerDomain + \"♫\" + smaxticketID\r\n                elif responseData[\"meta\"][\"total_count\"] == 0:\r\n                    newWatcherIdList += \"♪\" + watcherIdLowerDomain + \"♫\" + smaxticketID\r\n                else:\r\n                    message = \"No watchers in the SMAX Request\"\r\n                    result = \"True\"\r\n            else:\r\n                failCodes = status_codes[\"jira\"]\r\n                if responseCode in failCodes:\r\n                    provider_issue = \"True\"\r\n                    msg = \"Unsupported response from the Provider :\" + str(response.text) + \" :Response Code: \" + str(\r\n                        response.status_code)\r\n                    errorType = \"e20000\"\r\n                    raise Exception(msg)\r\n                else:\r\n                    result = \"False\"\r\n                    errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + str(response.status_code) + \"||ErrorMessage,\" + str(\r\n                        response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + str(response.status_code) + \"||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"newWatcherIdList\": newWatcherIdList,\r\n            \"existingWatcherList\": existingWatcherList, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorLogs\": errorLogs,\r\n            \"provider_issue\": provider_issue,\"jiraticketID\":jiraticketID,\"smaxticketID\":smaxticketID}\r\n\r\n\r\ndef fetchUserIdForWatcher(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, newWatcherIdList,\r\n                          smax_authToken, status_codes,smaxTikID,jiraTikID):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    errorLogs = \"\"\r\n    provider_issue = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    watcherPersonIdList = \"\"\r\n    watcherMissingInSmax = \"\"\r\n    smaxticketID = \"\"\r\n    jiraticketID = \"\"\r\n    response = \"\"\r\n    responseCode = \"\"\r\n\r\n    try:\r\n        import json\r\n        import requests\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n        for issues in newWatcherIdList.split(\"♪\"):\r\n            watcherID = issues.split(\"♫\")[0]\r\n            ## Ignore the Service Accounts i.e any account starting with first 3 chars as 'svc'\r\n            if 'svc' == watcherID[:3].lower():\r\n                continue\r\n            smaxID = issues.split(\"♫\")[1]\r\n            reqUrl = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Person?layout=Id,Upn,Email,EmployeeStatus&filter=Upn='\" + watcherID + \"'\"\r\n\r\n            response = requests.get(reqUrl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n            responseCode = str(response.status_code)\r\n\r\n            if response.status_code == 200:\r\n                entityJsonArray = json.loads(response.content)\r\n                if entityJsonArray[\"entities\"]:\r\n                    watcherUserId = entityJsonArray[\"entities\"][0][\"properties\"][\"Id\"]\r\n                    watcherPersonIdList += \"♪\" + watcherUserId + \"♫\" + smaxID\r\n\r\n                else:\r\n                    watcherMissingInSmax += smaxID + \":\" + watcherID + \",\"\r\n                    errorLogs += \"SMAXRequestId,\" + smaxTikID + \"||JiraIssueId,\" + jiraTikID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + str(response.status_code) + \"||ErrorMessage,\" + \"Watchers missing in SMAX - \"+ watcherMissingInSmax + \" :Response Code: \" + \"\" + \"|||\"\r\n            else:\r\n                failCodes = status_codes[\"jira\"]\r\n                if responseCode in failCodes:\r\n                    provider_issue = \"True\"\r\n                    msg = \"Unsupported response from the Provider : \" + str(\r\n                        response.text) + \" :Response Code: \" + str(response.status_code)\r\n                    errorType = \"e20000\"\r\n                    raise Exception(msg)\r\n                else:\r\n                    result = \"False\"\r\n                    errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + str(response.status_code) + \"||ErrorMessage,\" + str(\r\n                        response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n        if len(watcherPersonIdList) > 0:\r\n            watcherPersonIdList = watcherPersonIdList[1:]\r\n            message = \"Fetched the ID's of watchersID's from SMAX\"\r\n            result = \"True\"\r\n        else:\r\n            message = \"No recent updated watchers in SMAX\"\r\n            result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"watcherMissingInSmax\": watcherMissingInSmax,\r\n            \"watcherPersonIdList\": watcherPersonIdList, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorLogs\": errorLogs,\r\n            \"provider_issue\": provider_issue}"
  outputs:
    - result
    - message
    - watcherMissingInSmax
    - newWatcherIdList
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - existingWatcherList
    - watcherPersonIdList
    - errorLogs
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
