namespace: Cerner.DFMP.Schedulers.SMAX.Operations
operation:
  name: getUpdatedWatchersRequestIds
  inputs:
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - lastUpdate:
        required: false
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - smax_authToken
    - http_fail_status_codes: "${get_sp('Cerner.DigitalFactory.http_fail_status_codes')}"
    - smax_request_id_list:
        required: false
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Watchers From Smax TO Jira\r\n#    Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Inputs:\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  lastUpdate\r\n#       -   conn_timeout\r\n#       #watcherUpdateTime\r\n#       -  http_fail_status_codes\r\n#       -  smax_authToken\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - newUpdateTime\r\n#       - smaxAndJiraIDs\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorMessage\r\n#       - errorLogs\r\n#       - provider_issue\r\n# Modified on 16 Aug 2022 by Ashwini Shalke for error logs\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\nimport time\r\nimport datetime\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n\r\n# main function\r\ndef execute(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, lastUpdate, conn_timeout,\r\n            smax_authToken, http_fail_status_codes,smax_request_id_list):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    smaxDataU = {}\r\n    token = \"\"\r\n    smaxAndJiraIDs = \"\"\r\n    currentTime = str(time.time())\r\n    # newUpdateTime = currentTime.split(\".\")[0]\r\n    newUpdateTime = (currentTime[:10] + currentTime[11:])[0: 13]\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    errorLogs = \"\"\r\n    provider_issue = \"\"\r\n    smaxticketID = \"\"\r\n    jiraticketID = \"\"\r\n    smax_jirasmaxid_list = \"\"\r\n    id =\"\"\r\n    response =\"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        status_codes = json.loads(http_fail_status_codes)\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n        if smax_request_id_list:\r\n            smaxIDS = smax_request_id_list.split(\",\")\r\n            for smaxID in smaxIDS:\r\n                if smaxID:\r\n                    id += smaxID + \",\"\r\n            if id:\r\n                id = id[:-1]\r\n                reqUrl = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Request?layout=Id,JiraIssueId_c,WatcherUpdateTime_c&filter=Id+in+(\" + id + \")\"\r\n\r\n        else:\r\n            reqUrl = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Request?layout=Id,JiraIssueId_c,WatcherUpdateTime_c&filter=WatcherUpdateTime_c>\" + lastUpdate\r\n\r\n        if reqUrl:\r\n            response = requests.get(reqUrl\r\n                                , auth=basicAuthCredentials, headers=authHeaders, cookies=cookies,\r\n                                timeout=int(conn_timeout))\r\n\r\n            if response.status_code == 200:\r\n                entityJsonArray = json.loads(response.content)\r\n                if entityJsonArray[\"entities\"] == []:\r\n                    message = \"No recent issues in SMAX\"\r\n                    result = \"True\"\r\n                else:\r\n                    for entity in entityJsonArray[\"entities\"]:\r\n                        JiraIssueId = \"\"\r\n                        if 'JiraIssueId_c' in entity[\"properties\"]:\r\n                            JiraIssueId = entity[\"properties\"][\"JiraIssueId_c\"]\r\n                        if JiraIssueId:\r\n                            smaxAndJiraIDs += entity[\"properties\"][\"Id\"] + \"♫\" + entity[\"properties\"][\"JiraIssueId_c\"] + \"♪\"\r\n\r\n                        else:\r\n                            message = \"No Jira Issue ID found for Smax Request ID : \" + entity[\"properties\"][\"Id\"]\r\n                            result = \"True\"\r\n                            continue\r\n\r\n\r\n                if len(smaxAndJiraIDs) > 0:\r\n                    smaxAndJiraIDs = smaxAndJiraIDs[:-1]\r\n                    message = \"Fetched the updated watchersRequestID's from SMAX\"\r\n                    result = \"True\"\r\n                else:\r\n                    message = \"No recent updated watchers in SMAX\"\r\n                    result = \"True\"\r\n            else:\r\n                failCodes = status_codes[\"smax\"]\r\n                if str(response.status_code) in failCodes:\r\n                    provider_issue = \"True\"\r\n                    msg = \"Unsupported response from the Provider: \" + str(response.text) + \" :Response Code: \" + str(\r\n                        response.status_code)\r\n                    raise Exception(msg)\r\n                else:\r\n                    errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                        response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n                result = \"False\"\r\n                errorType = \"e20000\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if errorType != \"\":\r\n            errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not errorLogs:\r\n            errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"newUpdateTime\": newUpdateTime, \"smaxAndJiraIDs\": smaxAndJiraIDs,\r\n            \"errorType\": errorType, \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider,\r\n            \"errorMessage\": errorMessage, \"provider_issue\": provider_issue, \"errorLogs\": errorLogs}"
  outputs:
    - result
    - message
    - smaxAndJiraIDs
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - newUpdateTime
    - errorLogs
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
