namespace: Cerner.DFMP.Schedulers.JIRA.Operations
operation:
  name: postWatchersFromJiraToSmax
  inputs:
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - watcherPersonIdList:
        required: false
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - http_fail_status_codes: "${get_sp('Cerner.DigitalFactory.http_fail_status_codes')}"
    - previous_errorLogs:
        required: false
    - smax_authToken
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Watchers From Jira TO Smax\r\n#    Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Inputs:\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  createWatcherIdList\r\n#       -  conn_timeout\r\n#       -  http_fail_status_codes\r\n#       -  previous_errorLogs\r\n#       -  smax_authToken\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       #newUpdateTime\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorMessage\r\n#       - errorLogs\r\n#       - provider_issue\r\n# Modified on 16 Aug 2022 by Ashwini Shalke for error logs\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e30000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# main function\r\ndef execute(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, watcherPersonIdList,\r\n            conn_timeout,http_fail_status_codes,previous_errorLogs,smax_authToken):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    errorLogs =\"\"\r\n    provider_issue = \"\"\r\n    smaxticketID = \"\"\r\n    jiraticketID = \"\"\r\n    request_body = {}\r\n    \r\n\r\n    try:\r\n        import json\r\n        import requests\r\n        if len(watcherPersonIdList.split(\"♪\")) > 0:\r\n            for issues in watcherPersonIdList.split(\"♪\"):\r\n                status_codes = json.loads(http_fail_status_codes)\r\n                personID = str(issues.split(\"♫\")[0])\r\n                smaxticketID = str(issues.split(\"♫\")[1])\r\n                jiraticketID = \"\"\r\n                request_body = {}\r\n                request_body[\"relationships\"] = []\r\n                json_element = {}\r\n                json_element[\"name\"] = \"FollowedByUsers\"\r\n                json_element[\"firstEndpoint\"] = {}\r\n                json_element[\"firstEndpoint\"][\"Request\"] = smaxticketID\r\n                json_element[\"secondEndpoint\"] = {}\r\n                json_element[\"secondEndpoint\"][\"Person\"] = personID\r\n                request_body[\"relationships\"].append(json_element)\r\n                request_body[\"operation\"] = \"CREATE\"\r\n\r\n                authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n                cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n                reqUrl = '{0}/rest/{1}/ems/bulk'.format(smax_baseurl, smax_tenantId)\r\n                response = requests.post(reqUrl, headers=authHeaders, cookies=cookies, json=request_body,\r\n                                         timeout=2 * int(conn_timeout))\r\n                message = response.text\r\n                if response.status_code == 200:\r\n                    message = \"Watchers Created!\"\r\n                    result = \"True\"\r\n                else:\r\n                    failCodes = status_codes[\"smax\"]\r\n                    if str(response.status_code) in failCodes:\r\n                        provider_issue = \"True\"\r\n                        msg = \"Unsupported response from the Provider: \" + str(response.text) + \" :Response Code: \" + str(\r\n                            response.status_code)\r\n                        raise Exception(msg)\r\n                    else:\r\n                        errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody, ||ErrorMessage,\" + str(\r\n                            response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n                    result = \"False\"\r\n                    errorType = \"e20000\"\r\n        else:\r\n            result = \"True\"\r\n            message = \"No Recent Updated Watchers In Jira\"\r\n        \r\n        result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = str(message)\r\n        if not errorLogs:\r\n            errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + str(request_body) + \"||ErrorMessage,\" + str(message) + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\"provider_issue\":provider_issue,\"errorLogs\":errorLogs + previous_errorLogs}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - errorLogs
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
