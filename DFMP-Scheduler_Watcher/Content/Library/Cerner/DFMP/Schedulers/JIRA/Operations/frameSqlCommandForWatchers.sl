namespace: Cerner.DFMP.Schedulers.JIRA.Operations
operation:
  name: frameSqlCommandForWatchers
  inputs:
    - lastUpdate:
        required: false
    - smax_request_id_list:
        required: false
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Watchers From Smax TO Jira\r\n#    Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Inputs:\r\n#       - lastUpdate\r\n#       - smax_request_id_list\r\n#   Outputs:\r\n#       - sqlCommand\r\n#       - result\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorMessage\r\n# Modifiied on 26 Dec 2022 by Rakesh to fix the issue of nvarchar to int query comparison\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\nimport time\r\nimport datetime\r\nfrom datetime import datetime\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\n\r\ninstall(\"pytz\")\r\ninstall(\"time\")\r\n\r\n\r\n# main function\r\ndef execute(lastUpdate, smax_request_id_list):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    smax_id_list = ''\r\n\r\n    try:\r\n        dateTimeFormat = \"\"\r\n        sqlCommand = \"\"\r\n        result = \"True\"\r\n        # convert unix time stamp to date time format\r\n        from datetime import datetime, timezone\r\n        import pytz\r\n        from datetime import datetime, timedelta\r\n        if lastUpdate:\r\n            lastUpdateTime = int(int(lastUpdate) / 1000)\r\n            # lastUpdateTime =lastUpdate[:-3]\r\n            time_epoch = lastUpdateTime\r\n            # time_obj = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(int(time_epoch)))\r\n            fmt = '%Y-%m-%d %H:%M:%S'\r\n            cstTimeZone = pytz.timezone('US/Central')\r\n            time_from_utc = datetime.fromtimestamp(int(time_epoch), tz=timezone.utc)\r\n            time_from = time_from_utc.astimezone(cstTimeZone)\r\n            newDateTime = time_from - timedelta(minutes=10)\r\n            dateTimeFormat = newDateTime.strftime(fmt)\r\n            # dateTimeFormat=time_from.strftime(fmt)\r\n\r\n            # frame SQL command\r\n            sqlCommand = \"select SINK_NODE_ID as jiraId, SINK_NODE_ENTITY as issueType, STRINGVALUE as HCMxId, lower_user_name,CREATED from jiradb3.dbo.userassociation as UA inner join jiradb3.dbo.customfieldvalue as CV on UA.SINK_NODE_ID =CV.ISSUE inner join jiradb3.dbo.app_user as AU on UA.SOURCE_NAME = AU.user_key where ASSOCIATION_TYPE = 'WatchIssue' and CV.CUSTOMFIELD = 49500 and UA.CREATED >\" + \"'\" + dateTimeFormat + \"'\" + \" and lower_user_name not like 'svcmarket%' \"\r\n        else:\r\n            if smax_request_id_list[-1] == \",\":\r\n                smax_request_id_list = smax_request_id_list[:-1]\r\n\r\n            sqlCommand = \"select SINK_NODE_ID as jiraId, SINK_NODE_ENTITY as issueType, STRINGVALUE as HCMxId, lower_user_name,CREATED from jiradb3.dbo.userassociation as UA inner join jiradb3.dbo.customfieldvalue as CV on UA.SINK_NODE_ID =CV.ISSUE inner join jiradb3.dbo.app_user as AU on UA.SOURCE_NAME = AU.user_key where ASSOCIATION_TYPE = 'WatchIssue' and CV.CUSTOMFIELD = 49500 and lower_user_name not like 'svcmarket%' \"\r\n\r\n            if ',' in smax_request_id_list:\r\n                for smax_id in smax_request_id_list.split(','):\r\n                    if smax_id:\r\n                        smax_id_list += \"'\" + smax_id + \"',\"\r\n                smax_id_list = smax_id_list[:-1]\r\n            else:\r\n                smax_id_list = \"'\" + smax_request_id_list + \"'\"\r\n\r\n            sqlCommand += \"and STRINGVALUE in (\" + smax_id_list + \")\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e10000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n\r\n    return {\"sqlCommand\": sqlCommand, \"result\": result, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n        \"errorMessage\": errorMessage}"
  outputs:
    - sqlCommand
    - result
    - errorType
    - errorSeverity
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
