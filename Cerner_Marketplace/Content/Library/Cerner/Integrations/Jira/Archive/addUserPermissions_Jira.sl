namespace: Cerner.Integrations.Jira.Archive
operation:
  name: addUserPermissions_Jira
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - jiraFailureHTTPcode:
        required: false
    - jiraFailureMessage:
        required: false
    - watcherFileId:
        required: false
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Jira and Smax\r\n#   Author: Rajesh Singh (rajesh.singh5@microfocus.com), MicroFocus International\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  jiraFailureHTTPcode\r\n#       -  jiraFailureMessage\r\n#       -  watcherFileId\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n# function do download external modules to python \"on-the-fly\" \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    errorMessage=''\r\n    errorCode = ''\r\n    try:\r\n        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        \r\n    return {\"result\": result, \"message\": message }\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n#main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jiraFailureHTTPcode, jiraFailureMessage, watcherFileId):\r\n    message = \"\"\r\n    result = \"False\"\r\n    queryParmJiraUser = \"\"\r\n    userPermissionError=\"\"\r\n    updateUserPersmissionResult=\"\"\r\n    errorMessageJson = {}\r\n    errorMessage=''\r\n    errorCode = ''\r\n    \r\n    \r\n    try:\r\n        import json\r\n        \r\n        if jiraFailureHTTPcode.strip() == '403':\r\n            errorMessageJson = json.loads(jiraFailureMessage)\r\n            userPermissionError = str(errorMessageJson[\"errors\"][watcherFileId])\r\n            if userPermissionError.find(\"Users do not have permission to view this issue:\") > -1:\r\n                queryParmJiraUser = (userPermissionError[userPermissionError.find(\":\")+1:]).strip().replace(\", \",\",\")\r\n                updateUserPersmissionResult = updateUserPermissions(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, queryParmJiraUser)\r\n                result = updateUserPersmissionResult[\"result\"]\r\n                message = updateUserPersmissionResult[\"message\"]\r\n            else:\r\n                result = \"False\"\r\n                message = jiraFailureMessage\r\n                errorMessage = 'StepName-addUserPermission_Jira: '+message\r\n                errorCode = 'e20000'\r\n        else:\r\n            result = \"False\"\r\n            message = jiraFailureMessage\r\n            errorMessage = 'StepName-addUserPermission_Jira: '+message\r\n            errorCode = 'e20000'\r\n\r\n    except Exception as e:\r\n        message = \"Exception:\"+str(e) + \" Jira HTTP Post Failure Message:\"+jiraFailureMessage\r\n        result = \"False\"\r\n        errorCode = 'e20000'\r\n        errorMessage = 'StepName-addUserPermission_Jira: '+message\r\n        \r\n    return {\"result\": result, \"message\": message,\"errorCode\": errorCode,\"errorMessage\":errorMessage }\r\n\r\n\r\n#seach all the issues updated since lastUpdate params\r\ndef updateUserPermissions(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, queryParmJiraUser):\r\n    message = \"\"\r\n    result = \"False\"\r\n    jiraIssueStatus = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        \r\n        reqUrl = '{0}rest/scriptrunner/latest/custom/addUserToJiraDefault?username={1}'.format(MarketPlace_jiraIssueURL, queryParmJiraUser)\r\n        data = {}\r\n        \r\n           \r\n            \r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser,MarketPlace_jiraPassword)\r\n        headers = { 'X-Atlassian-Token': 'no-check', 'Content-Type':'application/json'}\r\n\r\n        response = requests.get(reqUrl, auth=basicAuthCredentials, headers=headers)\r\n        if response.status_code == 204:\r\n            result = \"True\"\r\n            message = \"Permission Granted. Retry creating Jira Incident/Request\"\r\n                    \r\n        else:\r\n            message = response.text\r\n            result = \"False\"\r\n        \r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}"
  outputs:
    - result
    - message
    - errorCode
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
