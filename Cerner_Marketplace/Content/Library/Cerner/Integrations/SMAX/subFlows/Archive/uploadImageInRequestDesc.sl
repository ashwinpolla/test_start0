namespace: Cerner.Integrations.SMAX.subFlows.Archive
operation:
  name: uploadImageInRequestDesc
  inputs:
    - smaxURL: "${get_sp('MarketPlace.smaxURL')}"
    - smaxAuthURL: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smaxUser: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smaxPass: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - jiraURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - imageLinks:
        required: false
    - jiraIssueId
  python_action:
    use_jython: false
    script: "import sys, os\r\nimport subprocess\r\n\r\n# do not remove the execute function \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n    # code goes here\r\n# you can add additional helper methods below.\r\n\r\ninstall(\"requests\")\r\n\r\nimport requests\r\n# do not remove the execute function\r\n\r\ndef execute(smaxURL, smaxAuthURL,smaxUser,smaxPass,imageLinks,jiraURL,jiraUser, jiraPassword, jiraIssueId):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorMessage=''\r\n    errorCode = ''\r\n    \r\n    try:\r\n        import json\r\n        import requests\r\n        import sys\r\n\r\n         \r\n        if len(imageLinks.strip()) > 0:\r\n            authResp = getAuthCookie(smaxAuthURL, smaxUser, smaxPass)\r\n            if authResp[\"result\"] == \"True\":\r\n                token = authResp[\"smax_auth\"]\r\n            \r\n            basicAuthCredentials = (smaxUser, smaxPass)\r\n            authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n            #header = \"Cookie: SMAX_AUTH_TOKEN=\"+token+\";TENANTID=\"+smaxTenantId\r\n\r\n            for imageLink in imageLinks.split(\"||\"):\r\n                fileName = imageLink.split('~')[0]\r\n                attachURL = imageLink.split('~')[1]\r\n                attachURL = attachURL[3:attachURL.find(\"?\")]\r\n                turl = smaxURL+attachURL\r\n                if sys.platform.startswith('win'):\r\n                    filePath = \"C:\\Temp\\\\\"+fileName\r\n                else:\r\n                    filePath = \"/tmp/\"+fileName\r\n                response = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n                #response = subprocess.run([\"curl\", \"--location\", \"--request\", \"GET\", turl,\"--header\", header, \"--output\", filePath], capture_output=True)\r\n                print(response)\r\n                #if response.returncode == 0:\r\n                if response.status_code == 200:\r\n                    data = response.content\r\n                    #uploadr = uploadFileToJira(jiraURL, jiraUser, jiraPassword,jiraIssueId,filePath,fileName)\r\n                    uploadr = uploadFileToJira(jiraURL, jiraUser, jiraPassword,jiraIssueId,data,fileName)\r\n                    if uploadr[\"result\"] == \"True\":             \r\n                        result = \"True\"\r\n                        message = uploadr[\"message\"]\r\n                    else:\r\n                        result = \"False\"\r\n                        message = \"Issue Uploading File: \" + uploadr[\"message\"]\r\n                else:\r\n                    message = \"Issue Downloading File: \" +  response.text\r\n        else:\r\n            result = \"True\"\r\n            message = \"No image in description\"\r\n            \r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorCode = 'e30000'\r\n        errorMessage = 'StepName-uploadImageRequestDesc: '+str(e)\r\n    return {\"result\": result, \"message\": message,\"errorCode\": errorCode,\"errorMessage\":errorMessage }\r\n    \r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data={}\r\n        data['Login'] = user\r\n        data['Password']= password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        if response.status_code == 200:\r\n            result = \"True\"\r\n    except Exception as e:\r\n        message = \"During auth token\"+str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token }\r\n    \r\ndef uploadFileToJira(url, user, password, jiraIssueId, filePath, fileName):\r\n    message = \"\"\r\n    result = \"False\"\r\n    token = \"\"\r\n    \r\n    try:\r\n        import requests\r\n        \r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(user,password)\r\n        #files = data\r\n        headers = { 'X-Atlassian-Token': 'no-check'}\r\n        url = \"{0}rest/api/2/issue/{1}/attachments\".format(url,jiraIssueId)\r\n        #response = requests.post(url, files={'file':(fileName,open(filePath,'rb'))}, headers=headers, auth=basicAuthCredentials)\r\n        response = requests.post(url, files={'file':(fileName,filePath)}, headers=headers, auth=basicAuthCredentials)\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            result = \"True\"\r\n            message = \"Image Attached Successfully\"\r\n        else:\r\n            result = \"False\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        \r\n    return {\"result\": result, \"message\": str(message) }"
  outputs:
    - result
    - message
    - errorCode
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
