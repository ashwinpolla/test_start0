namespace: Cerner.Integrations.SMAX.subFlows
operation:
  name: downloadAttachmentUploadToJira
  inputs:
    - smaxURL: "${get_sp('MarketPlace.smaxURL')}"
    - smaxTenantId: "${get_sp('MarketPlace.tenantID')}"
    - smaxAuthURL: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smaxUser: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smaxPass: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smaxReqId
    - jiraURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - jiraIssueId
  python_action:
    use_jython: false
    script: "import sys, os\r\nimport subprocess\r\n\r\n# do not remove the execute function \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n    # code goes here\r\n# you can add additional helper methods below.\r\n\r\ninstall(\"requests\")\r\n\r\n\r\nimport requests\r\n# do not remove the execute function\r\n\r\ndef execute(smaxURL,smaxTenantId, smaxAuthURL,smaxUser,smaxPass,smaxReqId,jiraURL,jiraUser, jiraPassword, jiraIssueId):\r\n    message = \"\"\r\n    result = \"False\"\r\n    requestAttachURL = \"\"\r\n    errorMessage=''\r\n    errorCode = ''\r\n    \r\n    try:\r\n        import json\r\n        import requests\r\n        attachmentLinkResponse ={}\r\n        attachmentList =[]\r\n        responseMeta = {}\r\n        attachmentCount = 0\r\n\r\n        #create smax URL to get attachments for a Request  \r\n        requestAttachURL = smaxURL+\"rest/\"+smaxTenantId+\"/ems/Request/\"+smaxReqId+\"?layout=RequestAttachments\"\r\n\r\n        #get auth token\r\n        authResp = getAuthCookie(smaxAuthURL, smaxUser, smaxPass)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        basicAuthCredentials = (smaxUser, smaxPass)\r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        \r\n        #request to pull the attachment links \r\n        response = requests.get(requestAttachURL, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n\r\n        if response.status_code == 200:\r\n            responseMeta = json.loads(response.text)\r\n            attachmentCount = len(responseMeta[\"entities\"])\r\n            if responseMeta[\"meta\"][\"completion_status\"] == \"OK\":\r\n                if attachmentCount > 0:\r\n                    attachmentLinkResponse = json.loads(response.content)\r\n                    \r\n                    #extract list of attached file attributes\r\n                    attachmentJSONString = attachmentLinkResponse[\"entities\"][0][\"properties\"][\"RequestAttachments\"]\r\n                    attachmentJSONList = json.loads(attachmentJSONString)\r\n                    attachmentList = attachmentJSONList[\"complexTypeProperties\"]\r\n                    \r\n                    print(attachmentList)\r\n                    #loop over json array containing properties of file\r\n                    fileProperties = {} \r\n                    attachmentCount = 0\r\n                    if len(attachmentList) > 0:\r\n                        for fileProperties in attachmentList:\r\n                            if \"file_name\" in fileProperties[\"properties\"]:\r\n                                fileId = fileProperties[\"properties\"][\"id\"]\r\n                                fileName = fileProperties[\"properties\"][\"file_name\"]\r\n                                fileExtension = fileProperties[\"properties\"][\"file_extension\"]\r\n                                fileMimeType = fileProperties[\"properties\"][\"mime_type\"]\r\n\r\n                                #create URL of attached file to download\r\n                                attachURL = smaxURL+\"rest/\"+smaxTenantId+\"/ces/attachment/\"+fileId\r\n                                \r\n                                #download attached file\r\n                                response = requests.get(attachURL, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n                                \r\n                                #if response is successful\r\n                                if response.status_code == 200:\r\n                                    data = response.content\r\n                                    #upload file to Jira\r\n                                    uploadr = uploadFileToJira(jiraURL, jiraUser, jiraPassword,jiraIssueId,data,fileName)\r\n                                    if uploadr[\"result\"] == \"True\":             \r\n                                        result = \"True\"\r\n                                        message = uploadr[\"message\"]\r\n                                        attachmentCount +=1\r\n                                    else:\r\n                                        result = \"False\"\r\n                                        message = \"Issue Uploading File: \" + uploadr[\"message\"]\r\n                                else:\r\n                                    result = \"False\"\r\n                                    message = \"Issue Downloading File: \" +  response.text\r\n                            else:\r\n                                if len(attachmentList) == 1:\r\n                                    result = \"True\"\r\n                                    message = \"No attachment to upload\"\r\n                    else:\r\n                        result = \"True\"\r\n                        message = \"No attachment to upload\"\r\n                else:\r\n                    result = \"True\"\r\n                    message = \"No attachment to upload\"\r\n            else:\r\n                result = \"False\"\r\n                message = \"Failure in attachment http response: \"+str(responseMeta[\"meta\"][\"errorDetailsList\"])\r\n\r\n            \r\n        else:\r\n            result = \"False\"\r\n            message = \"Could not retrieve attachment links from SMAX\"\r\n    \r\n\r\n\r\n       \r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorMessage='StepName-downloadAttachmentUploadToJira: '+str(e)\r\n        errorCode = 'e30000'\r\n    \r\n    if result==\"True\" and attachmentCount > 0:\r\n        message = str(attachmentCount)+\" \"+message\r\n    return {\"result\": result, \"message\": message,\"errorCode\": errorCode,\"errorMessage\":errorMessage}\r\n    \r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data={}\r\n        data['Login'] = user\r\n        data['Password']= password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        if response.status_code == 200:\r\n            result = \"True\"\r\n    except Exception as e:\r\n        message = \"During auth token\"+str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token }\r\n\r\n    \r\ndef uploadFileToJira(url, user, password, jiraIssueId, filePath, fileName):\r\n    message = \"\"\r\n    result = \"False\"\r\n    token = \"\"\r\n    \r\n    try:\r\n        import requests\r\n        \r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(user,password)\r\n        #files = data\r\n        headers = { 'X-Atlassian-Token': 'no-check'}\r\n        url = \"{0}rest/api/2/issue/{1}/attachments\".format(url,jiraIssueId)\r\n        #response = requests.post(url, files={'file':(fileName,open(filePath,'rb'))}, headers=headers, auth=basicAuthCredentials)\r\n        response = requests.post(url, files={'file':(fileName,filePath)}, headers=headers, auth=basicAuthCredentials)\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            result = \"True\"\r\n            message = \"File(s) Attached Successfully\"\r\n        else:\r\n            result = \"False\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        \r\n    return {\"result\": result, \"message\": str(message) }"
  outputs:
    - result
    - message
    - errorCode
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
