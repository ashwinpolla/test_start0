namespace: Cerner.DFMP.SMAX.Operations
operation:
  name: createSMAXComment
  inputs:
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_Url: "${get_sp('MarketPlace.smaxURL')}"
    - userUpn
    - smaxticketID
    - commentData
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - smax_Token
    - http_fail_status_codes: "${get_sp('Cerner.DigitalFactory.http_fail_status_codes')}"
    - previous_errorLogs:
        required: false
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for comment creation in SMAX\r\n#   Operation: createSMAXComment\r\n#   Author: Ashwini SHalke(AS091236@cerner.net)\r\n#   Inputs:\r\n#       -  smax_user\r\n#       -  smax_tenantId\r\n#       -  smax_Url\r\n#       -  conn_timeout\r\n#       -  http_fail_status_codes\r\n#       -  UserUpn\r\n#       -  smax_Token\r\n#       -  smaxticketID\r\n#       -  commentData\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorMessage\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - provider_failure\r\n#       - errorLogs\r\n#################################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\ninstall(\"markdownify\")\r\n\r\ndef execute(smax_Url,smax_Token, smax_tenantId, smax_user, smaxticketID,conn_timeout, http_fail_status_codes,userUpn,commentData):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorLogs = \"\"\r\n    provider_failure = \"\"\r\n    ProviderUrlBody = \"\"\r\n    jiraticketID = \"\"\r\n    reqUrl = \"\"\r\n    responseCode = \"\"\r\n\r\n    import requests\r\n\r\n    try:\r\n        import json\r\n        status_codes = json.loads(http_fail_status_codes)\r\n        \r\n        fetchUserIdFromSmax = getUserID(smax_Token, smax_Url, smax_tenantId, userUpn, smaxticketID, jiraticketID, conn_timeout)\r\n        commentUserId = fetchUserIdFromSmax[\"commentUpdateUserId\"]\r\n\r\n        # ************** create comment in smax ********************\r\n        postCommentsFromJiraToSMAX = postCommentsToSMAX(smax_Url, smax_tenantId, smax_Token, smaxticketID, jiraticketID,commentData, commentUserId,status_codes, conn_timeout)\r\n        tresult = postCommentsFromJiraToSMAX[\"result\"]\r\n        message = postCommentsFromJiraToSMAX[\"message\"]\r\n        errorType = postCommentsFromJiraToSMAX[\"errorType\"]\r\n        errorLogs += postCommentsFromJiraToSMAX[\"errorLogs\"]\r\n        provider_failure = postCommentsFromJiraToSMAX[\"provider_failure\"]\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"JIRA\"\r\n        errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n        \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n        \"errorLogs\": errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\n# main function :- auto generated comments in SMAX\r\ndef postCommentsToSMAX(smax_Url, smax_tenantId, smax_Token, smaxticketID, jiraticketID,commentData, commentUserId,status_codes, conn_timeout):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    failCodes = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        data = {}\r\n        data[\"IsSystem\"] = \"false\"\r\n        data[\"Body\"] = commentData + \"<p><span style=\\\"color:#ffffff\\\">\" + \"</span></p>\"\r\n        data[\"ActualInterface\"] = \"ESS\"\r\n        data[\"CommentFrom\"] = \"User\"\r\n        data[\"CommentTo\"] = \"Agent\"\r\n        data[\"Media\"]= \"UI\"\r\n        data[\"FunctionalPurpose\"] = \"EndUserComment\"\r\n        data[\"Submitter\"] = {}\r\n        data[\"Submitter\"][\"UserId\"] = commentUserId\r\n        ProviderUrlBody = str(data)\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n        reqUrl = '{0}/rest/{1}/collaboration/comments/Request/{2}'.format(smax_Url, smax_tenantId, smaxticketID)\r\n        response = requests.post(reqUrl, headers=authHeaders, cookies=cookies, json=data, timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n        if response.status_code == 201:\r\n            message = \"Comments updated from JIRA to SMAX\"\r\n            result = \"True\"\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                result = \"False\"\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n                    reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n                    responseBody) + \": Response Code: \" + str(responseCode) + \"|||\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorLogs\": errorLogs,\r\n            \"provider_failure\": provider_failure}\r\n   \r\n            \r\ndef getUserID(smax_Token, smax_Url, smax_tenantId, jiracomUptUserName, smaxticketID, jiraticketID, conn_timeout):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    commentUpdateUserId = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseCode = \"\"\r\n    responseBody = \"\"\r\n    errorLogs = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n        reqUrl = smax_Url + \"/rest/\" + smax_tenantId + \"/ems/Person?layout=Id,Upn,Email,EmployeeStatus&filter=Upn='\" + jiracomUptUserName + \"'\"\r\n        response = requests.get(reqUrl, headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n        responseCode = str(response.status_code)\r\n        responseBody = str(response.content)\r\n\r\n        if response.status_code == 200:\r\n            entityJsonArray = json.loads(response.content)\r\n            if 'properties' in str(entityJsonArray):\r\n                commentUpdateUserId = entityJsonArray[\"entities\"][0][\"properties\"][\"Id\"]\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"commentUpdateUserId\": commentUpdateUserId,\r\n            \"errorLogs\": errorLogs}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - errorLogs
    - provider_failure
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
