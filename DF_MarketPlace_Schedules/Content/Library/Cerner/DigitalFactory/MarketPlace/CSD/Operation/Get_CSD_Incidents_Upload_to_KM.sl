namespace: Cerner.DigitalFactory.MarketPlace.CSD.Operation
operation:
  name: Get_CSD_Incidents_Upload_to_KM
  inputs:
    - csd_authtoken: "${get_sp('MarketPlace.CSDAuthToken')}"
    - csd_host: "${get_sp('MarketPlace.CSDHost')}"
    - csd_port: "${get_sp('MarketPlace.CSDPort')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - csd_severity
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for synchronizing CSD Incidents and Smax\r\n#   Author: Pawel Bak and Rajesh Singh - Micro Focus International(pawel.bak@microsoft.com, rajesh.singh5@microfocus.com)\r\n#   Inputs:\r\n#       - csd_authtoken\r\n#       - csd_host\r\n#       - csd_port\r\n#       - smax_auth_baseurl\r\n#       - smax_user\r\n#       - smax_password\r\n#       - smax_tenantId\r\n#       - smax_baseurl\r\n#       - smax_service\r\n#       - past_days\r\n#       - csd_severity\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - incidents\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorMessage\r\n#   Modified On: 24 Nov 2021\r\n#   Modified by: Rakesh.Sharma@cerner.com\r\n#   Description: Old or Expired Incidents removed from SMAX\r\n#   Modified on 28 Jun 2022 by Rakesh Sharma to modify the logic to delete incident records from SMAX\r\n#   Modified on 13 Dec 2022 by Rakesh Sharma to return more and precise error information on failure\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# e30007\r\nclass ExternalLibraryNotPresent(Exception):\r\n    \"\"\"Raised external library not present\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"External library not present: \" + str(message)\r\n        self.errorNumber = \"e30007\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CODE\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20015\r\nclass CsdAPITimeoutError(Exception):\r\n    \"\"\"Raised when CSD API timedout\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"CSD API timedout: \" + str(message)\r\n        self.errorNumber = \"e20015\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e30008\r\nclass CsdAPIFormatIssueError(Exception):\r\n    \"\"\"Raised when CSD API output format issue\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"CSD API output format issue: \" + str(message)\r\n        self.errorNumber = \"e30008\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e10009\r\nclass CsdAPIAuthError(Exception):\r\n    \"\"\"Raised when CSD API authentication issue\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"CSD API authentication issue: \" + str(message)\r\n        self.errorNumber = \"e10009\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e30009\r\nclass CsdAPIIncidentCodeError(Exception):\r\n    \"\"\"Raised when issue downloading incident\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue downloading incident: \" + str(message)\r\n        self.errorNumber = \"e30009\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20016\r\nclass CsdAPIIncidentSystemError(Exception):\r\n    \"\"\"Raised when issue downloading incident\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue downloading incident: \" + str(message)\r\n        self.errorNumber = \"e20016\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20017\r\nclass SmaxAPIGettingOldArticleError(Exception):\r\n    \"\"\"Raised when issue getting old articles from SMAX\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue getting old articles from SMAX: \" + str(message)\r\n        self.errorNumber = \"e20017\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20002\r\nclass SmaxAPITimeoutError(Exception):\r\n    \"\"\"Raised when SMAX API timedout\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"SMAX API timedout: \" + str(message)\r\n        self.errorNumber = \"e20002\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e10002\r\nclass SmaxAPICredentialsIncorrectError(Exception):\r\n    \"\"\"Raised when SMAX API Credentials Failed\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"SMAX API Credentials Failed: \" + str(message)\r\n        self.errorNumber = \"e10002\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20016\r\nclass SmaxAPIBulkArticleError(Exception):\r\n    \"\"\"Raised when issue executing bulk API from SMAX\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue execting bulk API from SMAX: \" + str(message)\r\n        self.errorNumber = \"e20016\"\r\n        self.errorSeverity = \"ERROR\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n\r\n# main function\r\ndef execute(csd_authtoken, csd_host, csd_port, smax_auth_baseurl, smax_user, smax_password, smax_tenantId,\r\n            smax_baseurl, csd_severity):\r\n    message = \"\"\r\n    result = \"\"\r\n    past_days = \"90\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    incidents_externalId_list = \"\"\r\n\r\n    try:\r\n        import json\r\n        smaxData = {}\r\n        smaxData['entities'] = []\r\n        smaxData['operation'] = \"CREATE\"\r\n        incidentsres = {}\r\n        incidentsres[\"result\"] = ''\r\n        incidentMessage = ''\r\n        existingIncidentIds = ''\r\n\r\n        # get existing incidents ids#\r\n        existingIncidentIdR = FindOldArticlesForSourceSystem(smax_auth_baseurl, smax_user, smax_password, smax_tenantId,\r\n                                                             smax_baseurl, SourceSystem=\"CSD-Incident\")\r\n        if existingIncidentIdR[\"result\"] == \"True\":\r\n            existingIncidentIds = existingIncidentIdR[\"smax_externalIds\"]\r\n        else:\r\n            raise SmaxAPIGettingOldArticleError(existingIncidentIdR[\"message\"])\r\n\r\n        jirar = getJiraAppInstances(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\r\n        if jirar[\"result\"] == \"True\":\r\n            jiraData = json.loads(jirar[\"jiraData\"])\r\n            for jelem in jiraData[\"entities\"]:\r\n                jira_servID = smax_servID = \"\"\r\n                try:\r\n                    jira_servID = jelem[\"properties\"][\"DisplayLabel\"]\r\n                    smax_servID = jelem[\"properties\"][\"ServiceDefId_c\"]\r\n                except:\r\n                    jira_servID = smax_servID = \"\"\r\n                if jira_servID != \"\" and smax_servID != \"\":\r\n                    incidentsres = getIncidents(csd_host, csd_port, csd_authtoken, jira_servID, past_days)\r\n                    if incidentsres[\"result\"] == \"True\" and len(incidentsres[\"incidents\"]) > 2:\r\n                        smaxConversion = convertJiraToSmaxIncident(incidentsres[\"incidents\"], jira_servID, smax_servID,\r\n                                                                   csd_host, csd_severity)\r\n\r\n                        if smaxConversion[\"incidents_externalId_list\"]:\r\n                            incidents_externalId_list += smaxConversion[\r\n                                \"incidents_externalId_list\"]  ### it was for test ##+ smaxConversion[\"result\"] + str(len(smaxConversion[\"smaxData\"])) + str(smaxConversion[\"message\"])\r\n                        if smaxConversion[\"result\"] == \"True\" and len(smaxConversion[\"smaxData\"]) > 2:\r\n                            if len(existingIncidentIds) > 0:\r\n                                smaxDeltaIncidents = createIncidentForInserts(smaxConversion[\"smaxData\"],\r\n                                                                              existingIncidentIds)\r\n                                if len(smaxDeltaIncidents[\"smaxData\"]) > 2:\r\n                                    smaxData['entities'] += json.loads(smaxDeltaIncidents[\"smaxData\"])\r\n                                    result = \"True\"\r\n                            else:\r\n                                smaxData['entities'] += json.loads(smaxConversion[\"smaxData\"])\r\n                                result = \"True\"\r\n                    elif incidentsres[\"result\"] == \"Error\":\r\n                        raise CsdAPIIncidentSystemError(incidentsres[\"message\"])\r\n                        #raise CsdAPIIncidentSystemError(str(incidentsres))\r\n                    elif incidentsres[\"result\"] == \"True\" and len(incidentsres[\"incidents\"]) <= 2:\r\n                        continue\r\n                    else:\r\n                        incidentMessage += incidentsres[\"message\"] + \"|\"\r\n        else:\r\n            raise SmaxAPIBulkArticleError(jirar[\"message\"])\r\n\r\n        if result == \"True\" or len(smaxData) > 2:\r\n            insertRes = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl,\r\n                                       json.dumps(smaxData))\r\n            result = insertRes[\"result\"]\r\n            message = insertRes[\"message\"] + ':smaxData - ' + str(smaxData)\r\n            if insertRes[\"result\"] == \"Error\":\r\n                raise SmaxAPIBulkArticleError(insertRes[\"message\"])\r\n        else:\r\n            result = \"True\"\r\n            message = \"No new article found\"\r\n\r\n        # Remove old or expired incidents or Incidents which has completed\r\n        if len(existingIncidentIds) > 0:  ### and incidentsres[\"result\"] == \"True\":\r\n            roer = RemoveOldExpiredIncidents(smax_auth_baseurl, smax_user, smax_password, smax_tenantId,\r\n                                             smax_baseurl, incidents_externalId_list)\r\n\r\n            if roer[\"result\"] == \"Error\" or roer[\"result\"].lower() == \"false\":\r\n                raise SmaxAPIBulkArticleError(roer[\"message\"])\r\n\r\n        # Set the final Message\r\n        message = message + ' |' + incidentMessage  ## It was for test ##+ ': ' + str(smaxData) + ': ' + str(incidents_externalId_list)\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"CSD\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# remove the incidents (for insert) that already exist in SMAX\r\ndef createIncidentForInserts(sourceIncidents, targetIncidentIds):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    targetIds = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import json\r\n        import datetime\r\n        i = 0\r\n        incidentsData = json.loads(sourceIncidents)\r\n        for sourceId in incidentsData:\r\n            targetIds = targetIncidentIds.split(\"♪\")\r\n            for targetId in targetIds:\r\n                if targetId == sourceId[\"properties\"][\"ExternalId\"]:\r\n                    del incidentsData[i]\r\n            i = i + 1\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorMessage = str(message) + ': Internal Function - createIncidentForInserts'\r\n        message = errorMessage\r\n    return {\"result\": result, \"message\": message, \"smaxData\": incidentsData, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# convert from jira json to smax json\r\ndef convertJiraToSmaxIncident(incidents, csdService, serviceId, csd_host, csd_severity):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    incidents_externalId_list = \"\"\r\n\r\n    try:\r\n        import json\r\n        import datetime\r\n        incidentsData = json.loads(incidents)\r\n        smaxData = [0] * len(incidentsData)\r\n        csd_severity = json.loads(csd_severity)\r\n\r\n        i = 0\r\n        for incident in incidentsData:\r\n            try:\r\n                date = datetime.datetime.fromisoformat(incident[\"startedAt\"])\r\n            except:\r\n                date = datetime.datetime.now()\r\n            timestampStartAt = int(date.timestamp())\r\n            timestampStartAtStr = datetime.datetime.utcfromtimestamp(timestampStartAt).isoformat()\r\n\r\n            incidents_externalId_list += incident[\"id\"] + ','\r\n\r\n            article = {}\r\n            article[\"entity_type\"] = \"Article\"\r\n            article[\"properties\"] = {}\r\n            article[\"properties\"][\"Title\"] = \"Incident: {0}\".format(incident[\"name\"])\r\n            article[\"properties\"][\"ExternalId\"] = \"{0}\".format(incident[\"id\"])\r\n            article[\"properties\"][\r\n                \"Content\"] = \"<p>Service Impacted: {0} </p> <p>Started At: {1} UTC </p> <p>Follow the link for details: <a href=\\\"https://{2}/incidents/{3}\\\">here</a><br><br>\".format(\r\n                csdService, timestampStartAtStr, csd_host, incident[\"id\"])\r\n            article[\"properties\"][\r\n                \"Description\"] = \"<p>Service Impacted: {0} </p> <p>Started At: {1} UTC </p> <p>Follow the link for details: <a href=\\\"https://{2}/incidents/{3}\\\">here</a><br><br>\".format(\r\n                csdService, timestampStartAtStr, csd_host, incident[\"id\"])\r\n            article[\"properties\"][\"Service\"] = serviceId\r\n            if incident[\"severity\"]:\r\n                severity = csd_severity.get(incident[\"severity\"])\r\n                if severity:\r\n                    article[\"properties\"][\"Priority\"] = severity\r\n                else:\r\n                    article[\"properties\"][\"Priority\"] = \"Normal\"\r\n            else:\r\n                article[\"properties\"][\"Priority\"] = \"Normal\"\r\n            # article[\"properties\"][\"Priority\"] = \"Normal\"\r\n            article[\"properties\"][\"Subtype\"] = \"News\"\r\n            article[\"properties\"][\"PhaseId\"] = \"External\"\r\n            article[\"properties\"][\"SourceSystem_c\"] = \"CSD-Incident\"\r\n            article[\"properties\"][\"EffectiveFrom\"] = str(timestampStartAt * 1000)\r\n            smaxData[i] = article\r\n            i += 1\r\n\r\n        smaxData = json.dumps(smaxData)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"OOExec\"\r\n            errorMessage = str(message) + ': Internal Function - convertJiraToSmaxIncident'\r\n            message = errorMessage\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData,\r\n            \"incidents_externalId_list\": incidents_externalId_list, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# get data about jira instance\r\ndef getJiraAppInstances(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"\"\r\n    jiraData = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n\r\n        turl = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/ServiceComponent?layout=Id,DisplayLabel,ServiceDefId_c&filter=AssetTag%3D'Jira'\"\r\n\r\n        response = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        if response.status_code == 200:\r\n            jiraData = json.dumps(json.loads(response.content))\r\n            result = \"True\"\r\n        else:\r\n            msg = 'Unspported response from Provider: URL - ' + turl + ' :Status Code - ' + str(response.status_code) + ' :Provider response: ' + str(response.text)\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"SMAX\"\r\n            errorMessage = str(message) + ': Internal Function - getJiraAppInstances'\r\n            message = errorMessage\r\n    return {\"result\": result, \"message\": message, \"jiraData\": jiraData, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# get all incidents from jira for \"past_days\"\r\ndef getIncidents(csdHost, csdPort, csdAuthToken, csdService, past_days):\r\n    message = \"\"\r\n    result = \"\"\r\n    incidents = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    # https://${MarketPlace/CSDHost}:${MarketPlace/CSDPort}/api/services?q=${csdService}\r\n    # headers = constant: Authorization: Bearer ${MarketPlace/CSDAuthToken}->Value: Authorization: Bearer ${MarketPlace/CSDAuthToken}\r\n    # https://${MarketPlace/CSDHost}:${MarketPlace/CSDPort}/api/incidents?service_id=${serviceID}&unresolved=true&page=1\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        import time\r\n        authHeaders = {\"Authorization\": \"Bearer \" + csdAuthToken}\r\n        turl = \"https://{0}:{1}/api/services?q={2}\".format(csdHost, csdPort, csdService)\r\n\r\n        #  Check the response code if not success then run again after 10 Seconds for 5 times\r\n        num = 5\r\n        for i in range(num):\r\n            responseSrv = requests.get(turl, headers=authHeaders)\r\n            if responseSrv.status_code == 200:\r\n                break\r\n            else:\r\n                time.sleep(10)\r\n\r\n        if responseSrv.status_code == 200:\r\n            jr = json.loads(responseSrv.content)\r\n            serviceID = \"\"\r\n\r\n            try:\r\n                serviceID = jr[0][\"id\"]\r\n            except:\r\n                serviceID = \"\"\r\n\r\n            # dater = getLastNDays(int(past_days))    ##-- NOt found to be used here\r\n\r\n            if serviceID != \"\":\r\n                turl1 = \"https://{0}:{1}/api/incidents?service_id={2}&unresolved=true&page=1\".format(csdHost, csdPort,\r\n                                                                                                     serviceID)\r\n                responseEvnt = requests.get(turl1, headers=authHeaders)\r\n                if responseEvnt.status_code == 200:\r\n                    incidents = responseEvnt.content\r\n                    result = \"True\"\r\n                else:\r\n                    message = \"Error getting Incidents\"\r\n                    result = \"False\"\r\n            else:\r\n                message = \"Service Not Found: \" + csdService\r\n                result = \"False\"\r\n        else:\r\n            msg = \"Error getting serivecID for csd service:\" + csdService + \" : response status_code - \" + str(\r\n                responseSrv.status_code) + ':URL - ' + turl + \": Text -\" + str(responseSrv.text)\r\n            raise Exception(msg)\r\n            #result = \"Error\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"Error\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"CSD\"\r\n            errorMessage = str(message) + ': Internal Function - getIncidents'\r\n            message = errorMessage\r\n    return {\"result\": result, \"message\": message, \"incidents\": incidents, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# generate start and end time for last N days\r\ndef getLastNDays(N):\r\n    message = \"\"\r\n    result = \"\"\r\n    startDate = \"\"\r\n    endDate = \"\"\r\n\r\n    try:\r\n        from datetime import datetime, timedelta\r\n        d = datetime.now()\r\n        date_N_days_ago = d - timedelta(days=N)\r\n        startDate = datetime.strftime(date_N_days_ago, \"%Y-%m-%d\")\r\n        endDate = datetime.strftime(d, \"%Y-%m-%d\")\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"startDate\": startDate, \"endDate\": endDate}\r\n\r\n\r\n# authenticate in SMAX\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data = {}\r\n        data['Login'] = user\r\n        data['Password'] = password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        # token = response.text\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token}\r\n\r\n\r\n# Content hash function\r\ndef createHash(inputString):\r\n    message = \"\"\r\n    result = \"\"\r\n    hash_object = \"\"\r\n    try:\r\n        import hashlib\r\n        # Assumes the default UTF-8\r\n        hash_object = hashlib.md5(inputString.encode()).hexdigest()\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"hash_object\": hash_object}\r\n\r\n\r\n# search function for articles of certain type\r\ndef FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl, SourceSystem=\"CSD-Incident\"):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    smax_externalIds = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    smaxId_n_externalId_list = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        import time\r\n        current_milli_time = round(time.time() * 1000)\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n        turl = smax_baseurl + \"/rest/\" + tenantId + \"/ems/Article?layout=Id,ExternalId,SourceSystem_c,Title,PhaseId,EffectiveTo&filter=SourceSystem_c%3D'\" + SourceSystem + \"'\"\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n\r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n\r\n            for entity in jdata['entities']:\r\n                smax_ids += entity[\"properties\"][\"Id\"] + \"♪\"\r\n                smax_externalIds += entity[\"properties\"][\"ExternalId\"] + \"♪\"\r\n                smaxId_n_externalId_list += entity[\"properties\"][\"Id\"] + \",\" + entity[\"properties\"][\"ExternalId\"] + \"♪\"\r\n\r\n            # if len(smax_ids) > 0:\r\n            #    smax_ids = smax_ids[:-1]\r\n            #    smax_externalIds = smax_externalIds[:-1]\r\n\r\n            result = \"True\"\r\n        else:\r\n            msg = 'Unspported response from Provider: URL - ' + turl + ' :Status Code - ' + str(response3.status_code) + ' :Provider response: ' + str(response3.text)\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"SMAX\"\r\n            errorMessage = str(message) + ': Internal Function - FindOldArticlesForSourceSystem'\r\n            message = errorMessage\r\n    return {\"result\": result, \"message\": message, \"smax_ids\": smax_ids, \"smax_externalIds\": smax_externalIds,\r\n            \"smaxId_n_externalId_list\": smaxId_n_externalId_list,\r\n            \"errorType\": errorType, \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider,\r\n            \"errorMessage\": errorMessage}\r\n\r\n\r\n# remove all incidents from samx\r\ndef RemoveOldExpiredIncidents(auth_baseurl, user, password, tenantId, smax_baseurl, incidents_externalId_list):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    oldIDs = \"\"\r\n    oldIDs_list = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        foldRes = FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl)\r\n\r\n        if foldRes[\"result\"] == \"True\" and len(foldRes[\"smax_ids\"]) > 0:\r\n\r\n            basicAuthCredentials = (user, password)\r\n            authResp = getAuthCookie(auth_baseurl, user, password)\r\n            if authResp[\"result\"] == \"True\":\r\n                token = authResp[\"smax_auth\"]\r\n\r\n            authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n            smaxId_n_externalId_list = foldRes[\"smaxId_n_externalId_list\"]\r\n\r\n            if smaxId_n_externalId_list:\r\n                for data in smaxId_n_externalId_list.split('♪'):\r\n                    if data:\r\n                        oldId = data.split(',')[0]\r\n                        oldExternalId = data.split(',')[1]\r\n                        if oldExternalId not in incidents_externalId_list:\r\n                            oldIDs_list += oldId + \"♪\"\r\n\r\n                if oldIDs_list:\r\n                    oldIDs = oldIDs_list.split('♪')\r\n                    oldIDs = list(filter(str.strip, oldIDs))  # Remove blank objects from the list\r\n\r\n                    i = 0\r\n                    smaxData = {}\r\n                    smaxData[\"entities\"] = [0] * len(oldIDs)\r\n                    smaxData[\"operation\"] = \"DELETE\"\r\n\r\n                    for id in oldIDs:\r\n                        smaxData[\"entities\"][i] = {}\r\n                        smaxData[\"entities\"][i][\"entity_type\"] = \"Article\"\r\n                        smaxData[\"entities\"][i][\"properties\"] = {}\r\n                        smaxData[\"entities\"][i][\"properties\"][\"Id\"] = id\r\n                        i += 1\r\n\r\n                    response = requests.post(smax_baseurl + \"/rest/\" + tenantId + \"/ems/bulk\", json=smaxData,\r\n                                             auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n\r\n                    if response.status_code == 200:\r\n                        result = \"True\"\r\n                        message = \"OK\"\r\n                    else:\r\n                        result = \"False\"\r\n                        message = response.text\r\n                else:\r\n                    result = \"True\"\r\n                    message = \"No Records to delete\"\r\n            else:\r\n                result = \"True\"\r\n                message = \"No Records to delete\"\r\n        else:\r\n            msg = foldRes[\"message\"]\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"SMAX\"\r\n            errorMessage = str(message) + ': Internal Function - RemoveOldExpiredIncidents'\r\n            message = errorMessage\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# remove expired incidents from samx\r\ndef RemoveExpiredIncidents(smaxData, existingIncidentR, auth_baseurl, user, password, tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    smaxEntities = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        incidentsData = json.load(smaxData)\r\n\r\n        # foldRes = FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl)\r\n\r\n        if existingIncidentR[\"result\"] == \"True\" and len(existingIncidentR[\"smax_ids\"]) > 0:\r\n            targetExternalIds = existingIncidentR[\"smax_externalId\"].split(\"♪\")\r\n            targetSMAXIds = existingIncidentR[\"smax_ids\"].split(\"♪\")\r\n            targetEIds = targetExternalIds\r\n            targetSIds = targetSMAXIds\r\n            i = 0\r\n            for targetId in targetEIds:\r\n\r\n                deleteSid = \"False\"\r\n                for sourceId in incidentsData:\r\n                    if targetId == sourceId[\"properties\"][\"ExternalId\"]:\r\n                        deleteSid = \"True\"\r\n                        break\r\n\r\n                if deleteSid == \"True\":\r\n                    del targetSIds[i]\r\n\r\n                i = i + 1\r\n\r\n            basicAuthCredentials = (user, password)\r\n            authResp = getAuthCookie(auth_baseurl, user, password)\r\n            if authResp[\"result\"] == \"True\":\r\n                token = authResp[\"smax_auth\"]\r\n\r\n            authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n\r\n            # oldIDs = foldRes[\"smax_ids\"].split(\"♪\")\r\n            if len(targetSIds) > 0:\r\n                i = 0\r\n                smaxData = {}\r\n                smaxData[\"entities\"] = [0] * len(targetSIds)\r\n                smaxData[\"operation\"] = \"DELETE\"\r\n\r\n                for id in targetSIds:\r\n                    smaxData[\"entities\"][i] = {}\r\n                    smaxData[\"entities\"][i][\"entity_type\"] = \"Article\"\r\n                    smaxData[\"entities\"][i][\"properties\"] = {}\r\n                    smaxData[\"entities\"][i][\"properties\"][\"Id\"] = id\r\n                    i += 1\r\n\r\n                response = requests.post(smax_baseurl + \"/rest/\" + tenantId + \"/ems/bulk\", json=smaxData,\r\n                                         auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n\r\n                if response.status_code == 200:\r\n                    result = \"True\"\r\n                    message = \"OK\"\r\n                else:\r\n                    result = \"False\"\r\n                    message = response.text\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"Error\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"JIRA\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# insert Knowladge Article in SMAX\r\ndef insertArticles(auth_baseurl, user, password, tenantId, smax_baseurl, datas):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        basicAuthCredentials = (user, password)\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n\r\n        data = json.loads(datas)\r\n        turl = smax_baseurl + \"/rest/\" + tenantId + \"/ems/bulk\"\r\n\r\n        response = requests.post(turl, json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            token = \"Records Created!\"\r\n        else:\r\n            token = \"Issue Creating Records!\"\r\n            msg = 'Unspported response from Provider: URL - ' + turl + ' :Status Code - ' + str(\r\n                response.status_code) + ' :Provider response: ' + str(response.text)\r\n            raise Exception(msg)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"Error\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"SMAX\"\r\n            errorMessage = str(message) + ': Internal Function - insertArticles'\r\n            message = errorMessage\r\n    return {\"result\": result, \"message\": message, \"smax_response\": token, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}"
  outputs:
    - result
    - message
    - jresult
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
