########################################################################################################################
#!!
#! @input post_hrs: Number of  Hours to display EVENTS after they are completed
#!!#
########################################################################################################################
namespace: Cerner.DigitalFactory.MarketPlace.CSD.Operation
operation:
  name: Get_CSD_Events_Upload_to_KM
  inputs:
    - csd_authtoken: "${get_sp('MarketPlace.CSDAuthToken')}"
    - csd_host: "${get_sp('MarketPlace.CSDHost')}"
    - csd_port: "${get_sp('MarketPlace.CSDPort')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - past_days: '90'
    - post_hrs: '48'
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for synchronizing CSD Events and Smax\r\n#   Author: Pawel Bak Micro Focus (pawel.bak@microsoft.com)\r\n#   Inputs:\r\n#       - csd_authtoken\r\n#       - csd_host\r\n#       - csd_port\r\n#       - smax_auth_baseurl\r\n#       - smax_user\r\n#       - smax_password\r\n#       - smax_tenantId\r\n#       - smax_baseurl\r\n#       - smax_service\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - smaxDataC\r\n#       - smaxDataU\r\n#       - RemoveIds\"\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorMessage\r\n#   Modified On: 23 Nov 2021\r\n#   Modified by: Rakesh.Sharma@cerner.com\r\n#   Description: Duplicates Events coming from CSD handled\r\n###############################################################\r\nfrom ctypes import resize\r\nfrom datetime import datetime\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# e30003\r\nclass ExternalLibraryNotPresent(Exception):\r\n    \"\"\"Raised external library not present\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"External library not present: \" + str(message)\r\n        self.errorNumber = \"e30003\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CODE\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20012\r\nclass CsdAPITimeoutError(Exception):\r\n    \"\"\"Raised when CSD API timedout\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"CSD API timedout: \" + str(message)\r\n        self.errorNumber = \"e20012\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e30004\r\nclass CsdAPIFormatIssueError(Exception):\r\n    \"\"\"Raised when CSD API output format issue\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"CSD API output format issue: \" + str(message)\r\n        self.errorNumber = \"e30004\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e10006\r\nclass CsdAPIAuthError(Exception):\r\n    \"\"\"Raised when CSD API authentication issue\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"CSD API authentication issue: \" + str(message)\r\n        self.errorNumber = \"e10006\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e30005\r\nclass CsdAPIEventCodeError(Exception):\r\n    \"\"\"Raised when issue downloading event\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue downloading event: \" + str(message)\r\n        self.errorNumber = \"e30005\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20013\r\nclass CsdAPIEventSystemError(Exception):\r\n    \"\"\"Raised when issue downloading event\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue downloading event: \" + str(message)\r\n        self.errorNumber = \"e20013\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CSD\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20014\r\nclass SmaxAPIGettingOldArticleError(Exception):\r\n    \"\"\"Raised when issue getting old articles from SMAX\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue getting old articles from SMAX: \" + str(message)\r\n        self.errorNumber = \"e20014\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20016\r\nclass SmaxAPIBulkArticleError(Exception):\r\n    \"\"\"Raised when issue executing bulk API from SMAX\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue execting bulk API from SMAX: \" + str(message)\r\n        self.errorNumber = \"e20016\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20002\r\nclass SmaxAPITimeoutError(Exception):\r\n    \"\"\"Raised when SMAX API timedout\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"SMAX API timedout: \" + str(message)\r\n        self.errorNumber = \"e20002\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e10002\r\nclass SmaxAPICredentialsIncorrectError(Exception):\r\n    \"\"\"Raised when SMAX API Credentials Failed\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"SMAX API Credentials Failed: \" + str(message)\r\n        self.errorNumber = \"e10002\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20006\r\nclass IssueDownloadingContentError(Exception):\r\n    \"\"\"Raised when issue downloading content Failed\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue downloading content Failed: \" + str(message)\r\n        self.errorNumber = \"e20006\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# e20008\r\nclass IssueGettingOldArticlesFromSmaxError(Exception):\r\n    \"\"\"Raised when issue getting old articles from Smax Failed\"\"\"\r\n\r\n    def __init__(self, message):\r\n        self.message = \"Issue getting old articles from Smax Failed: \" + str(message)\r\n        self.errorNumber = \"e20008\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n\r\n    def __str__(self) -> str:\r\n        return self.message\r\n\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n\r\n# main function\r\ndef execute(csd_authtoken, csd_host, csd_port, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl,\r\n            past_days, post_hrs):\r\n    message = \"\"\r\n    result = \"\"\r\n    RemoveIds = \"\"\r\n    smaxDataC = {}\r\n    smaxDataU = {}\r\n    allSucessfull = True\r\n    try:\r\n        import json\r\n\r\n        smaxDataC['entities'] = []\r\n        # smaxDataC['entities']['properties'] = {}\r\n        smaxDataC['operation'] = \"CREATE\"\r\n        smaxDataU['entities'] = []\r\n        # smaxDataU['entities']['properties'] = {}\r\n        smaxDataU['operation'] = \"UPDATE\"\r\n        noRemoveIds = \"\"\r\n        noUpdateIDs = \"\"\r\n        errorSeverity = \"\"\r\n        errorType = \"\"\r\n        errorProvider = \"\"\r\n        errorMessage = \"\"\r\n\r\n        # get Jira data\r\n        jirar = getJiraAppInstances(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\r\n        if jirar[\"result\"] == \"True\":\r\n            jiraData = json.loads(jirar[\"jiraData\"])\r\n            for jelem in jiraData[\"entities\"]:\r\n                jira_servID = smax_servID = \"\"\r\n                try:\r\n                    jira_servID = jelem[\"properties\"][\"DisplayLabel\"]\r\n                    smax_servID = jelem[\"properties\"][\"ServiceDefId_c\"]\r\n                except:\r\n                    jira_servID = smax_servID = \"\"\r\n                if jira_servID != \"\" and smax_servID != \"\":\r\n\r\n                    eventsres = getEvents(csd_host, csd_port, csd_authtoken, jira_servID, past_days)\r\n                    if eventsres[\"result\"] == \"True\":\r\n\r\n                        smaxConversion = convertJiraToSmaxEvents(eventsres[\"events\"], jira_servID, smax_servID,\r\n                                                                 smax_auth_baseurl, smax_user, smax_password,\r\n                                                                 smax_tenantId, smax_baseurl, csd_host, past_days,\r\n                                                                 post_hrs)\r\n\r\n                        if smaxConversion[\"result\"] == \"True\" and len(smaxConversion[\"smaxDataC\"]) > 2:\r\n                            # Temporary store in variable to remove duplicates\r\n                            ttsmaxData = {}\r\n                            ttsmaxData['entities'] = []\r\n                            ttsmaxData['entities'] = json.loads(smaxConversion[\"smaxDataC\"])\r\n                            for entity in ttsmaxData['entities']:\r\n                                if smaxDataC['entities']:  # [\"properties\"]:\r\n                                    tt = ''\r\n                                    tt = json.dumps(smaxDataC)  # Assign to temporary string for finding externalID\r\n                                    if not tt.find(entity[\"properties\"][\r\n                                                       \"ExternalId\"]):  # ExternalID not in smaxDataC['entities']:\r\n                                        smaxDataC['entities'] += json.loads(entity)\r\n                                else:\r\n                                    smaxDataC['entities'] += json.loads(smaxConversion[\"smaxDataC\"])\r\n                        if smaxConversion[\"result\"] == \"True\" and len(smaxConversion[\"smaxDataU\"]) > 2:\r\n                            # Temporary store in variable to remove duplicates\r\n                            ttsmaxData = {}\r\n                            ttsmaxData['entities'] = []\r\n                            ttsmaxData['entities'] = json.loads(smaxConversion[\"smaxDataU\"])\r\n                            for entity in ttsmaxData['entities']:\r\n                                if smaxDataU['entities']:  # ['properties']:\r\n                                    tt = ''\r\n                                    tt = json.dumps(smaxDataU)  # Assign to temporary string for finding externalID\r\n                                    if not tt.find(entity[\"properties\"][\r\n                                                       \"ExternalId\"]):  # ExternalID not in smaxDataU['entities']:\r\n                                        smaxDataU['entities'] += entity\r\n                                else:\r\n                                    smaxDataU['entities'] += json.loads(smaxConversion[\"smaxDataU\"])\r\n                        if smaxConversion[\"result\"] == \"True\" and len(smaxConversion[\"updateIDs\"]) > 0:\r\n                            noRemoveIds += smaxConversion[\"updateIDs\"] + \"♪\"\r\n                        if smaxConversion[\"result\"] == \"True\" and len(smaxConversion[\"noUpdateIDs\"]) > 0:\r\n                            noUpdateIDs += smaxConversion[\"noUpdateIDs\"] + \"♪\"\r\n                        result = \"True\"\r\n                    elif eventsres[\"result\"] == \"False200\":\r\n                        allSucessfull = False\r\n                        message += eventsres[\"message\"]\r\n                        break\r\n                    else:\r\n                        message += eventsres[\"message\"] + \" || \"\r\n                        errorType = eventsres[\"errorType\"]\r\n        else:\r\n            result = \"False\"\r\n            message = jirar[\"message\"]\r\n            errorType = jirar[\"errorType\"]\r\n\r\n        if allSucessfull and result == \"True\":\r\n            # remove not needed\r\n            roer = RemoveOldEvents(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl,\r\n                                   noRemoveIds)\r\n            RemoveIds = roer[\"toRemove\"]\r\n            # Create new ones\r\n            if smaxDataC['entities']:\r\n                insertRes1 = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl,\r\n                                            json.dumps(smaxDataC))\r\n            else:\r\n                insertRes1 = {}\r\n                insertRes1[\"message\"] = \"No news to create new records\"\r\n                insertRes1[\"result\"] = 'true'\r\n            # Update Existing ones\r\n            if smaxDataU['entities']:\r\n                insertRes2 = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl,\r\n                                            json.dumps(smaxDataU))\r\n            else:\r\n                insertRes2 = {}\r\n                insertRes2[\"message\"] = \"No news to update the existing records\"\r\n                insertRes2[\"result\"] = 'true'\r\n\r\n            result = str(bool(insertRes1[\"result\"]) and bool(insertRes1[\"result\"]))\r\n            message = insertRes1[\r\n                          \"message\"] + \"------------------------------- UPDATES -------------------------------\" + \\\r\n                      insertRes2[\"message\"]\r\n            if result.lower() != \"true\":\r\n                raise SmaxAPIBulkArticleError(message)\r\n        else:\r\n            message = \"Not All API calls successfull: \\n\" + message\r\n            result = \"False\"\r\n            raise SmaxAPIBulkArticleError(message)\r\n\r\n        smaxDataC = json.dumps(smaxDataC)\r\n        smaxDataU = json.dumps(smaxDataU)\r\n\r\n        dumpString(smaxDataU, \"Main smaxDataU = \")\r\n        dumpString(smaxDataC, \"Main smaxDataC = \")\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"JIRA\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"smaxDataC\": smaxDataC, \"smaxDataU\": smaxDataU,\r\n            \"RemoveIds\": str(RemoveIds), \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef convertJiraToSmaxEvents(events, csdService, serviceId, smax_auth_baseurl, smax_user, smax_password, smax_tenantId,\r\n                            smax_baseurl, csd_host, past_days, post_hrs):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    smaxDataU = \"\"\r\n    smaxDataC = \"\"\r\n    updateIDs = \"\"\r\n    noUpdateIDs = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import json\r\n        import datetime\r\n        from datetime import timedelta\r\n        eventsData = json.loads(events)\r\n        smaxData = [0] * len(eventsData)\r\n        smaxDataU = [{}]\r\n        smaxDataC = [{}]\r\n\r\n        i = 0\r\n        updateC = 0\r\n        createC = 0\r\n\r\n        d = datetime.datetime.now()\r\n        for event in eventsData:\r\n            if event[\"endedAt\"] is None:\r\n                timestampEventEndAt = -1\r\n            else:\r\n                date = datetime.datetime.fromisoformat(processTime(event[\"endedAt\"]))\r\n                timestampEventEndAt = int(date.timestamp())\r\n                # validate if event still is available for display\r\n                ttdate = date + timedelta(hours=int(post_hrs))\r\n                if int(ttdate.timestamp()) < int(d.timestamp()):\r\n                    continue\r\n\r\n            if event[\"displayStartedAt\"] is None:\r\n                timestampStartAt = -1\r\n            else:\r\n                date = datetime.datetime.fromisoformat(processTime(event[\"displayStartedAt\"]))\r\n                timestampStartAt = int(date.timestamp())\r\n\r\n            if event[\"startedAt\"] is None:\r\n                timestampEventStartAt = -1\r\n            else:\r\n                date = datetime.datetime.fromisoformat(processTime(event[\"startedAt\"]))\r\n                timestampEventStartAt = int(date.timestamp())\r\n\r\n            if event[\"endedAt\"] is None:\r\n                timestampEventEndAt = -1\r\n            else:\r\n                date = datetime.datetime.fromisoformat(processTime(event[\"endedAt\"]))\r\n                timestampEventEndAt = int(date.timestamp())\r\n\r\n            # startedAt = datetime.datetime.utcfromtimestamp(timestampStartAt).isoformat()\r\n            if event[\"displayEndedAt\"] is None:\r\n                date = None\r\n            else:\r\n                date = datetime.datetime.fromisoformat(processTime(event[\"displayEndedAt\"]))\r\n\r\n            date_N_days_ago = d - timedelta(days=int(past_days))\r\n\r\n            if (date is None) or ((int(date.timestamp()) >= int(date_N_days_ago.timestamp())) and (\r\n                    timestampEventStartAt <= timestampEventEndAt)):\r\n                if event[\"displayEndedAt\"] is None:\r\n                    timestampEndAt = -1\r\n                else:\r\n                    if timestampStartAt <= int((date + timedelta(days=int(past_days))).timestamp()):\r\n                        timestampEndAt = int((date + timedelta(hours=int(post_hrs))).timestamp())\r\n                    else:\r\n                        timestampEndAt = timestampStartAt + (int(post_hrs) * 3600)\r\n                        # timestampEndAt = timestampStartAt + 86400\r\n\r\n                # endedAt = datetime.datetime.utcfromtimestamp(timestampEndAt).isoformat()\r\n\r\n                article = {}\r\n                article[\"entity_type\"] = \"Article\"\r\n                article[\"properties\"] = {}\r\n                article[\"properties\"][\"Title\"] = \"Event: {0}\".format(event[\"name\"])\r\n                article[\"properties\"][\"ExternalId\"] = \"{0}\".format(event[\"id\"])\r\n                article[\"properties\"][\r\n                    \"Content\"] = \"<p>Service Impacted: {0} </p> <p>Description: {1} </p> <p> Follow the link for details: <a href=\\\"https://{2}/events/{3}\\\">here</a><br><br>\".format(\r\n                    csdService, event[\"description\"], csd_host, event[\"id\"], )\r\n                article[\"properties\"][\r\n                    \"Description\"] = \"<p>Service Impacted: {0} </p> <p>Description: {1} </p> <p> Follow the link for details: <a href=\\\"https://{2}/events/{3}\\\">here</a><br><br>\".format(\r\n                    csdService, event[\"description\"], csd_host, event[\"id\"], )\r\n                article[\"properties\"][\"Service\"] = serviceId\r\n                article[\"properties\"][\"Priority\"] = \"Normal\"\r\n                article[\"properties\"][\"Subtype\"] = \"News\"\r\n                article[\"properties\"][\"PhaseId\"] = \"External\"\r\n                article[\"properties\"][\"SourceSystem_c\"] = \"CSD-Event\"\r\n                if timestampStartAt > -1:\r\n                    article[\"properties\"][\"DisplayStart\"] = str(timestampStartAt * 1000)\r\n                if timestampEndAt > -1:\r\n                    article[\"properties\"][\"DisplayNewsEnd\"] = str(timestampEndAt * 1000)\r\n                if timestampEventStartAt > -1:\r\n                    article[\"properties\"][\"EffectiveFrom\"] = str(timestampEventStartAt * 1000)\r\n                if timestampEventEndAt > -1:\r\n                    article[\"properties\"][\"EffectiveTo\"] = str(timestampEventEndAt * 1000)\r\n\r\n                oldid = FindOldArticlesForEId(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl,\r\n                                              article[\"properties\"][\"ExternalId\"])\r\n\r\n                if oldid[\"result\"] == \"True\" and oldid[\"firstID\"] != \"\":\r\n                    article[\"properties\"][\"Id\"] = oldid[\"firstID\"]\r\n                    article[\"properties\"][\"CSDArticleHash_c\"] = oldid[\"firstHash\"]\r\n                    updateIDs += article[\"properties\"][\"Id\"] + \"♪\"\r\n                    if hashChanged(article):\r\n                        updateC += 1\r\n                else:\r\n                    createC += 1\r\n\r\n                smaxData[i] = article\r\n                i += 1\r\n\r\n        smaxDataU = [0] * updateC\r\n        smaxDataC = [0] * createC\r\n        updateC = 0\r\n        createC = 0\r\n\r\n        for event in smaxData:\r\n            if type(event) != int:\r\n                try:\r\n                    id = event[\"properties\"][\"Id\"]\r\n                    if hashChanged(event):\r\n                        event[\"properties\"][\"CSDArticleHash_c\"] = newHash(event)\r\n                        smaxDataU[updateC] = event\r\n                        updateC += 1\r\n                    else:\r\n                        noUpdateIDs += id + \"♪\"\r\n                except:\r\n                    event[\"properties\"][\"CSDArticleHash_c\"] = newHash(event)\r\n                    smaxDataC[createC] = event\r\n                    createC += 1\r\n\r\n        if len(updateIDs) > 0:\r\n            updateIDs = updateIDs[:-1]\r\n        if len(noUpdateIDs) > 0:\r\n            noUpdateIDs = noUpdateIDs[:-1]\r\n\r\n        smaxDataU = json.dumps(smaxDataU)\r\n        smaxDataC = json.dumps(smaxDataC)\r\n        dumpString(smaxDataU, \"smaxDataU = \")\r\n        dumpString(smaxDataC, \"smaxDataC = \")\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"SMAX\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"smaxDataC\": smaxDataC, \"smaxDataU\": smaxDataU,\r\n            \"updateIDs\": updateIDs, \"noUpdateIDs\": noUpdateIDs, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef processTime(timeStr):\r\n    # zind = -1\r\n    # try:\r\n    #    zind = timeStr.upper().index(\"Z\")\r\n    # except:\r\n    #    zind = -1\r\n    # if zind > -1:\r\n    return timeStr.replace(\".000Z\", \".000+00:00\")\r\n    # else:\r\n    #    return timeStr\r\n\r\n\r\ndef hashChanged(event):\r\n    try:\r\n        hash = newHash(event)\r\n        return str(event[\"properties\"][\"CSDArticleHash_c\"]) != str(hash)\r\n    except:\r\n        return True\r\n\r\n\r\ndef newHash(event):\r\n    # return createHash(event[\"properties\"][\"Content\"] + event[\"properties\"][\"DisplayStart\"] + event[\"properties\"][\"DisplayNewsEnd\"])[\"hash_object\"]\r\n    return createHash(event[\"properties\"][\"Content\"])[\"hash_object\"]\r\n\r\n\r\ndef getJiraAppInstances(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"\"\r\n    jiraData = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        else:\r\n            message = authResp[\"message\"]\r\n            raise SmaxAPICredentialsIncorrectError(message)\r\n\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n\r\n        turl = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/ServiceComponent?layout=Id,DisplayLabel,ServiceDefId_c&filter=AssetTag%3D'Jira'\"\r\n\r\n        response = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        if response.status_code == 200:\r\n            jiraData = json.dumps(json.loads(response.content))\r\n            result = \"True\"\r\n        else:\r\n            message = \"Failed to download Jira: \" + str(response.status_code) + \": \" + token\r\n            result = \"False\"\r\n            raise SmaxAPIGettingOldArticleError(message)\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"JIRA\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"jiraData\": jiraData, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef getEvents(csdHost, csdPort, csdAuthToken, csdService, past_days):\r\n    message = \"\"\r\n    result = \"\"\r\n    events = \"\"\r\n    serviceID = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    # https://${MarketPlace/CSDHost}:${MarketPlace/CSDPort}/api/services?q=${csdService}\r\n    # headers = constant: Authorization: Bearer ${MarketPlace/CSDAuthToken}->Value: Authorization: Bearer ${MarketPlace/CSDAuthToken}\r\n    # https://${MarketPlace/CSDHost}:${MarketPlace/CSDPort}/api/events?service_id=${serviceID}&display_started_at=2021-06-10T00:00:00.000Z&display_ended_at=2021-07-10T00:00:00.000Z\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        import time\r\n        authHeaders = {\"Authorization\": \"Bearer \" + csdAuthToken}\r\n        turl = \"https://{0}:{1}/api/services?q={2}\".format(csdHost, csdPort, csdService)\r\n        dumpString(\"################################################################################\\n###   \" + turl)\r\n        #  Check the response code if not success then run again after 10 Seconds for 5 times\r\n        num = 5\r\n        for i in range(num):\r\n            responseSrv = requests.get(turl, headers=authHeaders)\r\n            if responseSrv.status_code == 200:\r\n                break\r\n            else:\r\n                time.sleep(10)\r\n\r\n        if responseSrv.status_code == 200:\r\n            jr = json.loads(responseSrv.content)\r\n            dumpString(responseSrv.text, \"getEvents =\")\r\n            try:\r\n                serviceID = jr[0][\"id\"]\r\n            except:\r\n                serviceID = \"\"\r\n            pastN = int(past_days)\r\n            futureN = int(past_days)\r\n            dater = getLastNDays(pastN, futureN)\r\n\r\n            if serviceID != \"\":\r\n                turl1 = \"https://{0}:{1}/api/events?service_id={2}&display_started_at={3}T00:00:00.000Z&display_ended_at={4}T00:00:00.000Z\".format(\r\n                    csdHost, csdPort, serviceID, dater[\"startDate\"], dater[\"endDate\"])\r\n                dumpString(turl1)\r\n                for i in range(num):\r\n                    responseEvnt = requests.get(turl1, headers=authHeaders)\r\n                    if responseEvnt.status_code == 200:\r\n                        break\r\n                    else:\r\n                        time.sleep(10)\r\n\r\n                if responseEvnt.status_code == 200:\r\n\r\n                    dumpString(json.loads(responseEvnt.text), \"getEvents =\")\r\n                    events = responseEvnt.text\r\n                    result = \"True\"\r\n                else:\r\n                    message = \"Error getting Events\"\r\n                    result = \"False200\"\r\n            else:\r\n                message = \"Service Not Found: \" + csdService + \" : service ID: \" + str(serviceID)\r\n                result = \"False\"\r\n        elif responseSrv.status_code == 401:\r\n            raise CsdAPIAuthError(\"ERROR 401\")\r\n        elif responseSrv.status_code == 400 or responseSrv.status_code == 500:\r\n            raise CsdAPIEventCodeError(\"ERROR \" + str(responseSrv.status_code))\r\n        else:\r\n            message = \"Error getting serivecID\"\r\n            result = \"False200\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"JIRA\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"events\": events, \"serviceID\": serviceID, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef getLastNDays(pastN=365, futureN=3650):\r\n    message = \"\"\r\n    result = \"\"\r\n    startDate = \"\"\r\n    endDate = \"\"\r\n\r\n    try:\r\n        from datetime import datetime, timedelta\r\n        d = datetime.now()\r\n        date_N_days_ago = d - timedelta(days=pastN)\r\n        startDate = datetime.strftime(date_N_days_ago, \"%Y-%m-%d\")\r\n        endDate = datetime.strftime(d + timedelta(days=futureN), \"%Y-%m-%d\")\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"startDate\": startDate, \"endDate\": endDate}\r\n\r\n\r\n# authenticate in SMAX\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    asciitoken = \"\"\r\n    try:\r\n        import requests\r\n        import binascii\r\n        basicAuthCredentials = (user, password)\r\n        data = {}\r\n        data['Login'] = user\r\n        data['Password'] = password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n\r\n        asciidata = token.encode('utf-8').decode('ascii')\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": str(message), \"smax_auth\": token}\r\n\r\n\r\n# Content hash function\r\ndef createHash(inputString):\r\n    message = \"\"\r\n    result = \"\"\r\n    hash_object = \"\"\r\n    try:\r\n        import hashlib\r\n        # Assumes the default UTF-8\r\n        hash_object = hashlib.md5(inputString.encode()).hexdigest()\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"hash_object\": hash_object}\r\n\r\n\r\n# search function for Confluence\r\ndef FindOldArticlesForEId(auth_baseurl, user, password, tenantId, smax_baseurl, ExternalID):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    smax_hids = \"\"\r\n    firstID = \"\"\r\n    firstHash = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n        turl = smax_baseurl + \"/rest/\" + tenantId + \"/ems/Article?layout=Id,SourceSystem_c,Title,CSDArticleHash_c,PhaseId&filter=ExternalId%3D'\" + ExternalID + \"'\"\r\n        dumpString(\"FindOldArticlesForEId = \" + turl)\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n\r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n            dumpString(str(response3.content), \"FindOldArticlesForEId = \")\r\n            for entity in jdata['entities']:\r\n                smax_ids += entity[\"properties\"][\"Id\"] + \"♪\"\r\n                hash = \"\"\r\n                try:\r\n                    hash = entity[\"properties\"][\"CSDArticleHash_c\"]\r\n                except:\r\n                    hash = \"\"\r\n                smax_hids += entity[\"properties\"][\"Id\"] + \"♫\" + hash + \"♪\"\r\n\r\n            if len(smax_ids) > 0:\r\n                firstID = smax_hids.split(\"♪\")[0].split(\"♫\")[0]\r\n                firstHash = smax_hids.split(\"♪\")[0].split(\"♫\")[1]\r\n                smax_ids = smax_ids[:-1]\r\n\r\n            result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_ids\": smax_ids, \"firstID\": firstID, \"firstHash\": firstHash}\r\n\r\n\r\n# search function for Confluence\r\ndef FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl, SourceSystem=\"CSD-Event\",\r\n                                   ExcludeIDs=\"\"):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n        turl = smax_baseurl + \"/rest/\" + tenantId + \"/ems/Article?layout=Id,SourceSystem_c,Title,PhaseId,ExternalId&filter=SourceSystem_c%3D'\" + SourceSystem + \"'\"\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        dumpString(\"FindOldArticlesForSourceSystem = \" + turl)\r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n            dumpString(str(response3.text), \"FindOldArticlesForSourceSystem = \")\r\n            for entity in jdata['entities']:\r\n                nexclued = True\r\n                try:\r\n                    eids = ExcludeIDs.split(\"♪\")\r\n                    ind = eids.index(entity[\"properties\"][\"Id\"])\r\n                    nexclued = False\r\n                except:\r\n                    nexclued = True\r\n\r\n                if nexclued:\r\n                    smax_ids += entity[\"properties\"][\"Id\"] + \"♪\"\r\n\r\n            if len(smax_ids) > 0:\r\n                smax_ids = smax_ids[:-1]\r\n            result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_ids\": smax_ids}\r\n\r\n\r\ndef RemoveOldEvents(auth_baseurl, user, password, tenantId, smax_baseurl, ExcludeIDs):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    toRemove = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        foldRes = FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl,\r\n                                                 ExcludeIDs=ExcludeIDs)\r\n\r\n        if foldRes[\"result\"] == \"True\" and len(foldRes[\"smax_ids\"]) > 0:\r\n\r\n            basicAuthCredentials = (user, password)\r\n            authResp = getAuthCookie(auth_baseurl, user, password)\r\n            if authResp[\"result\"] == \"True\":\r\n                token = authResp[\"smax_auth\"]\r\n            else:\r\n                raise SmaxAPICredentialsIncorrectError(authResp[\"message\"])\r\n\r\n            authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n            toRemove = foldRes[\"smax_ids\"]\r\n            oldIDs = foldRes[\"smax_ids\"].split(\"♪\")\r\n\r\n            i = 0\r\n            smaxData = {}\r\n            smaxData[\"entities\"] = [0] * len(oldIDs)\r\n            smaxData[\"operation\"] = \"DELETE\"\r\n\r\n            for id in oldIDs:\r\n                smaxData[\"entities\"][i] = {}\r\n                smaxData[\"entities\"][i][\"entity_type\"] = \"Article\"\r\n                smaxData[\"entities\"][i][\"properties\"] = {}\r\n                smaxData[\"entities\"][i][\"properties\"][\"Id\"] = id\r\n                i += 1\r\n\r\n            dumpString(str(smaxData), \"FindOldArticlesForSourceSystem = \")\r\n            response = requests.post(smax_baseurl + \"/rest/\" + tenantId + \"/ems/bulk\", json=smaxData,\r\n                                     auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n\r\n            if response.status_code == 200:\r\n                result = \"True\"\r\n                message = \"OK\"\r\n            else:\r\n                result = \"False\"\r\n                message = response.text\r\n                raise SmaxAPIBulkArticleError(message)\r\n        else:\r\n            raise SmaxAPIGettingOldArticleError(foldRes[\"message\"])\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"SMAX\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"toRemove\": toRemove, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# insert or update Knowladge Article in SMAX\r\ndef insertArticles(auth_baseurl, user, password, tenantId, smax_baseurl, datas):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        # dumpString(datas)\r\n        basicAuthCredentials = (user, password)\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        else:\r\n            raise SmaxAPICredentialsIncorrectError(authResp[\"message\"])\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n\r\n        data = json.loads(datas)\r\n\r\n        response = requests.post(smax_baseurl + \"/rest/\" + tenantId + \"/ems/bulk\", json=data, auth=basicAuthCredentials,\r\n                                 headers=authHeaders, cookies=cookies)\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            token = \"Records Created!\"\r\n        else:\r\n            token = \"Issue Creating Records!\"\r\n            raise SmaxAPIBulkArticleError(token)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\"\r\n            errorType = \"e20000\"\r\n            errorProvider = \"JIRA\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"smax_response\": token, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef dumpString(str1, desc=\"\"):\r\n    try:\r\n        if 'debug' in globals():\r\n            f = open(\"c:\\\\temp\\\\test1.txt\", \"a\")\r\n            date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\r\n            f.write(date + \" -> \" + desc + str(str1) + \"\\n\")\r\n            f.close()\r\n    except Exception as e:\r\n        message = e"
  outputs:
    - result
    - message
    - jresult
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
