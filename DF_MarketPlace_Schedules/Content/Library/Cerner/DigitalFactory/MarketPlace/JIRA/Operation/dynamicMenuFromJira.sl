namespace: Cerner.DigitalFactory.MarketPlace.JIRA.Operation
operation:
  name: dynamicMenuFromJira
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - projectName
    - lastUpdate: "${get_sp('MarketPlace.lastUpdateTime')}"
    - fieldName
    - issueType
  python_action:
    use_jython: false
    script: "#  This Operation is for reading the allowed values from the Jira Customfield and then updating them into Marketplace Entities for Dyanmci drop Down Options\r\n#-  Operation: dynamicMenuFromJira\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorMessage\r\n#       - errorProvider\r\n#       - errorSeverity\r\n#       - return_json\r\n#       - newUpdateTime\r\n# this operation will fetch allowed values from JIRA for custom field\r\n# createdDate :- 18/Jan/2022\r\n# modifiedDate :- 15/Feb/2022\r\n# Modified on 08 Sep 2022 by Rakesh Sharma to exclude the disabled values from Jira customfiled Allowed values for updation in Marketplace Drop down options.\r\n###############################################################\r\n\r\nimport sys, os\r\nimport subprocess\r\nimport time\r\nimport datetime\r\nimport requests\r\nimport http.client\r\nfrom datetime import datetime\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n# this function will fetch all the allowed values for a particular field type array\r\ndef execute(MarketPlace_jiraIssueURL,MarketPlace_jiraUser,MarketPlace_jiraPassword,fieldName,projectName,issueType):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    id_list = \"\"\r\n    return_json = \"\"\r\n    allowedValues = 'allowedValues'\r\n    arr = {}\r\n\r\n    # requirement external modules\r\n    install(\"requests\")\r\n    install(\"time\")\r\n    install(\"pytz\")\r\n    install(\"markdown\")\r\n\r\n    # Get current new update time in CST timezone ('US/Central') as Jira is returns time in this TZ\r\n    from datetime import datetime\r\n    from pytz import timezone\r\n    fmt = \"%Y-%m-%d %H:%M\"  # Format of time\r\n    # Current time in CST - 'US/Central'\r\n    now_cst = datetime.now(timezone('US/Central'))\r\n    newUpdateTime = now_cst.strftime(fmt)\r\n\r\n    basicAuthCredentials = (MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n    authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        url = \"{0}rest/api/2/issue/createmeta?projectKeys={1}&issuetypeNames={2}&expand=projects.issuetypes.fields\".format(MarketPlace_jiraIssueURL,projectName,issueType)\r\n        response = requests.get(url, auth=basicAuthCredentials, headers=authHeaders)\r\n\r\n        if response.status_code == 200:\r\n            content = json.loads(response.content)\r\n            arr = content['projects'][0]['issuetypes'][0]['fields']\r\n            for x, y in arr.items():\r\n                if x == fieldName:\r\n                    for x1, y1 in y.items():\r\n                        if x1 == allowedValues:\r\n                            for item in y1:\r\n                                if item[\"disabled\"] == False:\r\n                                    id_gp = item[\"id\"]\r\n                                    title = item[\"value\"]\r\n                                    ttdesc = item[\"value\"]\r\n                                    update_date = \"\"\r\n                                    id_list += str(id_gp) + ','\r\n                                    return_json += '{ \"id\":\"' + str(\r\n                                        id_gp) + '\",\"title\":\"' + title + '\",\"description\":\"' + str(\r\n                                        ttdesc) + '\",\"update_date\":\"' + str(update_date) + '\"},'\r\n\r\n                            id_list = id_list[:-1]\r\n                            return_json = return_json[:-1]\r\n                            return_json = '[' + return_json + ']'\r\n                            result = \"True\"\r\n                            message = 'Successfully retrieved and converted to json  object'\r\n            if return_json == \"\":\r\n                message = \"Please verify the field :- \" +fieldName\r\n                result = \"False\"\r\n        else:\r\n            message = \"Unsupported response from the Provider\" \":\" + str(response.content)\r\n            result = \"False\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n\r\n    if result == \"False\":\r\n        message = message\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n\r\n    return {\"result\": result, \"message\": message,\"return_json\":return_json,\"id_list\":id_list,\"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}"
  outputs:
    - result
    - message
    - newUpdateTime
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - id_list
    - return_json
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
