namespace: Cerner.DigitalFactory.MarketPlace.JIRA.Operation
operation:
  name: JiraArtifactorySync
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Jira and Smax\r\n#   Author: Pawel Bak Micro Focus (pawel.bak@microsoft.com)\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  project\r\n#       -  issueTypeName\r\n#       -  fieldNameFilter\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorMessage\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n#e20041\r\nclass SmaxAPIBulkArticleError(Exception): \r\n    \"\"\"Raised when issue executing bulk API from SMAX\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"Issue execting bulk API from SMAX: \" + str(message)\r\n        self.errorNumber = \"e20041\"\r\n        self.errorSeverity = \"ERROR\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n#e20040\r\nclass SmaxAPIConfigError(Exception): \r\n    \"\"\"Raised when issue executing bulk API from SMAX\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"Issue execting configuratio API from SMAX: \" + str(message)\r\n        self.errorNumber = \"e20040\"\r\n        self.errorSeverity = \"ERROR\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n#e20042\r\nclass JiraAPIError(Exception): \r\n    \"\"\"Raised when issue executing API from Jira\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"Issue executing API from Jira: \" + str(message)\r\n        self.errorNumber = \"e20042\"\r\n        self.errorSeverity = \"ERROR\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n\r\n# function do download external modules to python \"on-the-fly\" \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n#main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorClass = \"\"\r\n    smaxDataU={}\r\n    confOK = False\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import json\r\n\r\n        projectValRes = getConfEntry(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, \"artifactoryJiraProject\")\r\n        issueTypeNameValRes = getConfEntry(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, \"artifactoryJiraIssueTypeName\")\r\n        fieldNameFilterValRes = getConfEntry(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, \"artifactoryJiraFieldNameFilter\")\r\n        #setConfEntry(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, \"test\", \"test1235\")\r\n\r\n        if projectValRes[\"result\"] == issueTypeNameValRes[\"result\"] == fieldNameFilterValRes[\"result\"] == \"True\":\r\n            project = projectValRes[\"value\"] \r\n            issueTypeName = issueTypeNameValRes[\"value\"] \r\n            fieldNameFilter = fieldNameFilterValRes[\"value\"] \r\n            \r\n            statusJiraResult = extractJiraData(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, project, issueTypeName, fieldNameFilter)\r\n            if statusJiraResult[\"result\"] == \"True\":\r\n                jiraIssueTypes = statusJiraResult[\"jiraIssueTypes\"]\r\n                oldDataResult = FindOldJiraData(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\r\n                filterResult = filterExitingData(jiraIssueTypes, oldDataResult[\"smax_ids\"])\r\n                updateResult = updateSMAXRequestStatusBulk(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, jiraIssueTypes, filterResult[\"exitingBeforElement\"])\r\n                insertResult = insertSMAXRequestStatusBulk(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, jiraIssueTypes, filterResult[\"newElements\"])\r\n                deleteResult = deleteSMAXRequestStatusBulk(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, filterResult[\"oldNotInNew\"])\r\n                if updateResult[\"result\"] == \"True\" and len(updateResult[\"smaxData\"]) > 2:\r\n                    data = json.loads(updateResult[\"smaxData\"])\r\n                    smaxDataU = data\r\n                    insertRes = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, smaxDataU)\r\n                    message += insertRes[\"message\"] + \"||\"\r\n                if insertResult[\"result\"] == \"True\" and len(insertResult[\"smaxData\"]) > 2:\r\n                    data = json.loads(insertResult[\"smaxData\"])\r\n                    smaxDataU = data\r\n                    insertRes = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, smaxDataU)\r\n                    message += insertRes[\"message\"] + \"||\"\r\n                if deleteResult[\"result\"] == \"True\" and len(deleteResult[\"smaxData\"]) > 2:\r\n                    data = json.loads(deleteResult[\"smaxData\"])\r\n                    smaxDataU = data\r\n                    insertRes = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, smaxDataU)\r\n                    message += insertRes[\"message\"] + \"||\"\r\n            else:\r\n                message = \"Was not able to connect to Jira\"\r\n                result = \"False\"\r\n                raise JiraAPIError(statusJiraResult[\"message\"])\r\n            result = \"True\"\r\n        else:\r\n            message = \"Was not able to connect to Read configuration\"\r\n            result = \"False\"\r\n            raise SmaxAPIConfigError(projectValRes[\"message\"] + \" \" + issueTypeNameValRes[\"message\"] + \" \" + fieldNameFilterValRes[\"message\"])\r\n\r\n    except Exception as e:\r\n        message = str(e)       \r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\" \r\n            errorType = \"e20000\"\r\n            errorProvider = \"JIRA\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\ndef getJiraRequestsForStatusUpdate(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"False\"\r\n    entityJsonArray = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        \r\n        turl = \"{0}/rest/{1}/ems/Request?layout=Id,JiraIssueId_c&filter=RequestJiraIssueStatus_c%3D'Yes'\".format(smax_baseurl, smax_tenantId)\r\n        \r\n        response = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        if response.status_code == 200:\r\n            entityJsonArray = json.dumps(json.loads(response.content))\r\n            result = \"True\"\r\n        else:\r\n            message = \"Issue getting jira data\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"entityJsonArray\": entityJsonArray}\r\n\r\n#search function for articles of certain type\r\ndef FindOldJiraData(auth_baseurl, user, password, tenantId, smax_baseurl, page=1000, currentR = 0 ):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    jiraProjects = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        turl = \"{0}/rest/{1}/ems/ArtifactoryServices_c?layout=Id,DisplayLabel,ExternalAsset_c,InstanceId_c,JiraIssueType_c,JiraProject_c,JiraTool_c&skip={2}&size={3}\".format(smax_baseurl, tenantId, currentR, page)\r\n        #turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/JiraProject_c?layout=Id,DisplayLabel&skip=\" + str(currentR) + \"&size=\" + str(page)\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        \r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n            \r\n            #dumpString(response3.text)\r\n\r\n            for entity in jdata['entities']:\r\n                smax_ids += entity[\"properties\"][\"Id\"] + \"♫\" + entity[\"properties\"][\"DisplayLabel\"] + \"♫\" + entity[\"properties\"][\"ExternalAsset_c\"] + \"♫\" + entity[\"properties\"][\"InstanceId_c\"] + \"♪\"\r\n                jiraProjects += entity[\"properties\"][\"DisplayLabel\"] + \"♪\"\r\n            \r\n            total_count = int(jdata[\"meta\"][\"total_count\"])\r\n            \r\n            if (currentR == 0) and ((currentR + page) < total_count):\r\n                while ((currentR + page) < total_count):\r\n                    currentR += page\r\n                    nextPRes = FindOldJiraData(auth_baseurl, user, password, tenantId, smax_baseurl, page, currentR)\r\n                    smax_ids += \"♪\" + nextPRes[\"smax_ids\"]\r\n                    jiraProjects += \"♪\" + nextPRes[\"jiraProjects\"]\r\n                smax_ids += \"♪\" \r\n                jiraProjects += \"♪\"\r\n            result = \"True\"\r\n\r\n\r\n\r\n\r\n        if len(smax_ids) > 0:\r\n            smax_ids = smax_ids[:-1]\r\n            jiraProjects = jiraProjects[:-1]\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_ids\":smax_ids, \"jiraProjects\":jiraProjects }\r\n\r\n#search function for articles of certain type\r\ndef getConfEntry(auth_baseurl, user, password, tenantId, smax_baseurl, confValName ):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    value = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        turl = \"{0}/rest/{1}/ems/SystemProperties_c?layout=Id,DisplayLabel,Description_c,SysPropertyValue_c&filter=DisplayLabel%3D'{2}'\".format(smax_baseurl, tenantId, confValName)\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        \r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n            value = jdata[\"entities\"][0][\"properties\"][\"SysPropertyValue_c\"]\r\n            result = \"True\"\r\n        else:\r\n            message = \"Value not found!\"\r\n            result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"value\":value }\r\n\r\n#search function for articles of certain type\r\ndef getConfEntry(auth_baseurl, user, password, tenantId, smax_baseurl, confValName ):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    value = \"\"\r\n    smax_id = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        turl = \"{0}/rest/{1}/ems/SystemProperties_c?layout=Id,DisplayLabel,Description_c,SysPropertyValue_c&filter=DisplayLabel%3D'{2}'\".format(smax_baseurl, tenantId, confValName)\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        \r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n            try:\r\n                value = jdata[\"entities\"][0][\"properties\"][\"SysPropertyValue_c\"]\r\n                smax_id = jdata[\"entities\"][0][\"properties\"][\"Id\"]\r\n                result = \"True\"\r\n            except Exception as e:\r\n                message = \"Value not found!\"\r\n                result = \"False\"\r\n        else:\r\n            message = \"Value not found!\"\r\n            result = \"False\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"value\":value, \"smax_id\":smax_id }\r\n\r\n#search function for articles of certain type\r\ndef setConfEntry(auth_baseurl, user, password, tenantId, smax_baseurl, confValName, confValue ):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    value = \"\"\r\n    smax_id = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        \r\n        oldValRes = getConfEntry(auth_baseurl, user, password, tenantId, smax_baseurl, confValName )\r\n        smaxDataU={}\r\n        smaxDataU['entities'] = [0]*1        \r\n        smaxDataU['entities'][0] = {}\r\n        smaxDataU['entities'][0][\"entity_type\"] = \"SystemProperties_c\"\r\n        smaxDataU['entities'][0][\"properties\"] = {}\r\n        smaxDataU['entities'][0][\"properties\"][\"SysPropertyValue_c\"] = confValue\r\n        \r\n\r\n        if oldValRes[\"result\"] == \"True\":\r\n            smaxDataU['operation'] = \"UPDATE\"\r\n            smaxDataU['entities'][0][\"properties\"][\"Id\"] = oldValRes[\"smax_id\"]\r\n        else:\r\n            smaxDataU['operation'] = \"CREATE\"\r\n            smaxDataU['entities'][0][\"properties\"][\"DisplayLabel\"] = confValName\r\n            smaxDataU['entities'][0][\"properties\"][\"SysPropertyFamily_c\"] = \"MarketPlace\"\r\n\r\n        insertRes = insertArticles(auth_baseurl, user, password, tenantId, smax_baseurl, smaxDataU)        \r\n        result = insertRes[\"result\"]\r\n        message = insertRes[\"message\"]\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"value\":value, \"smax_id\":smax_id }\r\n\r\ndef extractJiraData(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, projectN, issueTypeName, fieldNameFilter):\r\n    message = \"\"\r\n    result = \"False\"\r\n    jiraIssueTypes = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n         \r\n        turl = '{0}rest/api/2/issue/createmeta?projectKeys={1}&issuetypeNames={2}&expand=projects.issuetypes.fields'.format(MarketPlace_jiraIssueURL,projectN,issueTypeName)\r\n        asicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser,MarketPlace_jiraPassword)\r\n        headers = { 'X-Atlassian-Token': 'no-check'}\r\n\r\n        response = requests.get(turl, auth=asicAuthCredentials, headers=headers)\r\n\r\n        if response.status_code == 200:\r\n            entityJsonArray = json.loads(response.content)\r\n            try:\r\n                project = entityJsonArray[\"projects\"][0]\r\n                for issuetypes in project[\"issuetypes\"]:\r\n                    fields = issuetypes[\"fields\"]\r\n                    #fields1 = json.dumps(fields)\r\n                    #fields = json.loads(fields1)\r\n                    for issue in fields:\r\n                        try:\r\n                            issuet = fields[issue]\r\n                            if issuet[\"name\"].lower().find(fieldNameFilter.lower())>-1:\r\n                                jiraIssueTypes += issuet[\"name\"] + \"♀\"+ issuet[\"fieldId\"] +\"♀\" \r\n                                for val in issuet[\"allowedValues\"]:\r\n                                    jiraIssueTypes += val[\"self\"] + \"♫\" +  val[\"value\"] + \"♫\" + val[\"id\"] + \"♫\" + str(val[\"disabled\"]) + \"♫\" + projectN + \"♫\" + issueTypeName + \"♫\" + entityJsonArray[\"projects\"][0][\"name\"] + \"♪\"\r\n                                if len(jiraIssueTypes) > 0:\r\n                                    jiraIssueTypes = jiraIssueTypes[:-1]\r\n                                jiraIssueTypes += \"►\"\r\n                        except Exception as e:\r\n                            message = e\r\n                    #jiraIssueStatus += entity[\"id\"] + \"♫\" + entity[\"fields\"][\"status\"][\"name\"] + \"♪\" \r\n            except Exception as e:\r\n               message = \"Issue getting jira data \" + str(e)\r\n        else:\r\n            message = \"Issue getting jira data\"\r\n        \r\n        if len(jiraIssueTypes) > 0:\r\n            jiraIssueTypes = jiraIssueTypes[:-1]\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"jiraIssueTypes\": jiraIssueTypes}\r\n\r\ndef convertArrayIdsToString(ids):\r\n    ret = \"\"\r\n    idsSplit = ids.split(\"♪\")\r\n    if len(idsSplit) == 0:\r\n        ret = \"()\"\r\n    else:\r\n        ret = \"(\"\r\n        for id in idsSplit:\r\n            ret += id + \",\"\r\n        ret = ret[:-1]\r\n        ret += \")\"\r\n    return ret\r\n\r\ndef updateSMAXRequestStatus(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, jiraIssueStatus, inputJSON):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        \r\n        #'{\"entity_type\": \"Request\", \"properties\": { \"Id\": \"'+smaxRequestID+'\",  \"JiraIssueStatus_c\": \"'+jiraIssueStatus+'\"}, \"related_properties\" : { }  }'\r\n\r\n        smaxRequestID = inputJSON[\"properties\"][\"Id\"]\r\n        \r\n        data = {}\r\n        data[\"entity_type\"] = \"Request\"\r\n        data[\"properties\"] = {}\r\n        data[\"properties\"][\"Id\"] = smaxRequestID\r\n        data[\"properties\"][\"JiraIssueStatus_c\"] = jiraIssueStatus\r\n\r\n        smaxData = json.dumps(data)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData }\r\n\r\ndef updateSMAXRequestStatusBulk(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, jiraIssueStatus, elemIDs):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        smaxDataU={}\r\n        smaxDataU['entities'] = []        \r\n        smaxDataU['operation'] = \"UPDATE\"\r\n        \r\n        #'{\"entity_type\": \"Request\", \"properties\": { \"Id\": \"'+smaxRequestID+'\",  \"JiraIssueStatus_c\": \"'+jiraIssueStatus+'\"}, \"related_properties\" : { }  }'\r\n        if len(elemIDs) > 0 and len(jiraIssueStatus) > 0 and len(jiraIssueStatus.split(\"♀\")) > 0:          \r\n            smaxDataU['entities'] = [0]*len(elemIDs.split(\"♪\"))\r\n            i = 0\r\n            for entity in elemIDs.split(\"♪\"):\r\n                jiraID = entity.split(\"♫\")[1]\r\n                jpropertyResult = findDataInDataStructure(jiraIssueStatus, jiraID)\r\n                if jpropertyResult[\"result\"] == \"True\":\r\n                    jproperty = jpropertyResult[\"jiraRecord\"]\r\n                    smaxDataU['entities'][i] = {}\r\n                    smaxDataU['entities'][i][\"entity_type\"] = \"ArtifactoryServices_c\"\r\n                    smaxDataU['entities'][i][\"properties\"] = {}\r\n                    smaxDataU['entities'][i][\"properties\"][\"Id\"] = entity.split(\"♫\")[0]\r\n                    smaxDataU['entities'][i][\"properties\"][\"DisplayLabel\"] = jproperty.split(\"♫\")[1]\r\n                    smaxDataU['entities'][i][\"properties\"][\"JiraTool_c\"] = jproperty.split(\"♫\")[6]\r\n                    smaxDataU['entities'][i][\"properties\"][\"ExternalAsset_c\"] = \"Jira\"\r\n                    smaxDataU['entities'][i][\"properties\"][\"JiraIssueType_c\"] = jproperty.split(\"♫\")[5]\r\n                    smaxDataU['entities'][i][\"properties\"][\"JiraProject_c\"] = jproperty.split(\"♫\")[4]\r\n                    #smaxDataU['entities'][i][\"properties\"][\"InstanceId_c\"] = jproperty.split(\"♫\")[2]\r\n                i+=1\r\n        smaxData = json.dumps(smaxDataU)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData }\r\n\r\ndef insertSMAXRequestStatusBulk(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, jiraIssueStatus, elemIDs):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        smaxDataU={}\r\n        smaxDataU['entities'] = []        \r\n        smaxDataU['operation'] = \"CREATE\"\r\n        \r\n        #'{\"entity_type\": \"Request\", \"properties\": { \"Id\": \"'+smaxRequestID+'\",  \"JiraIssueStatus_c\": \"'+jiraIssueStatus+'\"}, \"related_properties\" : { }  }'\r\n        if len(elemIDs) > 0 and len(jiraIssueStatus) > 0 and len(jiraIssueStatus.split(\"♀\")) > 0:          \r\n            smaxDataU['entities'] = [0]*len(elemIDs.split(\"♪\"))\r\n            i = 0\r\n            for entity in elemIDs.split(\"♪\"):\r\n                jiraID = entity.split(\"♫\")[1]\r\n                jpropertyResult = findDataInDataStructure(jiraIssueStatus, jiraID)\r\n                if jpropertyResult[\"result\"] == \"True\":\r\n                    jproperty = jpropertyResult[\"jiraRecord\"]\r\n                    smaxDataU['entities'][i] = {}\r\n                    smaxDataU['entities'][i][\"entity_type\"] = \"ArtifactoryServices_c\"\r\n                    smaxDataU['entities'][i][\"properties\"] = {}\r\n                    smaxDataU['entities'][i][\"properties\"][\"DisplayLabel\"] = jproperty.split(\"♫\")[1]\r\n                    smaxDataU['entities'][i][\"properties\"][\"JiraTool_c\"] = jproperty.split(\"♫\")[6]\r\n                    smaxDataU['entities'][i][\"properties\"][\"ExternalAsset_c\"] = \"Jira\"\r\n                    smaxDataU['entities'][i][\"properties\"][\"JiraIssueType_c\"] = jproperty.split(\"♫\")[5]\r\n                    smaxDataU['entities'][i][\"properties\"][\"JiraProject_c\"] = jproperty.split(\"♫\")[4]\r\n                    smaxDataU['entities'][i][\"properties\"][\"InstanceId_c\"] = jproperty.split(\"♫\")[2]\r\n                i+=1\r\n        smaxData = json.dumps(smaxDataU)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData }\r\n\r\ndef deleteSMAXRequestStatusBulk(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, elemIDs):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        smaxDataU={}\r\n        smaxDataU['entities'] = []        \r\n        smaxDataU['operation'] = \"DELETE\"\r\n        \r\n        #'{\"entity_type\": \"Request\", \"properties\": { \"Id\": \"'+smaxRequestID+'\",  \"JiraIssueStatus_c\": \"'+jiraIssueStatus+'\"}, \"related_properties\" : { }  }'\r\n        if len(elemIDs) > 0 and len(elemIDs.split(\"♪\")) > 0:          \r\n            smaxDataU['entities'] = [0]*len(elemIDs.split(\"♪\"))\r\n            i = 0\r\n            for entity in elemIDs.split(\"♪\"):\r\n                smaxDataU['entities'][i] = {}\r\n                smaxDataU['entities'][i][\"entity_type\"] = \"ArtifactoryServices_c\"\r\n                smaxDataU['entities'][i][\"properties\"] = {}\r\n                smaxDataU['entities'][i][\"properties\"][\"Id\"] = entity\r\n                i+=1\r\n        smaxData = json.dumps(smaxDataU)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData }\r\n\r\ndef findDataInDataStructure(jiraData, jiraID):\r\n    message = \"\"\r\n    result = \"False\"\r\n    jiraRecord = \"\"\r\n    try:\r\n        for sublist in jiraData.split(\"►\"):\r\n            subListVars = sublist.split(\"♀\")\r\n            found = False\r\n            for jproperties in subListVars[2].split(\"♪\"):\r\n                jPropArray = jproperties.split(\"♫\")\r\n                if jPropArray[2] == jiraID:\r\n                        found = True\r\n                        jiraRecord = jproperties\r\n                        break\r\n            if found:\r\n                result = \"True\"\r\n                break\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"jiraRecord\": jiraRecord }\r\n\r\n# insert or update Knowladge Article in SMAX\r\ndef insertArticles(auth_baseurl, user, password, tenantId, smax_baseurl, datas):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n\r\n\r\n        data = datas             \r\n                \r\n        response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            token = \"Records Created!\"\r\n        else:\r\n            token = \"Issue Creating Records!\"\r\n                \r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_response\": token }\r\n\r\n\r\n\r\n#authenticate in SMAX\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data={}\r\n        data['Login'] = user\r\n        data['Password']= password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token }\r\n\r\ndef removeIdFromList(list, id):\r\n    newlist = \"\"\r\n    if len(id) == 0:\r\n        return list\r\n    if len(list) > 0:\r\n        elems = list.split(\"♪\")\r\n        for elem in elems:\r\n            if elem != id:\r\n                newlist += elem + \"♪\"\r\n        if len(newlist) > 0:\r\n            newlist = newlist[:-1]\r\n        return newlist\r\n    else:\r\n        return \"\"\r\n\r\ndef filterExitingData(jitaList, smaxList):\r\n    message = \"\"\r\n    result = \"\"\r\n    exitingBeforElement = \"\"\r\n    #exitingBeforElement2 = \"\"\r\n    newElements = \"\"\r\n    oldNotInNew = \"\"\r\n\r\n    try:\r\n        #find elementes tat are in smax and in jira or jira only\r\n        for sublist in jitaList.split(\"►\"):\r\n            subListVars = sublist.split(\"♀\")\r\n            for jproperties in subListVars[2].split(\"♪\"):\r\n                jPropArray = jproperties.split(\"♫\")\r\n                found = False\r\n                for sproperties in smaxList.split(\"♪\"):\r\n                    if jPropArray[2] == sproperties.split(\"♫\")[3]:\r\n                        found = True\r\n                        exitingBeforElement += sproperties.split(\"♫\")[0] + \"♫\" + jPropArray[2] + \"♪\"\r\n                        break\r\n                if found==False:\r\n                    newElements += \"♫\" + jPropArray[2] + \"♪\"\r\n                    #exitingBeforElement2 += \"♫\" + jPropArray[2] + \"♪\"\r\n        fullList = stripLastChar(exitingBeforElement + newElements)\r\n        \r\n        #find elementes that are in smax but not in jira\r\n        for sproperties in smaxList.split(\"♪\"):\r\n            found = False\r\n            for elem in fullList.split(\"♪\"):\r\n                if elem.split(\"♫\")[1] == sproperties.split(\"♫\")[3]:\r\n                    found = True\r\n                    break\r\n            if found == False:\r\n                oldNotInNew += sproperties.split(\"♫\")[0]  + \"♪\"\r\n\r\n        exitingBeforElement = stripLastChar(exitingBeforElement)\r\n        newElements = stripLastChar(newElements)\r\n        oldNotInNew = stripLastChar(oldNotInNew)\r\n        \r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"exitingBeforElement\": exitingBeforElement, \"newElements\": newElements, \"oldNotInNew\":oldNotInNew }\r\n\r\ndef stripLastChar(list):\r\n    if len(list) > 0:\r\n        list = list[:-1]\r\n    return list"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result == "True"}'
    - FAILURE
