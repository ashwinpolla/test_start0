namespace: Cerner.DigitalFactory.MarketPlace.JIRA.Operation
operation:
  name: deleteCommentsInMarketplace
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - projectNames: "${get_sp('MarketPlace.jiraProjects')}"
    - creator: "${get_sp('MarketPlace.jiraIssueCreator')}"
    - lastUpdate: "${get_sp('MarketPlace.lastUpdateTime')}"
    - smax_FieldID
    - smax_Bridge_ID
    - jiraAndSMaxIDs
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - smax_authToken
    - domainName
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of comments From JIRA TO SMAX\r\n#   Operation: deleteCommentsInMarketplace\r\n#   Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  smax_authToken\r\n#       -  smax_user\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  projectNames\r\n#       -  creator\r\n#       -  lastUpdate\r\n#       -  jiraAndSMaxIDs\r\n#       -  smax_FieldID\r\n#       -  conn_timeout\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n# Modified on 02 Jul 2022 by Rakesh Sharma for Handling User Accounts not found in the SMAX and also corrcted the Hash creation process for deleted comments\r\n\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\nimport datetime\r\nfrom datetime import datetime\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\ninstall(\"time\")\r\ninstall(\"pytz\")\r\ninstall(\"markdown\")\r\n\r\n\r\n# main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jiraAndSMaxIDs,\r\n            lastUpdate, creator, smax_authToken, smax_user, smax_tenantId, smax_baseurl,\r\n            smax_FieldID, smax_Bridge_ID, conn_timeout, domainName):\r\n    message = \"\"\r\n    result = \"\"\r\n    jiraticketID = \"\"\r\n    smaxticketID = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    data = {}\r\n    arr = []\r\n    response = \"\"\r\n    commentUpdateUserId = \"\"\r\n    commentUpdateUserName = \"\"\r\n    attachmentDetails = \"\"\r\n    smaxExistingCommentID = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        if len(jiraAndSMaxIDs.split(\"♪♩\")) > 0:\r\n\r\n            for issues in jiraAndSMaxIDs.split(\"♪♩\"):\r\n                jiraticketID = str(issues.split(\"♫\")[0])\r\n                smaxticketID = str(issues.split(\"♫\")[1])\r\n\r\n                reqUrl = '{0}rest/api/2/issue/{1}?expand=changelog&fields=changelog'.format(MarketPlace_jiraIssueURL,\r\n                                                                                            jiraticketID)\r\n                basicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n                headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n                response = requests.get(reqUrl, auth=basicAuthCredentials, headers=headers, timeout=int(conn_timeout))\r\n                if response.status_code == 200:\r\n                    responseData = {}\r\n                    responseData = response.json()\r\n                    arr = responseData[\"changelog\"]\r\n                    if ((arr[\"total\"] == 0) or (len(arr[\"histories\"]) == 0)):\r\n                        message = \"No recent deleted comments in JIRA\"\r\n                        result = \"True\"\r\n                    else:\r\n                        for i in arr[\"histories\"]:\r\n\r\n                            # ***********format Deleted time***************\r\n                            DeletedTime = timeConversion(i[\"created\"])\r\n\r\n                            # ***********format last updated time***************\r\n                            lastUpdateDateTime = datetime.fromisoformat(lastUpdate)\r\n\r\n                            # *****************fetch recent updated comments **********************************\r\n                            if ((DeletedTime >= lastUpdateDateTime) and (i[\"items\"][0][\"field\"] == \"Comment\")):\r\n                                commentString = i[\"items\"][0][\"from\"]\r\n                                import markdown\r\n                                html = markdown.markdown(commentString).replace('\\xa0','').replace('\\xc2','')\r\n                                smaxCommentID = \"\"\r\n                                fetchsmaxID = \"\"\r\n\r\n                                ## html string having smax cooment id check\r\n                                if len (html) > 109:\r\n                                    tthtml = html[len(html) - 110:]\r\n                                else:\r\n                                    tthtml = html\r\n                                if '--smaxCommentID:' in tthtml and 'Comment_From_Marketplace' in tthtml:\r\n                                    fetchsmaxIDfromJiracomment = tthtml.split(\"--smaxCommentID:\")[1]\r\n                                    fetchsmaxID = fetchsmaxIDfromJiracomment.split(\"@\")[0]\r\n\r\n                                if fetchsmaxID != '':\r\n                                    smaxCommentID = fetchsmaxID\r\n                                    removeHTMLSmaxTag = html.split(\"{color:white}Do not edit this\")[0]\r\n                                    removeHTMLSmaxTag = removeHTMLSmaxTag.replace(' ','')\r\n                                    jira_comments_hash = str(hash(removeHTMLSmaxTag))\r\n                                else:\r\n                                    html = html.replace(' ', '')\r\n                                    jira_comments_hash = str(hash(str(html)))\r\n\r\n                                if (i[\"author\"][\"name\"] != \"\"):\r\n                                    commentUpdateUserName = i[\"author\"][\"name\"] + \"@\" + domainName + \"'\"\r\n                                else:\r\n                                    commentUpdateUserName = smax_user\r\n                                # *****************fetch userID using displayName*****************\r\n\r\n                                authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n                                cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n                                response = requests.get(\r\n                                    smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Person?layout=Id,Upn,Email,EmployeeStatus&filter=Upn='\" + commentUpdateUserName + \"'\",\r\n                                    auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n                                if response.status_code == 200:\r\n                                    entityJsonArray = json.loads(response.content)\r\n                                    if 'properties' in str(response.content):\r\n                                        commentUpdateUserId = entityJsonArray[\"entities\"][0][\"properties\"][\"Id\"]\r\n                                    else:\r\n                                        commentUpdateUserId = smax_Bridge_ID\r\n                                else:\r\n                                    commentUpdateUserId = smax_Bridge_ID\r\n                                if smaxCommentID == \"\":\r\n                                    existingCommentID = getSmaxCommentIDOfExistingComment(smax_baseurl, smax_tenantId,\r\n                                                                                          smax_authToken,\r\n                                                                                          jira_comments_hash,\r\n                                                                                          smaxticketID, smaxCommentID,\r\n                                                                                          jiraticketID)\r\n                                    smaxExistingCommentID = existingCommentID[\"existingCommentId\"]\r\n                                    message = existingCommentID[\"message\"]\r\n                                    result = existingCommentID[\"result\"]\r\n                                    errorType = existingCommentID[\"errorType\"]\r\n                                    errorProvider = existingCommentID[\"errorProvider\"]\r\n                                    if result == 'False':\r\n                                        msg = existingCommentID[\"errorMessage\"]\r\n                                        errorProvider = existingCommentID[\"errorProvider\"]\r\n                                        errorType = existingCommentID[\"errorType\"]\r\n                                        errorMessage = existingCommentID[\"errorMessage\"]\r\n                                        errorSeverity = existingCommentID[\"errorSeverity\"]\r\n                                        raise Exception(msg)\r\n                                if (smaxExistingCommentID != '' or smaxCommentID != ''):\r\n                                    # ***********update the smax comment with jira delete commnet*************\r\n                                    data = {}\r\n                                    data[\"IsSystem\"] = \"false\"\r\n                                    commentStringData = \"This comment has been deleted in JIRA\"\r\n                                    data[\"Body\"] = commentStringData\r\n                                    data[\"CommentFrom\"] = \"ExternalServiceDesk\"\r\n                                    data[\"Submitter\"] = {}\r\n                                    data[\"Submitter\"][\"UserId\"] = commentUpdateUserId\r\n                                    if smaxCommentID != '':\r\n                                        data[\"Id\"] = smaxCommentID\r\n                                    else:\r\n                                        data[\"Id\"] = smaxExistingCommentID\r\n                                    if smaxExistingCommentID != '':\r\n                                        updateSmaxComment = updateSmaxExistingComment(smax_baseurl, smax_tenantId,\r\n                                                                                      smax_authToken, smaxticketID,\r\n                                                                                      data, smaxExistingCommentID)\r\n                                    else:\r\n                                        updateSmaxComment = updateSmaxExistingComment(smax_baseurl, smax_tenantId,\r\n                                                                                      smax_authToken, smaxticketID,\r\n                                                                                      data, smaxCommentID)\r\n                                    message = updateSmaxComment[\"message\"]\r\n                                    result = updateSmaxComment[\"result\"]\r\n                                    if result == 'False':\r\n                                        msg = updateSmaxComment[\"errorMessage\"]\r\n                                        errorProvider = updateSmaxComment[\"errorProvider\"]\r\n                                        errorType = updateSmaxComment[\"errorType\"]\r\n                                        errorMessage = updateSmaxComment[\"errorMessage\"]\r\n                                        errorSeverity = updateSmaxComment[\"errorSeverity\"]\r\n                                        raise Exception(msg)\r\n                                else:\r\n                                    result = \"True\"\r\n                                    message = \"Missing CommentID for \" + smaxticketID\r\n                            else:\r\n                                result = \"True\"\r\n                                message = \"No recent deleted comment in JIRA\"\r\n                else:\r\n                    msg = \"Unsupported response from the Provider: \" + str(response.text)\r\n                    errorType = \"e20000\"\r\n                    raise Exception(msg)\r\n\r\n        if len(message.strip()) == 0:\r\n            message = \"No recent comments deleted to update\"\r\n            result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"JIRA\"\r\n        errorMessage = str(message)\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef timeConversion(commentUpdateTime):\r\n    from datetime import datetime\r\n    # **************Format updated time******************\r\n    TimeValue = ((commentUpdateTime.split('T'))[1].split(\".\"))[0]\r\n    size = len(TimeValue)\r\n    TimeValueHM = TimeValue[:size - 3]\r\n    DateValue = ((commentUpdateTime.split('T'))[0])\r\n    date_string = str(DateValue) + \" \" + str(TimeValueHM)\r\n    convertedTime = datetime.fromisoformat(date_string)\r\n\r\n    return convertedTime\r\n\r\n\r\ndef getSmaxCommentIDOfExistingComment(smax_baseurl, smax_tenantId, smax_authToken, jira_comments_hash, smaxticketID,\r\n                                      smaxCommentID, jiraticketID):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    existingCommentId = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n        response = requests.get(\r\n            smax_baseurl + \"/rest/\" + smax_tenantId + \"/collaboration/comments/Request/\" + smaxticketID,\r\n            headers=authHeaders, cookies=cookies)\r\n\r\n        if response.status_code == 200:\r\n            responseData = json.loads(response.content)\r\n\r\n            if responseData != []:\r\n                for i in responseData:\r\n\r\n                    commentsData = i['Body'].replace('\\xa0','').replace('\\xc2','').replace('\\3ucc','')\r\n\r\n                    if commentsData.find(\"jira_comments_id:\") != -1:\r\n                        split_string = commentsData.split('<p><span style=\"color:#ffffff\">jira_comments_id:', 1)\r\n                        substring = split_string[0].replace(' ','')\r\n                        tts = len(substring)\r\n                        smax_comments_hash = str(hash(str(substring)))\r\n                    else:\r\n                        commentsData = commentsData.replace(' ','')\r\n                        smax_comments_hash = str(hash(commentsData))\r\n\r\n                    commentID = i[\"Id\"]\r\n\r\n                    if (smax_comments_hash == jira_comments_hash):\r\n                        existingCommentId = commentID\r\n                        break\r\n                    else:\r\n                        result = True\r\n                        message = \"No comment found for jiraticketID \" + jiraticketID\r\n            message = \" Comments Hash conversion processed \"\r\n            result = \"True\"\r\n        else:\r\n            message = \"Method Name:getSmaxCommentIDOfExistingComment, Unsupported response from the Provider: \" + str(\r\n                response.content)\r\n            errorType = \"e20000\"\r\n            raise Exception(message)\r\n\r\n    except Exception as e:\r\n        message = str(e) + \": \" + str(message)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorMessage = \"getSmaxCommentIDOfExistingComment : \" + str(message)\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"existingCommentId\": existingCommentId, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef updateSmaxExistingComment(smax_baseurl, smax_tenantId, smax_authToken, smaxticketID, data, smaxExistingCommentID):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n        reqUrl = '{0}/rest/{1}/collaboration/comments/Request/{2}/{3}'.format(smax_baseurl, smax_tenantId, smaxticketID,\r\n                                                                              smaxExistingCommentID)\r\n        response = requests.put(reqUrl, headers=authHeaders, cookies=cookies, json=data)\r\n        message = response.text\r\n\r\n        if response.status_code == 200:\r\n            message = \"Records Updated!\"\r\n            result = \"True\"\r\n        else:\r\n            message = \"Method Name:updateSmaxExistingComment, Unsupported response from the Provider : \" + str(\r\n                response.content)\r\n            errorType = \"e20000\"\r\n            raise Exception(message)\r\n\r\n    except Exception as e:\r\n        message = str(e) + \": \" + str(message)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorMessage = \"updateSmaxExistingComment : \" + str(message)\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}"
  outputs:
    - result
    - message
    - errorSeverity
    - errorType
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
