namespace: Cerner.DigitalFactory.MarketPlace.JIRA.Operation
operation:
  name: commentsFromJiraToSMAX
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - creator: "${get_sp('MarketPlace.jiraIssueCreator')}"
    - lastUpdate: "${get_sp('MarketPlace.lastUpdateTime')}"
    - smax_FieldID
    - smax_Bridge_ID
    - jiraAndSMaxIDs
    - domainName
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - smax_authToken
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of comments From JIRA TO SMAX\r\n#    Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Operation: commentsFromJiraToSMAX\r\n#\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  creator\r\n#       -  lastUpdate\r\n#       -  smax_FieldID\r\n#       -  jiraAndSMaxIDs\r\n#       -  smax_Bridge_ID\r\n#       -   conn_timeout\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - newUpdateTime\r\n# modifiedBy: Ashwini Shalke(AS091236@cerner.net) for attachments in comments from JIRA to SMAX\r\n# Modified by : Rakesh Sharma  on 24 Mar 2022 for Optimzing the Code\r\n# Modified by: Rakesh Sharma on 09 Jun 2022 for Formatting the User Names in the comments Body\r\n# Modified by: Rakesh Sharma on 10 Jun 2022 for table data formatting from Jira to SMAX\r\n# Modified on 16 Jun 2022 by Rakesh Sharma to read the correct type of Image apart from what is coming from Jira. (Function uploadFileToSMAX modified)\r\n#Modified on 17 Jun 2022 by Rakesh Sharm to initiaze parametrs(smaxExistingCommentID,smaxCommentID & existingCommentID) to null before netx loop starts\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\ninstall(\"time\")\r\ninstall(\"pytz\")\r\ninstall(\"markdown\")\r\n\r\n\r\n# main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jiraAndSMaxIDs,\r\n            lastUpdate, creator, smax_authToken, smax_tenantId, smax_baseurl,\r\n            smax_FieldID, smax_Bridge_ID, domainName, conn_timeout, smax_user):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    jiraticketID = \"\"\r\n    smaxticketID = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    data = {}\r\n    arr = []\r\n    response = \"\"\r\n    conversionMarkUpToHTMLData = \"\"\r\n    commentUpdateUserId = \"\"\r\n    commentUpdateUserName = \"\"\r\n    attachmentDetails = \"\"\r\n    smaxExistingCommentID = ''\r\n    authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n    cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n    import requests\r\n    basicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n    headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n\r\n    try:\r\n        import json\r\n        from datetime import datetime\r\n\r\n        if len(jiraAndSMaxIDs.split(\"♪♩\")) > 0:\r\n\r\n            for issues in jiraAndSMaxIDs.split(\"♪♩\"):\r\n                if issues:\r\n                    result = 'False'\r\n                    jiraticketID = str(issues.split(\"♫\")[0])\r\n                    smaxticketID = str(issues.split(\"♫\")[1])\r\n\r\n                    reqUrl = '{0}rest/api/2/search'.format(MarketPlace_jiraIssueURL)\r\n                    data = {}\r\n                    data[\"jql\"] = \"issue={0} AND updated >'{1}'\".format(jiraticketID, lastUpdate)\r\n                    data[\"startAt\"] = \"0\"\r\n                    data[\"maxResults\"] = \"500\"\r\n                    data[\"fields\"] = [\"comment\", smax_FieldID, \"attachment\"]\r\n                    inputString = json.dumps(data)\r\n\r\n                    response = requests.post(reqUrl, auth=basicAuthCredentials, headers=headers, data=inputString, timeout=int(conn_timeout))\r\n                    if response.status_code == 200:\r\n                        responseData = response.json()\r\n                        if responseData[\"total\"] == 0:\r\n                            result = \"True\"\r\n                            message = \"No recent updated comments in Jira Issues\"\r\n                            continue\r\n                        arr = responseData[\"issues\"][0][\"fields\"][\"comment\"][\"comments\"]\r\n                        attachmentData = responseData[\"issues\"][0][\"fields\"][\"attachment\"]\r\n\r\n                        if attachmentData != []:\r\n                            for i in attachmentData:\r\n                                # attachment details\r\n                                fileName = i[\"filename\"] + \"♫\"\r\n                                fileCreated = i[\"created\"] + \"♫\"\r\n                                # fileMimeType = \" \" + \"♫\"\r\n                                fileID = i[\"id\"] + \"♪\"\r\n                                attachmentDetails += fileName + fileCreated + fileID\r\n\r\n                        if arr != []:\r\n                            result = \"True\"\r\n                            for i in arr:\r\n                                ### Initialising Parameters for clean run\r\n                                smaxExistingCommentID = ''\r\n                                smaxCommentID = ''\r\n                                existingCommentID = ''\r\n                                commentsData = i[\"body\"]\r\n                                commentID = i[\"id\"]\r\n                                visibility = \"\"\r\n                                lastUpdateDateTime = \"\"\r\n                                if \"visibility\" in i:\r\n                                    visibility = i[\"visibility\"][\"value\"]\r\n                                ## MARKET-2114 - Only Comment Types of All Users, Users, and JIRA-Users (within Groups) Will Flow From JIRA to the Marketplace.\r\n                                if visibility == \"\" or visibility == \"Users\" or visibility.lower() == \"jira-users\":\r\n                                    replace_ThumbnailFromComments = commentsData.replace(\"|thumbnail\", \"\")\r\n                                    for x in replace_ThumbnailFromComments:\r\n                                        if '[^' in replace_ThumbnailFromComments:\r\n                                            c = replace_ThumbnailFromComments\r\n                                            t = c[:c.index('[^')] + '!'+ c[c.index('[^')+2:c.index(']',c.index('[^'))] + '!' + c[c.index(']',c.index('[^'))+1:]\r\n                                            replace_ThumbnailFromComments = t\r\n                                        else:\r\n                                            break\r\n                                    #arrayofComments = replace_ThumbnailFromComments.split(\"!\")\r\n                                    arrayofComments = replace_ThumbnailFromComments\r\n                                    commentUpdateTime = i[\"updated\"]\r\n                                    commentCreatedTime = i[\"created\"]\r\n                                    # ************Modify Jira lastupdateTime format******************\r\n                                    commentUpdateDateTime = timeConversion(commentUpdateTime)\r\n                                    commentCreateDateTime = timeConversion(commentCreatedTime)\r\n                                    # ***********format last updated time***************\r\n                                    lastUpdateDateTime = datetime.fromisoformat(lastUpdate)\r\n                                    # ********************check if update author key is available*********************************\r\n                                    if \"updateAuthor\" in i:\r\n                                        if (i[\"updateAuthor\"][\"name\"] != \"\"):\r\n                                            commentUpdateUserName = i[\"updateAuthor\"][\"name\"]\r\n                                        else:\r\n                                            commentUpdateUserName = smax_user\r\n                                    else:\r\n                                        commentUpdateUserName = smax_user\r\n                                    ### Break the duplicate comments to pass through\r\n                                    if (commentUpdateDateTime < lastUpdateDateTime):\r\n                                        result = \"True\"\r\n                                        message = \"No recent updated comments in Jira Issues\"\r\n                                        continue\r\n                                    # *****************fetch recent updated comments **********************************\r\n\r\n                                    #### This is Wrong Condition -- Leading to duplicate comments\r\n                                    if (commentUpdateDateTime >= lastUpdateDateTime) and (\r\n                                            commentUpdateUserName != creator) and (commentsData != \"\"):\r\n\r\n                                        message = responseData\r\n                                        result = \"True\"\r\n                                        # *********calling formCommentBody to form commentString***********\r\n                                        body = formCommentBody(MarketPlace_jiraIssueURL, basicAuthCredentials,\r\n                                                               smax_baseurl, smax_tenantId, smax_authToken,\r\n                                                               lastUpdate, arrayofComments, attachmentDetails)\r\n                                        commentStringData = body[\"bodyString\"]\r\n                                        ## Name Formatting in the comment for names mentioned in the comment\r\n                                        if '[~' in commentStringData:\r\n                                            newCommentBody = nameFormattingComments(commentStringData,smax_baseurl,smax_tenantId,smax_authToken,domainName)\r\n                                            if newCommentBody[\"result\"] == 'True':\r\n                                                commentStringData = newCommentBody[\"commentStringData\"]\r\n\r\n                                        # *****************fetch userID using displayName*****************\r\n                                        response = requests.get(\r\n                                            smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Person?layout=Id,Upn,Email,EmployeeStatus&filter=Upn='\" + commentUpdateUserName + \"@\" + domainName + \"'\",\r\n                                            headers=authHeaders, cookies=cookies)\r\n                                        if response.status_code == 200:\r\n                                            entityJsonArray = json.loads(response.content)\r\n                                            commentUpdateUserId = entityJsonArray[\"entities\"][0][\"properties\"][\"Id\"]\r\n                                        else:\r\n                                            commentUpdateUserId = smax_Bridge_ID\r\n                                        #### WHat's this condition ?????\r\n                                        # if(commentCreateDateTime < lastUpdateDateTime) and (commentUpdateDateTime >= lastUpdateDateTime):\r\n                                        message = commentID\r\n                                        smaxCommentID = \"\"\r\n                                        fetchsmaxID = ''\r\n                                        comparisionSTring = \"jira_comments_id:\" + commentID\r\n                                        if commentStringData.find(\"--smaxCommentID:\") != -1:\r\n                                            fetchsmaxIDfromJiracomment = commentStringData.split(\"--smaxCommentID:\")\r\n                                            fetchsmaxID = fetchsmaxIDfromJiracomment[1].split(\"@\")\r\n                                        if fetchsmaxID != \"\":\r\n                                            smaxCommentID = fetchsmaxID[0]\r\n                                        if smaxCommentID == \"\":\r\n                                            existingCommentID = getSmaxCommentIDOfExistingComment(smax_baseurl, smax_tenantId,\r\n                                                                                                  smax_authToken, comparisionSTring,\r\n                                                                                                  smaxticketID)\r\n                                            smaxExistingCommentID = existingCommentID[\"existingCommentId\"]\r\n                                            message = smaxExistingCommentID\r\n                                            result = existingCommentID[\"result\"]\r\n                                            if result == 'False':\r\n                                                msg = existingCommentID[\"errorMessage\"]\r\n                                                errorProvider = existingCommentID[\"errorProvider\"]\r\n                                                raise Exception(msg)\r\n\r\n                                        if (smaxExistingCommentID != '' or smaxCommentID != ''):\r\n                                            # ***********update the smax comment with jira commnet*************\r\n                                            data = {}\r\n                                            data[\"IsSystem\"] = \"false\"\r\n                                            # removeSmaxTag = \"\"\r\n                                            if smaxCommentID != '':\r\n                                                if commentStringData.find(\"{color:#FFFFFF}Do not edit this line\") != -1:\r\n\r\n                                                    removeSmaxTag = commentStringData.split(\r\n                                                        \"{color:#FFFFFF}Do not edit this line\")\r\n                                                elif commentStringData.find(\"{color:white}Do not edit this line\") != -1:\r\n                                                    removeSmaxTag = commentStringData.split(\r\n                                                        \"{color:white}Do not edit this line\")\r\n                                                elif commentStringData.find(\r\n                                                        \"{color:#ffffff}Do not edit this line\") != -1:\r\n                                                    removeSmaxTag = commentStringData.split(\r\n                                                        \"{color:#ffffff}Do not edit this line\")\r\n                                                # commentStringData = removeSmaxTag[0]\r\n                                                data[\"Body\"] = removeSmaxTag[0]\r\n                                            else:\r\n                                                data[\r\n                                                    \"Body\"] = commentStringData + \"<p><span style=\\\"color:#ffffff\\\">jira_comments_id:\" + commentID + \"</span></p>\"\r\n                                            data[\"CommentFrom\"] = \"ExternalServiceDesk\"\r\n                                            data[\"Submitter\"] = {}\r\n                                            data[\"Submitter\"][\"UserId\"] = commentUpdateUserId\r\n                                            data[\"Id\"] = smaxExistingCommentID\r\n                                            if smaxExistingCommentID != '':\r\n                                                updateSmaxComment = updateSmaxExistingComment(smax_baseurl, smax_tenantId,\r\n                                                                                              smax_authToken, smaxticketID,\r\n                                                                                              data, smaxExistingCommentID)\r\n                                            else:\r\n                                                updateSmaxComment = updateSmaxExistingComment(smax_baseurl, smax_tenantId,\r\n                                                                                              smax_authToken, smaxticketID,\r\n                                                                                              data, smaxCommentID)\r\n                                            message = updateSmaxComment[\"message\"]\r\n                                            result = updateSmaxComment[\"result\"]\r\n                                            if result == 'False':\r\n                                                msg = updateSmaxComment[\"errorMessage\"]\r\n                                                errorProvider = updateSmaxComment[\"errorProvider\"]\r\n                                                raise Exception(msg)\r\n                                        else:\r\n                                            data = {}\r\n                                            data[\"IsSystem\"] = \"false\"\r\n                                            data[\r\n                                                \"Body\"] = commentStringData + \"<p><span style=\\\"color:#ffffff\\\">jira_comments_id:\" + commentID + \"</span></p>\"\r\n                                            data[\"CommentFrom\"] = \"ExternalServiceDesk\"\r\n                                            data[\"Submitter\"] = {}\r\n                                            data[\"Submitter\"][\"UserId\"] = commentUpdateUserId\r\n                                            # inputString = json.dumps(data)\r\n                                            postCommentsFromJiraToSMAX = postCommentsToSMAX(smax_baseurl, smax_tenantId,\r\n                                                                                            smax_authToken, data, smaxticketID)\r\n                                            result = postCommentsFromJiraToSMAX[\"result\"]\r\n                                            message = postCommentsFromJiraToSMAX[\"message\"]\r\n                                            if result == 'False':\r\n                                                msg = postCommentsFromJiraToSMAX[\"errorMessage\"]\r\n                                                errorProvider = postCommentsFromJiraToSMAX[\"errorProvider\"]\r\n                                                raise Exception(msg)\r\n\r\n                                    else:\r\n                                        message = \"No recent comments to update\"\r\n                                        result = \"True\"\r\n                                else:\r\n                                    result = \"True\"\r\n                                    message = \"No recent comments to update\"\r\n                        else:\r\n                            message = \"No recent updated issues in Jira!\"\r\n                            result = \"True\"\r\n                    else:\r\n                        message = \"Unsupported response from the Provider\"\r\n                        msg = message + \":\" + str(response.content)\r\n                        raise Exception(msg)\r\n\r\n        else:\r\n            message = \"No recent updated issues in Jira!\"\r\n            result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"JIRA\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n# format names on comments for SMAX Format\r\ndef nameFormattingComments(commentStringData,smax_baseurl,smax_tenantId,smax_authToken,domainName):\r\n    message = \"\"\r\n    result = \"False\"\r\n    token = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    user_upn_list = ''\r\n    user_list = ''\r\n    authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n    cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        if commentStringData and '[~' in commentStringData:\r\n            for tuser in commentStringData.split('[~'):\r\n                if tuser:\r\n                    user = tuser.split(']')[0]\r\n                    user_list += user + ','\r\n                    user_upn_list += \"'\" + user + '@' + domainName + \"',\"\r\n\r\n            user_upn_list = user_upn_list[:-1]\r\n            url = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Person?layout=Id,Upn,Email,Name&filter=Upn+in+(\" + user_upn_list + \")\"\r\n\r\n            response = requests.get(url, headers=authHeaders, cookies=cookies)\r\n\r\n            if response.status_code == 200:\r\n                sdata = json.loads(response.text)\r\n                for entity in sdata['entities']:\r\n                    upn = entity[\"properties\"][\"Upn\"]\r\n                    name = entity[\"properties\"][\"Name\"]\r\n                    for user in user_list.split(','):\r\n                        if user and user in upn:\r\n                            commentStringData = commentStringData.replace('[~' + user + ']', '<strong>'+name+'</strong>')\r\n                message = 'Comments body formatted with User Names successfully'\r\n                result = 'True'\r\n            else:\r\n                msg = 'Unsupported response from the Provider: ' + str(response.text)\r\n                raise Exception(msg)\r\n\r\n        else:\r\n            message = 'This Comments body does not have any Users referenced in it.'\r\n            result = 'True'\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\"commentStringData\":commentStringData}\r\n\r\n # post comments to smax\r\ndef postCommentsToSMAX(smax_baseurl, smax_tenantId, smax_token, data, smaxticketID):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_token}\r\n        reqUrl = '{0}/rest/{1}/collaboration/comments/Request/{2}'.format(smax_baseurl, smax_tenantId, smaxticketID)\r\n        response = requests.post(reqUrl, headers=authHeaders, cookies=cookies, json=data)\r\n        message = response.text\r\n        if response.status_code == 201:\r\n            message = \"Records Created!\"\r\n            result = \"True\"\r\n        else:\r\n            message = \"Unsupported response from the Provider\"\r\n            msg = message + \":\" + str(response.content)\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef timeConversion(commentUpdateTime):\r\n    from datetime import datetime\r\n    # **************Format updated time******************\r\n    TimeValue = ((commentUpdateTime.split('T'))[1].split(\".\"))[0]\r\n    size = len(TimeValue)\r\n    TimeValueHM = TimeValue[:size - 3]\r\n    DateValue = ((commentUpdateTime.split('T'))[0])\r\n    date_string = str(DateValue) + \" \" + str(TimeValueHM)\r\n    convertedTime = datetime.fromisoformat(date_string)\r\n\r\n    return convertedTime\r\n\r\n\r\ndef getSmaxCommentIDOfExistingComment(smax_baseurl, smax_tenantId, smax_token, comparisionSTring, smaxticketID):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    existingCommentId = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_token}\r\n        response = requests.get(\r\n            smax_baseurl + \"/rest/\" + smax_tenantId + \"/collaboration/comments/Request/\" + smaxticketID,\r\n            headers=authHeaders, cookies=cookies)\r\n\r\n        if response.status_code == 200:\r\n            responseData = json.loads(response.content)\r\n\r\n            if responseData != []:\r\n                for i in responseData:\r\n\r\n                    commentsData = i['Body']\r\n                    commentID = i[\"Id\"]\r\n\r\n                    if commentsData.find(comparisionSTring) != -1:\r\n                        existingCommentId = commentID\r\n\r\n        else:\r\n            message = \"Unsupported response from the Provider\"\r\n            msg = message + \":\" + str(response.content)\r\n            raise Exception(msg)\r\n\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"existingCommentId\": existingCommentId, \"message\": existingCommentId,\r\n            \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef updateSmaxExistingComment(smax_baseurl, smax_tenantId, smax_token, smaxticketID, data, smaxExistingCommentID):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_token}\r\n        reqUrl = '{0}/rest/{1}/collaboration/comments/Request/{2}/{3}'.format(smax_baseurl, smax_tenantId, smaxticketID,\r\n                                                                              smaxExistingCommentID)\r\n        response = requests.put(reqUrl, headers=authHeaders, cookies=cookies, json=data)\r\n        message = response.text\r\n        if response.status_code == 200 or response.status_code == 201:\r\n            message = \"Records Updated!\"\r\n            result = \"True\"\r\n        else:\r\n            message = \"Unsupported response from the Provider\"\r\n            msg = message + \":\" + str(response.content)\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef conversionMarkUpToHTML(markUpString):\r\n    message = \"\"\r\n    conversionResult = \"\"\r\n    jiraString = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    html = \"\"\r\n\r\n    try:\r\n        import markdown\r\n        import json\r\n        result = \"True\"\r\n        html = markUpString\r\n        #check if table in data then convert it to HTML  table\r\n        if '||' in html:\r\n            for x in html:\r\n\r\n                if '||' in html:\r\n                    if '||' in html.split('||\\r\\n')[1]:\r\n                        tr_separator_count = html.split('||\\r\\n')[1].split('||',1)[0].count('|')\r\n                        prebody = html.split('||')[0]\r\n                        i = 1\r\n                        position = 0\r\n                        len_middle_body = len(html.split('||\\r\\n')[0]) +4\r\n                        for a in html.split('||\\r\\n')[1].split('|'):\r\n                            position = html.split('||\\r\\n')[1].find('|', position)\r\n                            if i == tr_separator_count:\r\n                                position += 1\r\n                                break\r\n                            else:\r\n                                position += 1\r\n                            i += 1\r\n                        last_content = html[len_middle_body+position:]\r\n\r\n                    else:\r\n                        tr_separator_count = html.split('||\\r\\n')[1].count('|')\r\n                        prebody = html.split('||')[0]\r\n                        last_content = html.split('||\\r\\n')[1][html.split('||\\r\\n')[1].rfind('|')+1:]\r\n                    newhtml = prebody + '<table><thead><tr>'\r\n                    thtml = html.split('||',1)[1]\r\n                    for i in thtml.split('||'):\r\n                        if not i[:2] == '\\r\\n':\r\n                            newhtml += '<th>' + i + '</th>'\r\n                        if i[:2] == '\\r\\n':\r\n                            newhtml += '</tr></thead>'\r\n                            break\r\n                    tmp_trhtml = html.split('||\\r\\n',1)[1]\r\n                    trhtml = tmp_trhtml.split('|',1)[1]\r\n                    newhtml += '<tbody><tr>'\r\n                    ri = 2\r\n                    for i in trhtml.split('|'):\r\n                        if not i[:2] == '\\r\\n':\r\n                            newhtml += '<td>' + i + '</td>'\r\n                        if i[:2] == '\\r\\n':\r\n                            newhtml += '</tr><tr>'\r\n                        if ri == tr_separator_count:\r\n                            newhtml += '</tr></tbody></table>\\n' + last_content\r\n                            html = newhtml\r\n                            break\r\n                        ri += 1\r\n                else:\r\n                    break\r\n        html = markdown.markdown(html, extensions=['markdown.extensions.tables'])\r\n\r\n        jiraString = html\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"OOExec\"\r\n    return {\"result\": result, \"message\": markUpString, \"jiraString\": jiraString, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# this function will form the comment body\r\ndef formCommentBody(MarketPlace_jiraIssueURL, basicAuthCredentials, smax_baseurl,\r\n                    smax_tenantId, smax_token, lastUpdate, arrayofComments, attachmentDetails):\r\n    message = \"\"\r\n    errorType = \"\"\r\n    result = \"False\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    bodyString = \"\"\r\n\r\n    try:\r\n        for x in arrayofComments:\r\n            if '!' in arrayofComments:\r\n                c = arrayofComments\r\n                c_attach_file = c[c.index('!') + 1:c.index('!', c.index('!')+1)]\r\n                t = c[:c.index('!')] + c[c.index('!') + 1 :c.index('!', c.index('!')+1)] + c[c.index('!') + len(c_attach_file)+2:]\r\n                arrayofComments = t\r\n\r\n                for file in attachmentDetails.split(\"♪\"):\r\n                    if file:\r\n                        fileName = file.split(\"♫\")[0]\r\n                        fileCreatedDate = file.split(\"♫\")[1]\r\n                        fileId = file.split(\"♫\")[2]\r\n\r\n                        if c_attach_file == fileName:\r\n                            # download the attachment into local\r\n                            downloadFromJIRA = downloadFileFromJIRA(MarketPlace_jiraIssueURL, basicAuthCredentials\r\n                                                                    , smax_baseurl, smax_tenantId,\r\n                                                                    smax_token, fileId, fileName)\r\n                            message = downloadFromJIRA[\"message\"]\r\n                            if downloadFromJIRA[\"result\"] == 'False':\r\n                                result = downloadFromJIRA[\"result\"]\r\n                                errorMessage = downloadFromJIRA[\"errorMessage\"]\r\n                                errorProvider = 'SMAX'\r\n                                raise Exception(errorMessage)\r\n\r\n                            smaxAttachResponse = downloadFromJIRA[\"smaxAttachmentResponse\"]\r\n                            smaxAttachResponse = smaxAttachResponse[: -1]\r\n                            fileName1 = str(smaxAttachResponse.split(\"♫\")[1])\r\n                            fileGUID = str(smaxAttachResponse.split(\"♫\")[0])\r\n\r\n                            c_attach_link = \"<p><img alt=\\\"\" + fileName1 + \"\\\" \" + \"height=\\\"180\\\" src=\\\"\" + smax_baseurl + \"/rest/\" + smax_tenantId + \"/frs/file-list/\" + fileGUID + \"?draftMode=true\\\" width=\\\"241\\\" /></p>\"\r\n\r\n                            arrayofComments = arrayofComments.replace(c_attach_file,c_attach_link)\r\n\r\n            else:\r\n                break\r\n        conversionMarkUpToHTMLData = conversionMarkUpToHTML(arrayofComments)\r\n        commentBody = conversionMarkUpToHTMLData[\"jiraString\"]\r\n        bodyString = commentBody\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if errorProvider:\r\n            errorProvider = \"JIRA\"\r\n\r\n    return {\"result\": result, \"message\": message, \"bodyString\": bodyString, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# download file from JIRA to c:/temp/\r\ndef downloadFileFromJIRA(MarketPlace_jiraIssueURL, basicAuthCredentials, smax_baseurl,\r\n                         smax_tenantId, smax_token, fileID, fileName):\r\n    import platform\r\n    import os\r\n    import requests\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    smaxAttachmentResponse = \"\"\r\n    authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n    jiraFileName = fileID + \"_\" + fileName\r\n\r\n    url = \"{0}secure/attachment/{1}/{2}\".format(MarketPlace_jiraIssueURL, fileID, fileName)\r\n\r\n    response = requests.get(url, auth=basicAuthCredentials, headers=authHeaders)\r\n    if response.status_code == 200:\r\n        data = response.content\r\n        my_os = platform.system()\r\n        if (my_os == \"Windows\"):\r\n            downloadFilePath = 'c:\\\\temp\\\\' + jiraFileName\r\n            open(downloadFilePath, 'wb').write(data)\r\n        else:\r\n            downloadFilePath = '\\\\tmp\\\\' + jiraFileName\r\n            open(downloadFilePath, 'wb').write(data)\r\n\r\n        responseFromuploadFileToSMAX = uploadFileToSMAX(smax_baseurl, smax_tenantId, smax_token, downloadFilePath,\r\n                                                        jiraFileName)\r\n\r\n        smaxAttachmentResponse = responseFromuploadFileToSMAX[\"guid\"] + \"♫\" + responseFromuploadFileToSMAX[\r\n            \"fileName\"] + \"♪\"\r\n        if responseFromuploadFileToSMAX[\"result\"] == 'False':\r\n            result = responseFromuploadFileToSMAX[\"result\"]\r\n            errorMessage = responseFromuploadFileToSMAX[\"errorMessage\"]\r\n            errorProvider = 'SMAX'\r\n            raise Exception(errorMessage)\r\n\r\n        result = \"True\"\r\n        message = fileName + \"downloaded in C:/temp folder\"\r\n\r\n        if os.path.exists(downloadFilePath):\r\n            os.remove(downloadFilePath)\r\n\r\n    else:\r\n        message = \"Unsupported response from the Provider\"\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Download Attachment from JIRA :- \" + message + \":\" + str(response.content)\r\n        errorSeverity = \"ERROR\"\r\n        if errorProvider:\r\n            errorProvider = \"JIRA\"\r\n\r\n    return {\"result\": result, \"message\": message, \"smaxAttachmentResponse\": smaxAttachmentResponse,\r\n            \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# upload file to SMAX Environment\r\ndef uploadFileToSMAX(smax_baseurl, smax_tenantId, smax_token, filePath, fileName):\r\n    import requests\r\n    import json\r\n    import mimetypes\r\n    result = ''\r\n    message = ''\r\n    guid = ''\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    fileType = ''\r\n\r\n    try:\r\n        import imghdr\r\n        fileExtn = imghdr.what(filePath)\r\n        if fileExtn:\r\n            fileType = mimetypes.guess_type(filePath)[0] or 'application/octet-stream'\r\n            if fileExtn not in fileName[fileName.rfind('.'):]:\r\n                fileName = fileName[:fileName.rfind('.')] + '.' + fileExtn\r\n                fileType = 'image/' + fileExtn\r\n        else:\r\n            fileType = mimetypes.guess_type(filePath)[0] or 'application/octet-stream'\r\n\r\n\r\n        url = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ces/attachment\"\r\n        \r\n        payload = {}\r\n        files = [('files[]', (fileName, open(filePath, 'rb'), fileType))]\r\n\r\n        headers = {\r\n            'Cookie': 'LWSSO_COOKIE_KEY=' + smax_token\r\n        }\r\n        response = requests.request(\"POST\", url, headers=headers, data=payload, files=files)\r\n\r\n        if response.status_code == 200:\r\n            content = json.loads(response.content)\r\n            guid = content[\"guid\"]  ##[\"guid\"]\r\n            fileName = content[\"name\"]  ##[\"name\"]\r\n            result = 'True'\r\n            message = 'Successfully uploaded the attachment file: ' + fileName\r\n        else:\r\n            result = 'False'\r\n            message = 'Failed to upload the attachment file:'\r\n            errorType = \"e20000\"\r\n            errorMessage = \"Upload file to SMAX :- \" + message + \":\" + str(response.content)\r\n            errorSeverity = \"ERROR\"\r\n            errorProvider = \"SMAX\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Upload file to SMAX :- \" + message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"guid\": guid, \"fileName\": fileName, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
