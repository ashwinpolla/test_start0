namespace: Cerner.DigitalFactory.MarketPlace.JIRA.Operation
operation:
  name: JiraProjectSync
  inputs:
    - JiraDB_Server: "${get_sp('MarketPlace.jiraDBServer')}"
    - JiraDB_Database: "${get_sp('MarketPlace.jiraDB')}"
    - JiraDB_User: "${get_sp('MarketPlace.jiraDBUser')}"
    - JiraDB_Password: "${get_sp('MarketPlace.jiraDBPass')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Jira projects and Smax\r\n#   Author: Pawel Bak Micro Focus (pawel.bak@microsoft.com)\r\n#   Inputs:\r\n#       -  JiraDB_Server\r\n#       -  JiraDB_Database\r\n#       -  JiraDB_User\r\n#       -  JiraDB_Password\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - projects\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorMessage\r\n#   Modified On\t: 25 Oct 2021\r\n#   Modified By\t: Ashwini Shalke\r\n#   Modification: added 4 outputs for error handling\r\n#   Modified by Rakesh on 18 Oct 2022 - SQL Query modified to include the option 'N/A'\r\n###############################################################\r\n\r\nimport re\r\nimport sys, os\r\nimport subprocess\r\n\r\n#SQL_Query = \"SELECT Name FROM [ipsql01].[core].[dbo].[jira_project] where active_ind = 1 order by name asc\"\r\nSQL_Query = \"SELECT Name FROM [core].[dbo].[jira_project] where active_ind = 1  UNION select 'N/A' order by 1 ASC\"\r\n\r\n\r\n#e30011\r\nclass ExternalLibraryNotPresent(Exception): \r\n    \"\"\"Raised external library not present\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"External library not present: \" + str(message)\r\n        self.errorNumber = \"e30011\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"CODE\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n#e20018\r\nclass SQLConnectionTimeoutError(Exception): \r\n    \"\"\"Raised when SQL timedout\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"SQL timedout: \" + str(message)\r\n        self.errorNumber = \"e20018\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SQL\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n#e10012\r\nclass SQLAuthError(Exception): \r\n    \"\"\"Raised when SQL DB authentication issue\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"SQL DB authentication issue: \" + str(message)\r\n        self.errorNumber = \"e10012\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SQL\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n#e20019\r\nclass SQLQuerringIssueError(Exception): \r\n    \"\"\"Raised when querring jira SQL DB issue\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"Issue querring jira SQL DB: \" + str(message)\r\n        self.errorNumber = \"e20019\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SQL\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n#e20020\r\nclass SmaxAPIGettingOldRecordsError(Exception): \r\n    \"\"\"Raised when issue getting old records from SMAX\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"Issue getting old records from SMAX: \" + str(message)\r\n        self.errorNumber = \"e20020\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n#e20002\r\nclass SmaxAPITimeoutError(Exception): \r\n    \"\"\"Raised when SMAX API timedout\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"SMAX API timedout: \" + str(message)\r\n        self.errorNumber = \"e20002\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n#e20002\r\nclass SmaxAPIIssueError(Exception): \r\n    \"\"\"Raised when SMAX API Issue\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"SMAX API Issue: \" + str(message)\r\n        self.errorNumber = \"e20000\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n#e10002\r\nclass SmaxAPICredentialsIncorrectError(Exception):\r\n    \"\"\"Raised when SMAX API Credentials Failed\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"SMAX API Credentials Failed: \" + str(message)\r\n        self.errorNumber = \"e10002\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n\r\n#e20006\r\nclass IssueDownloadingContentError(Exception):\r\n    \"\"\"Raised when issue downloading content Failed\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"Issue downloading content Failed: \" + str(message)\r\n        self.errorNumber = \"e20006\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n\r\n#e20008\r\nclass IssueGettingOldArticlesFromSmaxError(Exception):\r\n    \"\"\"Raised when issue getting old articles from Smax Failed\"\"\"\r\n    def __init__(self, message):\r\n        self.message = \"Issue getting old articles from Smax Failed: \" + str(message)\r\n        self.errorNumber = \"e20008\"\r\n        self.errorSeverity = \"ERROR\"\r\n        self.errorProvider = \"SMAX\"\r\n    def __str__(self) -> str:\r\n        return self.message\r\n    def getErrorNumber(self):\r\n        return self.errorNumber\r\n    def getErrorSeverity(self):\r\n        return self.errorSeverity\r\n    def getErrorProvider(self):\r\n        return self.errorProvider\r\n \r\n\r\n\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\" \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\ninstall(\"pymssql\")\r\n\r\ndef execute(JiraDB_Server, JiraDB_Database, JiraDB_User, JiraDB_Password, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"False\"\r\n    projects = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import json\r\n        import pymssql \r\n        \r\n        smaxDataU={}\r\n        smaxDataU['entities'] = []\r\n        #smaxDataU['operation'] = \"UPDATE\"\r\n        smaxDataU['operation'] = \"CREATE\"\r\n\r\n        smaxDataD={}\r\n        smaxDataD['entities'] = []\r\n        #smaxDataU['operation'] = \"UPDATE\"\r\n        smaxDataD['operation'] = \"DELETE\"\r\n\r\n        i=0\r\n\r\n        conn = pymssql.connect(JiraDB_Server, JiraDB_User, JiraDB_Password, JiraDB_Database)\r\n        cursor = conn.cursor(as_dict=True)\r\n        cursor.execute(SQL_Query)\r\n        \r\n        for row in cursor:\r\n            projects += str(row[\"Name\"]) + \"â™ª\"\r\n            i+=1\r\n\r\n        \r\n        oldP = FindOldJiraProjects(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\r\n        if oldP[\"result\"] != \"True\":\r\n            raise SmaxAPIIssueError(oldP[\"message\"])\r\n        toRem = filterRemoveList(projects, oldP[\"smax_ids\"])\r\n\r\n        addProjects = filterAddList(projects, oldP[\"jiraProjects\"])\r\n\r\n        if len(addProjects) > 0:\r\n            #addProjects = addProjects[:-1]\r\n            smaxDataU['entities'] = [{}]*len(addProjects.split(\"â™ª\"))\r\n            i=0\r\n            for project in addProjects.split(\"â™ª\"):\r\n                data = {}\r\n                data[\"entity_type\"] = \"JiraProject_c\"\r\n                data[\"properties\"] = {}\r\n                data[\"properties\"][\"DisplayLabel\"] = project\r\n                smaxDataU['entities'][i] = data\r\n                i+=1\r\n        \r\n        if len(toRem) > 0:\r\n            #projects = projects[:-1]\r\n            smaxDataD['entities'] = [{}]*len(toRem.split(\"â™ª\"))\r\n            i=0\r\n            for project in toRem.split(\"â™ª\"):\r\n                data = {}\r\n                data[\"entity_type\"] = \"JiraProject_c\"\r\n                data[\"properties\"] = {}\r\n                data[\"properties\"][\"Id\"] = project.split(\"â™«\")[0]\r\n                smaxDataD['entities'][i] = data\r\n                i+=1\r\n\r\n        delRes = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, json.dumps(smaxDataD))\r\n        insertRes = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, json.dumps(smaxDataU))\r\n        result = insertRes[\"result\"]\r\n        message = insertRes[\"message\"]\r\n        \r\n    except Exception as e:\r\n        message = str(e)       \r\n        result = \"False\"\r\n        try:\r\n            errorType = e.getErrorNumber()\r\n            errorSeverity = e.getErrorSeverity()\r\n            errorProvider = e.getErrorProvider()\r\n            errorMessage = message\r\n        except:\r\n            errorSeverity = \"ERROR\" \r\n            errorType = \"e20000\"\r\n            errorProvider = \"JIRA\"\r\n            errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"projects\":projects,\"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\n# insert Knowladge Article in SMAX\r\ndef insertArticles(auth_baseurl, user, password, tenantId, smax_baseurl, datas):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        \r\n        basicAuthCredentials = (user, password)\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n\r\n\r\n        data = json.loads(datas)             \r\n                \r\n        response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            token = \"Records Created!\"\r\n        else:\r\n            token = \"Issue Creating Records!\"\r\n                \r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorSeverity = \"e20000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message\r\n        \r\n    return {\"result\": result, \"message\": message, \"smax_response\": token,\"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\ndef RemoveOldEvents(auth_baseurl, user, password, tenantId, smax_baseurl, ExcludeIDs):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    toRemove = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        \r\n        \r\n        foldRes = FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl)\r\n\r\n        if foldRes[\"result\"] == \"True\" and len(foldRes[\"smax_ids\"]) > 0:\r\n            \r\n            basicAuthCredentials = (user, password)\r\n            authResp = getAuthCookie(auth_baseurl, user, password)\r\n            if authResp[\"result\"] == \"True\":\r\n                token = authResp[\"smax_auth\"]\r\n        \r\n            authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n            toRemove = foldRes[\"smax_ids\"]\r\n            oldIDs = foldRes[\"smax_ids\"].split(\"â™ª\")\r\n            \r\n            i=0\r\n            smaxData={}\r\n            smaxData[\"entities\"] = [0]*len(oldIDs)\r\n            smaxData[\"operation\"] = \"DELETE\"\r\n\r\n            for id in oldIDs:\r\n                smaxData[\"entities\"][i]={}\r\n                smaxData[\"entities\"][i][\"entity_type\"] = \"Article\"\r\n                smaxData[\"entities\"][i][\"properties\"] = {}\r\n                smaxData[\"entities\"][i][\"properties\"][\"Id\"] = id\r\n                i+=1\r\n\r\n            response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=smaxData, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n            \r\n            if response.status_code == 200:\r\n                result = \"True\"\r\n                message = \"OK\"\r\n            else:\r\n                result = \"False\"\r\n                message = response.text\r\n                errorSeverity = \"e20000\"\r\n                errorType = \"ERROR\"\r\n                errorProvider = \"JIRA\"\r\n                errorMessage = message\r\n        \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorSeverity = \"ERROR\" \r\n        errorType = \"e30000\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"toRemove\":toRemove,\"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\n\r\n#search function for articles of certain type\r\ndef FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl, SourceSystem=\"CSD-Incident\", ExcludeIDs=\"\"):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/Article?layout=Id,SourceSystem_c,Title,PhaseId,ExternalId&filter=SourceSystem_c%3D'\"+SourceSystem+\"'\"\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        \r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n            \r\n            for entity in jdata['entities']:\r\n                nexclued = True\r\n                try:\r\n                    eids = ExcludeIDs.split(\"â™ª\")\r\n                    ind = eids.index(entity[\"properties\"][\"Id\"])\r\n                    nexclued = False\r\n                except:\r\n                    nexclued = True\r\n                \r\n                if nexclued:\r\n                    smax_ids += entity[\"properties\"][\"Id\"] + \"â™ª\"\r\n            \r\n            if len(smax_ids) > 0:\r\n                smax_ids = smax_ids[:-1]\r\n            result = \"True\"\r\n        \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorSeverity = \"ERROR\" \r\n        errorType = \"e20000\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"smax_ids\":smax_ids,\"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\n#search function for articles of certain type\r\ndef FindOldJiraProjects(auth_baseurl, user, password, tenantId, smax_baseurl, page=1000, currentR = 0 ):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    jiraProjects = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/JiraProject_c?layout=Id,DisplayLabel&skip=\" + str(currentR) + \"&size=\" + str(page)\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        \r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n            \r\n            dumpString(response3.text)\r\n\r\n            for entity in jdata['entities']:\r\n                smax_ids += entity[\"properties\"][\"Id\"] + \"â™«\" + entity[\"properties\"][\"DisplayLabel\"] + \"â™ª\"\r\n                jiraProjects += entity[\"properties\"][\"DisplayLabel\"] + \"â™ª\"\r\n            \r\n            total_count = int(jdata[\"meta\"][\"total_count\"])\r\n            \r\n            if (currentR == 0) and ((currentR + page) < total_count):\r\n                while ((currentR + page) < total_count):\r\n                    currentR += page\r\n                    nextPRes = FindOldJiraProjects(auth_baseurl, user, password, tenantId, smax_baseurl, page, currentR)\r\n                    smax_ids += \"â™ª\" + nextPRes[\"smax_ids\"]\r\n                    jiraProjects += \"â™ª\" + nextPRes[\"jiraProjects\"]\r\n                smax_ids += \"â™ª\" \r\n                jiraProjects += \"â™ª\"\r\n            result = \"True\"\r\n\r\n\r\n\r\n\r\n        if len(smax_ids) > 0:\r\n            smax_ids = smax_ids[:-1]\r\n            jiraProjects = jiraProjects[:-1]\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorSeverity = \"ERROR\" \r\n        errorType = \"e20000\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"smax_ids\":smax_ids, \"jiraProjects\":jiraProjects,\"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\ndef filterAddList(newList, oldList):\r\n    retList = \"\"\r\n    if len(newList.split(\"â™ª\")) == 0:\r\n        return \"\"\r\n    if len(oldList.split(\"â™ª\")) == 0:\r\n        return newList\r\n\r\n    for nelem in newList.split(\"â™ª\"):\r\n        found = False\r\n        for oelem in oldList.split(\"â™ª\"):\r\n            if nelem == oelem:\r\n                found = True\r\n                break\r\n        if found == False:\r\n            retList += nelem + \"â™ª\"\r\n    \r\n    if len(retList) > 0:\r\n        retList = retList[:-1]\r\n    return retList\r\n\r\ndef filterRemoveList(newList, oldList):\r\n    retList = \"\"\r\n    if len(newList.split(\"â™ª\")) == 0:\r\n        return \"\"\r\n    if len(oldList.split(\"â™ª\")) == 0:\r\n        return newList\r\n    \r\n    for oelem in oldList.split(\"â™ª\"):\r\n        found = False\r\n        try:\r\n            oelem0 = oelem.split(\"â™«\")[0]\r\n            oelem1 = oelem.split(\"â™«\")[1]\r\n            for nelem in newList.split(\"â™ª\"):\r\n                if nelem == oelem1:\r\n                    found = True\r\n                    break\r\n        except Exception as e:\r\n            found = (len(oelem) == 0)\r\n        if found == False:\r\n            retList += oelem + \"â™ª\"\r\n    \r\n        \r\n    if len(retList) > 0:\r\n        retList = retList[:-1]\r\n    return retList\r\n\r\n\r\n#authenticate in SMAX\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data={}\r\n        data['Login'] = user\r\n        data['Password']= password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorSeverity = \"ERROR\"\r\n        errorType = \"e20000\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token,\"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\ndef dumpString(str1, desc=\"\"):\r\n    try: \r\n        import datetime\r\n        if 'debug' in globals():\r\n            f= open(\"c:\\\\temp\\\\test1.txt\",\"a\")\r\n            date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\r\n            f.write(date + \" -> \" + desc + str(str1) + \"\\n\")\r\n            f.close() \r\n    except Exception as e:\r\n        message = str(e)\r\n        errorSeverity = \"ERROR\"\r\n        errorType = \"e20000\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message"
  outputs:
    - result
    - message
    - projects
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result == "True"}'
    - FAILURE
