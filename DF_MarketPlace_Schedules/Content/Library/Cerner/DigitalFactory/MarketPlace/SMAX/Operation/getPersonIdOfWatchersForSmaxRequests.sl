namespace: Cerner.DigitalFactory.MarketPlace.SMAX.Operation
operation:
  name: getPersonIdOfWatchersForSmaxRequests
  inputs:
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - sqlOutputArray
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Watchers From Jira TO Smax\r\n#    Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Inputs:       \r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       - sqlOutputArray\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - newWatcherIdList\r\n#       - existingWatcherList\r\n#       - watcherPersonIdList\r\n# Modified on 21 June 2022 by Sirisha to reflect correct error message\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n# function do download external modules to python \"on-the-fly\" \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"    \r\n    \r\n    try:        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e30000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n        \r\n    return {\"result\": result, \"message\": message,\"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\n\r\n#main function\r\ndef execute(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, sqlOutputArray):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    newWatcherIdList = \"\"\r\n    existingWatcherList = \"\"\r\n    watcherPersonIdList = \"\"\r\n    watcherMissingInSmax = \"\"\r\n    \r\n    try:\r\n        import json\r\n        import requests\r\n        #data = json.dumps(sqlOutputArray)\r\n        json_data = json.loads(sqlOutputArray)\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]            \r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n        \r\n        for i in json_data:\r\n            \r\n            jiraId = i[\"jiraid\"]\r\n            smaxId = i[\"hcmxid\"]\r\n            watcherId = i[\"lower_user_name\"].upper()\r\n            watcherIdLowerDomain = watcherId+\"@cerner.net\"\r\n            watcherIdUpperDomain = watcherId+\"@Cerner.net\"\r\n            \r\n            response = requests.get(smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Request/\" + smaxId +\"/associations/FollowedByUsers?layout=Id,Upn\",auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n            \r\n            if response.status_code == 200:\r\n                responseData = json.loads(response.content)\r\n                message = responseData\r\n                if responseData[\"meta\"][\"total_count\"] > 0:\r\n                    json_string = json.dumps(responseData)                    \r\n                    if (json_string.find(watcherIdLowerDomain) != -1) or (json_string.find(watcherIdUpperDomain) != -1):\r\n                        existingWatcherList+= \"♪\" + watcherIdLowerDomain +  \"♫\" + smaxId\r\n                    else:\r\n                        newWatcherIdList+= \"♪\" + watcherIdLowerDomain +  \"♫\" + smaxId                    \r\n                elif responseData[\"meta\"][\"total_count\"] == 0:\r\n                    newWatcherIdList+= \"♪\" + watcherIdLowerDomain +  \"♫\" + smaxId \r\n                else:\r\n                    message = \"No watchers in the SMAX Request\"\r\n                    result = \"True\"\r\n            else:\r\n                message = \"Unsupported response from the Provider :\"+ str(response.content) +\", Status Code: \"+str(response.status_code)\r\n                errorType = \"e20000\"\r\n                raise Exception(message)\r\n\r\n        if len(newWatcherIdList) > 0:\r\n            newWatcherIdList = newWatcherIdList[1:]\r\n            fetchUserId = fetchUserIdForWatcher(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, newWatcherIdList)            \r\n            message = fetchUserId[\"message\"]\r\n            result = fetchUserId[\"result\"]\r\n            watcherPersonIdList = fetchUserId[\"watcherPersonIdList\"]  \r\n            watcherMissingInSmax = fetchUserId[\"watcherMissingInSmax\"] \r\n            if fetchUserId[\"result\"] == \"False\":\r\n                message = fetchUserId[\"message\"]\r\n                raise Exception(message)\r\n        else:\r\n             message = \"No recent updated watchers in SMAX\"\r\n             result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n        \r\n    return {\"result\": result, \"message\": message, \"watcherMissingInSmax\":watcherMissingInSmax, \"newWatcherIdList\":newWatcherIdList,\"existingWatcherList\":existingWatcherList, \"watcherPersonIdList\":watcherPersonIdList, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\n\r\ndef fetchUserIdForWatcher(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, newWatcherIdList):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    watcherPersonIdList = \"\"\r\n    watcherMissingInSmax = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]            \r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n        for issues in newWatcherIdList.split(\"♪\"):\r\n            watcherID = issues.split(\"♫\")[0]\r\n            smaxID = issues.split(\"♫\")[1]\r\n            \r\n            response = requests.get(smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Person?layout=Id,Upn,Email,EmployeeStatus&filter=Upn='\" + watcherID + \"'\", auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n            if response.status_code == 200:\r\n                entityJsonArray = json.loads(response.content)\r\n                if entityJsonArray[\"entities\"]:\r\n                    watcherUserId = entityJsonArray[\"entities\"][0][\"properties\"][\"Id\"]                \r\n                    watcherPersonIdList+= \"♪\" + watcherUserId +  \"♫\" + smaxID\r\n                    \r\n                else:\r\n                     watcherMissingInSmax +=  smaxID + \":\" +  watcherID +\",\"            \r\n            else:\r\n                message = \"Unsupported response from the Provider : \"+ str(response.content)+\", Status Code: \"+str(response.status_code)\r\n                errorType = \"e20000\"\r\n                raise Exception(message)\r\n                \r\n        if len(watcherPersonIdList) > 0:  \r\n            watcherPersonIdList = watcherPersonIdList[1:]            \r\n            message = \"Fetched the ID's of watchersID's from SMAX\"\r\n            result = \"True\"\r\n        else:\r\n            message = \"No recent updated watchers in SMAX\"\r\n            result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n        \r\n    return {\"result\": result, \"message\": message, \"watcherMissingInSmax\":watcherMissingInSmax, \"watcherPersonIdList\":watcherPersonIdList, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data = {}\r\n        data['Login'] = user\r\n        data['Password'] = password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token}"
  outputs:
    - result
    - message
    - watcherMissingInSmax
    - newWatcherIdList
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - existingWatcherList
    - watcherPersonIdList
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
