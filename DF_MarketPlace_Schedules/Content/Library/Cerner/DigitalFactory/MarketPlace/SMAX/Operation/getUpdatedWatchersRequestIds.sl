namespace: Cerner.DigitalFactory.MarketPlace.SMAX.Operation
operation:
  name: getUpdatedWatchersRequestIds
  inputs:
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - lastUpdate
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Watchers From Smax TO Jira\r\n#    Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Inputs:\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  lastUpdate\r\n#       -   conn_timeout\r\n#       #watcherUpdateTime\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - newUpdateTime\r\n#       - smaxAndJiraIDs\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\nimport time\r\nimport datetime\r\n\r\n# function do download external modules to python \"on-the-fly\" \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n#main function\r\ndef execute(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, lastUpdate, conn_timeout):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    smaxDataU={}\r\n    token = \"\"\r\n    smaxAndJiraIDs = \"\"  \r\n    currentTime = str(time.time())\r\n    #newUpdateTime = currentTime.split(\".\")[0]\r\n    newUpdateTime=(currentTime[:10]+currentTime[11:])[ 0 : 13 ]\r\n    \r\n    try:\r\n        import requests\r\n        import json\r\n        \r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n        \r\n        response = requests.get(smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Request?layout=Id,JiraIssueId_c,WatcherUpdateTime_c&filter=WatcherUpdateTime_c>\"+lastUpdate\r\n                                , auth=basicAuthCredentials, headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n                \r\n        if response.status_code == 200:\r\n            entityJsonArray = json.loads(response.content)\r\n            if entityJsonArray[\"meta\"][\"total_count\"] != 0:\r\n                for entity in entityJsonArray[\"entities\"]:\r\n                    try:\r\n                        smaxAndJiraIDs += entity[\"properties\"][\"Id\"]+ \"♫\" + entity[\"properties\"][\"JiraIssueId_c\"] + \"♪\"                           \r\n                    except KeyError:     \r\n                        print(\"The JiraIssue ID does not exist!\")                \r\n            else:     \r\n                message = \"No recent updated watchers in SMAX\"\r\n                result = \"True\" \r\n            if len(smaxAndJiraIDs) > 0:\r\n                smaxAndJiraIDs = smaxAndJiraIDs[:-1]\r\n                message = \"Fetched the updated watchersRequestID's from SMAX\"\r\n                result = \"True\"\r\n            else:\r\n                message = \"No recent updated watchers in SMAX\"\r\n                result = \"True\" \r\n        else:\r\n            message = \"Unsupported response from the Provider:\"+str(response.content)\r\n            result = \"False\"\r\n            errorType = \"e20000\"\r\n            \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if errorType!=\"\":\r\n            errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"newUpdateTime\": newUpdateTime, \"smaxAndJiraIDs\":smaxAndJiraIDs, \"errorType\": errorType,\"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\n\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data = {}\r\n        data['Login'] = user\r\n        data['Password'] = password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token}"
  outputs:
    - result
    - message
    - smaxAndJiraIDs
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - newUpdateTime
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
