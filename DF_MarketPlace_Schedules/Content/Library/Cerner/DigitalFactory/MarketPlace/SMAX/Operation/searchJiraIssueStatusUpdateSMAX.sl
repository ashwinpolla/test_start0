namespace: Cerner.DigitalFactory.MarketPlace.SMAX.Operation
operation:
  name: searchJiraIssueStatusUpdateSMAX
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - projectNames: "${get_sp('MarketPlace.jiraProjects')}"
    - creator: "${get_sp('MarketPlace.jiraIssueCreator')}"
    - lastUpdate
    - smax_FieldID:
        required: false
    - jira_IncidentCategory_FieldId:
        required: false
    - jira_RequestCategory_FieldId:
        required: false
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
  python_action:
    use_jython: false
    script: "##############################################################\r\n#   OO operation for sync of Jira and Smax\r\n#   Author: Rajesh Singh (rajesh.singh5@microfocus.com), MicroFocus International\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  projectNames\r\n#       -  creator\r\n#       -  lastUpdate\r\n#       -  smax_FieldID\r\n#       -  jira_IncidentCategory_FieldId\r\n#       -  jira_RequestCategory_FieldId\r\n#       -   conn_timeout\r\n#\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorMessage\r\n#   Modified On\t: 25 Oct 2021\r\n#   Modified By\t: Ashwini Shalke\r\n#   Modification: added 4 outputs for error handling\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, smax_auth_baseurl, smax_user,\r\n            smax_password, smax_tenantId, smax_baseurl, projectNames, creator, lastUpdate, smax_FieldID,\r\n            jira_IncidentCategory_FieldId, jira_RequestCategory_FieldId, conn_timeout):\r\n    message = \"\"\r\n    result = \"True\"\r\n    jiraIssueStatus = \"\"\r\n    statusJiraResult = {}\r\n    updateResult = {}\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    smaxDataU = {}\r\n    newUpdateTime = \"\"\r\n    \r\n    try:\r\n        # requirement external modules\r\n        install(\"requests\")\r\n        install(\"pytz\")\r\n        \r\n        # Get current new update time in CST timezone ('US/Central') as Jira is returns time in this TZ\r\n        from datetime import datetime\r\n        from pytz import timezone\r\n        fmt = \"%Y-%m-%d %H:%M\"  # Format of time\r\n        # Current time in CST - 'US/Central'\r\n        now_cst = datetime.now(timezone('US/Central'))\r\n        newUpdateTime = now_cst.strftime(fmt)\r\n        \r\n        import json\r\n        smaxDataU['entities'] = []\r\n        smaxDataU['operation'] = \"UPDATE\"\r\n        # Calling extractJiraStatusBulk for extracting JIRA records\r\n        statusJiraResult = extractJiraStatusBulk(\r\n            MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, projectNames, creator, lastUpdate,\r\n            smax_FieldID, jira_IncidentCategory_FieldId, jira_RequestCategory_FieldId, conn_timeout)\r\n        if statusJiraResult[\"result\"] == \"True\":\r\n            jiraIssueStatus = statusJiraResult[\"jiraIssueStatus\"]\r\n            if len(jiraIssueStatus) > 0:\r\n                updateResult = createSMAXBulkRequest(jiraIssueStatus)\r\n                if updateResult[\"result\"] == \"True\" and len(updateResult[\"smaxData\"]) > 2:\r\n                    #smaxDataU = json.loads(updateResult[\"smaxData\"])\r\n                    smaxDataU = updateResult[\"smaxData\"]\r\n                    updateRes = updateSMAXJiraStatus(smax_auth_baseurl, smax_user, smax_password, smax_tenantId,\r\n                                                     smax_baseurl, smaxDataU)\r\n                    result = updateRes[\"result\"]\r\n                    message = updateRes[\"message\"]\r\n            else:\r\n                result = \"True\"\r\n                message = \"No issue found since last update\"\r\n        else:\r\n            result = \"False\"\r\n            message = statusJiraResult[\"message\"]\r\n            errorSeverity = \"e20000\"\r\n            errorType = \"ERROR\"\r\n            errorProvider = \"JIRA\"\r\n            errorMessage = message\r\n\r\n\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e20000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"newUpdateTime\": newUpdateTime, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# search all the issues updated since lastUpdate params\r\ndef extractJiraStatusBulk(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, projectNames,\r\n                          creator, lastUpdate, smax_FieldID, jira_IncidentCategory_FieldId,\r\n                          jira_RequestCategory_FieldId, conn_timeout):\r\n    message = \"\"\r\n    result = \"False\"\r\n    jiraIssueStatus = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import json\r\n        import requests\r\n\r\n        index = 0\r\n        ids = projectNames.split(\"♪\")\r\n        inputString = \"\"\r\n\r\n        for id in ids:\r\n            reqUrl = '{0}rest/api/2/search'.format(MarketPlace_jiraIssueURL)\r\n            data = {}\r\n            data[\"jql\"] = \"project='{0}' AND updated >'{1}' AND creator='{2}'\".format(id, lastUpdate, creator)\r\n            data[\"startAt\"] = \"0\"\r\n            data[\"maxResults\"] = \"500\"\r\n            data[\"fields\"] = [smax_FieldID, \"status\", \"assignee\", jira_IncidentCategory_FieldId,\r\n                              jira_RequestCategory_FieldId]\r\n\r\n            inputString = json.dumps(data)\r\n\r\n            basicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n            headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n\r\n            response = requests.post(reqUrl, auth=basicAuthCredentials, headers=headers, data=inputString, timeout=int(conn_timeout))\r\n            if response.status_code == 200:\r\n                result = \"True\"\r\n                entityJsonArray = json.loads(response.content)\r\n                for entity in entityJsonArray[\"issues\"]:\r\n                    jiraIssueStatus += fetchSmaxIdAndAssignee(entity, smax_FieldID, jira_IncidentCategory_FieldId,\r\n                                                              jira_RequestCategory_FieldId)\r\n                #jiraIssueStatus = jiraIssueStatus[:-1]\r\n            else:\r\n                message = response.text\r\n                result = \"False\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e20000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message\r\n        print(\"JIRA\", jiraIssueStatus)\r\n    return {\"result\": result, \"message\": message, \"jiraIssueStatus\": jiraIssueStatus, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# Fetch the field from JIRA(JSON) - smax_filedID,assignee,status_name,incidentCategory,requestCategory\r\ndef fetchSmaxIdAndAssignee(entity, smax_FieldID, jira_IncidentCategory_FieldId, jira_RequestCategory_FieldId):\r\n    jiraIssueStatus = \"\"\r\n    smax_filedID = entity[\"fields\"][smax_FieldID]\r\n    assignee = entity[\"fields\"][\"assignee\"]\r\n    status_name = entity[\"fields\"][\"status\"][\"name\"]\r\n    incidentCategory = entity[\"fields\"][jira_IncidentCategory_FieldId]\r\n    requestCategory = entity[\"fields\"][jira_RequestCategory_FieldId]\r\n\r\n    if smax_filedID and smax_filedID != '73346':\r\n        if not assignee:\r\n            jiraIssueStatus += smax_filedID + \"♫\" + status_name + \"♪\"\r\n        else:\r\n            if not incidentCategory and not requestCategory:\r\n                jiraIssueStatus += smax_filedID + \"♫\" + status_name + \"♫\" + assignee[\"displayName\"] + \"(\" + \\\r\n                                   assignee[\"emailAddress\"] + \")\" + \"♪\"\r\n            elif incidentCategory:\r\n                jiraIssueStatus += smax_filedID + \"♫\" + status_name + \"♫\" + assignee[\"displayName\"] + \"(\" + \\\r\n                                   assignee[\"emailAddress\"] + \")\" + \"♫\" + incidentCategory[\"value\"] + \"♪\"\r\n            elif requestCategory:\r\n                jiraIssueStatus += smax_filedID + \"♫\" + status_name + \"♫\" + assignee[\"displayName\"] + \"(\" + \\\r\n                                   entity[\"fields\"][\"assignee\"][\"emailAddress\"] + \")\" + \"♫\" + requestCategory[\r\n                                       \"value\"] + \"♪\"\r\n\r\n    return (jiraIssueStatus)\r\n\r\n\r\ndef createSMAXBulkRequest(jiraIssueStatus):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import json\r\n\r\n        smaxDataU = {}\r\n        smaxDataU['entities'] = []\r\n        smaxDataU['operation'] = \"UPDATE\"\r\n\r\n        # '{\"entity_type\": \"Request\", \"properties\": { \"Id\": \"'+smaxRequestID+'\",  \"JiraIssueStatus_c\": \"'+jiraIssueStatus+'\"}, \"related_properties\" : { }  }'\r\n        if len(jiraIssueStatus.split(\"♪\")) > 0:\r\n            smaxDataU['entities'] = [0] * len(jiraIssueStatus.split(\"♪\"))\r\n            i = 0\r\n            for issues in jiraIssueStatus.split(\"♪\"):\r\n                if issues:\r\n                    smaxDataU['entities'][i] = {}\r\n                    smaxDataU['entities'][i][\"entity_type\"] = \"Request\"\r\n                    smaxDataU['entities'][i][\"properties\"] = {}\r\n                    smaxDataU['entities'][i][\"properties\"][\"Id\"] = issues.split(\"♫\")[0]\r\n                    smaxDataU['entities'][i][\"properties\"][\"JiraIssueStatus_c\"] = issues.split(\"♫\")[1]\r\n                    if len(issues.split(\"♫\")) > 2:\r\n                        smaxDataU['entities'][i][\"properties\"][\"JiraAssignee_c\"] = issues.split(\"♫\")[2]\r\n                    if len(issues.split(\"♫\")) > 3:\r\n                        smaxDataU['entities'][i][\"properties\"][\"JIRACategory_c\"] = issues.split(\"♫\")[3]\r\n                        # smaxDataU['entities'][i][\"properties\"][\"JIRARequestCategory_c\"] = issues.split(\"♫\")[4]\r\n                elif i > 0 :\r\n                   del smaxDataU['entities'][i]\r\n                i += 1\r\n            smaxData = json.dumps(smaxDataU)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e20000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# insert or update Knowladge Article in SMAX\r\ndef updateSMAXJiraStatus(auth_baseurl, user, password, tenantId, smax_baseurl, datas):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n\r\n        headers = {\r\n            'Cookie': 'LWSSO_COOKIE_KEY=' + token,\r\n            'Content-Type': 'application/json',\r\n            'User-Agent': 'Apache-HttpClient/4.4.1'\r\n        }\r\n\r\n        payload = datas\r\n        url = smax_baseurl + \"/rest/\" + tenantId + \"/ems/bulk\"\r\n\r\n        response = requests.request(\"POST\", url, headers=headers, data=payload)\r\n\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            token = \"Records Created!\"\r\n        else:\r\n            token = \"Issue Creating Records!\"\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e20000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"smax_response\": token, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# authenticate in SMAX\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data = {}\r\n        data['Login'] = user\r\n        data['Password'] = password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e20000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        errorMessage = message\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}"
  outputs:
    - result
    - message
    - newUpdateTime
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
