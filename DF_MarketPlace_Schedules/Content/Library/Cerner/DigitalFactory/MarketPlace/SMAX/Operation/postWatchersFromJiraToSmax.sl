namespace: Cerner.DigitalFactory.MarketPlace.SMAX.Operation
operation:
  name: postWatchersFromJiraToSmax
  inputs:
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - watcherPersonIdList
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Watchers From Jira TO Smax\r\n#    Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Inputs:       \r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  createWatcherIdList\r\n#       -  conn_timeout\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       #newUpdateTime\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n# function do download external modules to python \"on-the-fly\" \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"    \r\n    \r\n    try:        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e30000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n        \r\n    return {\"result\": result, \"message\": message,\"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\n#main function\r\ndef execute(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, watcherPersonIdList, conn_timeout):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        if len(watcherPersonIdList.split(\"♪\")) > 0:\r\n            for issues in watcherPersonIdList.split(\"♪\"):\r\n                personID = str(issues.split(\"♫\")[0])\r\n                smaxticketID = str(issues.split(\"♫\")[1])\r\n                request_body = {}\r\n                request_body[\"relationships\"] = []\r\n                json_element = {}\r\n                json_element[\"name\"] = \"FollowedByUsers\"\r\n                json_element[\"firstEndpoint\"] = {}\r\n                json_element[\"firstEndpoint\"][\"Request\"] = smaxticketID\r\n                json_element[\"secondEndpoint\"] = {}\r\n                json_element[\"secondEndpoint\"][\"Person\"] = personID \r\n                request_body[\"relationships\"].append(json_element)\r\n                request_body[\"operation\"] = \"CREATE\"\r\n                basicAuthCredentials = (smax_user, smax_password)\r\n                authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n                if authResp[\"result\"] == \"True\":\r\n                    token = authResp[\"smax_auth\"]\r\n                \r\n                authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n                cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n                reqUrl = '{0}/rest/{1}/ems/bulk'.format(smax_baseurl, smax_tenantId)\r\n                response = requests.post(reqUrl, headers=authHeaders, cookies=cookies, json=request_body, timeout=2*int(conn_timeout))\r\n                message = response.text\r\n                if response.status_code == 200:\r\n                    message = \"Watchers Created!\"\r\n                    result = \"True\"\r\n                else:\r\n                    message = \"Unsupported response from the Provider: \"+ str(response.content)+\" , Status Code: \"+str(response.status_code)\r\n                    result = \"False\"\r\n                    errorType = \"e20000\"\r\n        else:\r\n            result = \"True\"\r\n            message = \"No Recent Updated Watchers In Jira\"\r\n                    \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n        \r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data = {}\r\n        data['Login'] = user\r\n        data['Password'] = password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
