########################################################################################################################
#!!
#! @output idsToAddPermission: output format "watcherid,jiraIssueid||watcherid,jiraIssueid||" The watcherid is Associate id
#!!#
########################################################################################################################
namespace: Cerner.DigitalFactory.MarketPlace.SMAX.Operation
operation:
  name: postWatchersFromSmaxToJira
  inputs:
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - smaxAndJiraIDs
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Watchers From Smax TO Jira\r\n#    Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  smaxAndJiraIDs\r\n#       -  conn_timeout\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - jiraWatchersList\r\n#       - watcherAndJiraIDs\r\n#       - idsToAddPermission\r\n#       - idsDoesnotExistInJira\r\n#       - idsAddedToJiraList\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n# function do download external modules to python \"on-the-fly\" \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n#main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, smaxAndJiraIDs, conn_timeout):\r\n    message = \"\"\r\n    result = \"False\"\r\n    token = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    jiraWatchersList = \"\"\r\n    newWatcherAndJiraIDs = \"\"\r\n    existingWatcherAndJiraIDs = \"\"\r\n    idsToAddPermission = \"\"\r\n    idsDoesnotExistInJira = \"\"\r\n    idsAddedToJiraList = \"\"\r\n\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n\r\n        smaxDataU = {}\r\n        smaxDataU['entities'] = []\r\n        smaxDataU['operation'] = \"UPDATE\"\r\n\r\n        if len(smaxAndJiraIDs.split(\"♪\")) > 0:\r\n            result = \"True\"\r\n            \r\n            for issues in smaxAndJiraIDs.split(\"♪\"):\r\n                smaxticketID = issues.split(\"♫\")[0]\r\n                jiraticketID = issues.split(\"♫\")[1]\r\n                             \r\n                response = requests.get(smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Request/\"+smaxticketID +\"/associations/FollowedByUsers?layout=Id,Upn\", \r\n                                 auth=basicAuthCredentials, headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n                if response.status_code == 200:\r\n\r\n                    entityJsonArray = json.loads(response.content)\r\n                    if entityJsonArray[\"meta\"][\"total_count\"] != 0:\r\n                        for entity in entityJsonArray[\"entities\"]:\r\n                            try:\r\n                                upn = str(entity[\"properties\"][\"Upn\"]).split(\"@\")\r\n                                jiraWatchersList += upn[0]+ \"♫\" + jiraticketID + \"♪\"                           \r\n                            except KeyError:     \r\n                                print(\"The JiraIssue ID does not exist!\")                \r\n                    else:     \r\n                        message = \"No recent updated watchers in SMAX\"\r\n                        result = \"True\" \r\n                             \r\n                else:\r\n                    msg = \"Unsupported response from the Provider:\" + str(response.content) +\", Status Code: \"+ str(response.status_code)\r\n                    raise Exception(msg)\r\n\r\n            #print(jiraWatchersList)\r\n            if len(jiraWatchersList) > 0:\r\n                jiraWatchersList = jiraWatchersList[:-1]\r\n                fetchDoesnotExistingWatcherID = fetchDoesnotExistingWatcher(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jiraWatchersList, conn_timeout)\r\n                message = fetchDoesnotExistingWatcherID[\"message\"]\r\n                result = fetchDoesnotExistingWatcherID[\"result\"]\r\n                errorType = fetchDoesnotExistingWatcherID[\"errorType\"]\r\n                errorMessage = fetchDoesnotExistingWatcherID[\"errorMessage\"]\r\n                errorSeverity = fetchDoesnotExistingWatcherID[\"errorSeverity\"]\r\n                errorProvider = fetchDoesnotExistingWatcherID[\"errorProvider\"]\r\n                newWatcherAndJiraIDs = fetchDoesnotExistingWatcherID[\"newWatcherAndJiraIDs\"]\r\n                existingWatcherAndJiraIDs = fetchDoesnotExistingWatcherID[\"existingWatcherAndJiraIDs\"]\r\n                idsToAddPermission = fetchDoesnotExistingWatcherID[\"idsToAddPermission\"]\r\n                idsDoesnotExistInJira = fetchDoesnotExistingWatcherID[\"idsDoesnotExistInJira\"]\r\n                idsAddedToJiraList = fetchDoesnotExistingWatcherID[\"idsAddedToJiraList\"]\r\n            else:\r\n                message = \"No recent updated watchers in SMAX\"\r\n                result = \"True\" \r\n        else:\r\n            message = \"No recent updated watchers in SMAX\"\r\n            result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"jiraWatchersList\": jiraWatchersList, \"newWatcherAndJiraIDs\": newWatcherAndJiraIDs,\"existingWatcherAndJiraIDs\": existingWatcherAndJiraIDs, \"idsToAddPermission\":idsToAddPermission, \"idsDoesnotExistInJira\":idsDoesnotExistInJira, \"idsAddedToJiraList\":idsAddedToJiraList, \"errorType\": errorType,\"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\n\r\ndef fetchDoesnotExistingWatcher(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jiraWatchersList, conn_timeout):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    existingWatcherAndJiraIDs = \"\"\r\n    newWatcherAndJiraIDs = \"\"\r\n    idsToAddPermission = \"\"\r\n    idsDoesnotExistInJira = \"\"\r\n    idsAddedToJiraList = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        for issues in jiraWatchersList.split(\"♪\"):\r\n\r\n            watcherID = issues.split(\"♫\")[0]\r\n            jiraticketID = issues.split(\"♫\")[1]\r\n\r\n            reqUrl = \"{0}rest/api/2/issue/{1}/watchers\".format(MarketPlace_jiraIssueURL,jiraticketID)                                                                \r\n            basicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n            headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n            response = requests.get(reqUrl, auth=basicAuthCredentials, headers=headers, timeout=int(conn_timeout))\r\n            \r\n            if response.status_code == 200:\r\n\r\n                entityJsonArray = json.loads(response.content)\r\n                json_string = json.dumps(entityJsonArray)\r\n\r\n                if entityJsonArray[\"watchCount\"] != 0:\r\n                    if json_string.find(watcherID) != -1:\r\n                        existingWatcherAndJiraIDs += watcherID + \"♫\" + jiraticketID + \"♪\"\r\n                    else:                        \r\n                        newWatcherAndJiraIDs += watcherID + \"♫\" + jiraticketID + \"♪\"  \r\n            else:\r\n                msg = \"Unsupported response from the Provider: \" + str(response.content)\r\n                raise Exception(msg)\r\n\r\n        if len(newWatcherAndJiraIDs) > 0:\r\n            newWatcherAndJiraIDs = newWatcherAndJiraIDs[:-1]\r\n            existingWatcherAndJiraIDs = existingWatcherAndJiraIDs[:-1]\r\n            postWatcherIDFromSmaxToJira = postWatcherFromSmaxToJira(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, newWatcherAndJiraIDs)\r\n            message = postWatcherIDFromSmaxToJira[\"message\"]\r\n            result = postWatcherIDFromSmaxToJira[\"result\"]   \r\n            errorType = postWatcherIDFromSmaxToJira[\"errorType\"]\r\n            errorMessage = postWatcherIDFromSmaxToJira[\"errorMessage\"]\r\n            errorSeverity = postWatcherIDFromSmaxToJira[\"errorSeverity\"]\r\n            errorProvider = postWatcherIDFromSmaxToJira[\"errorProvider\"]\r\n            idsToAddPermission = postWatcherIDFromSmaxToJira[\"idsToAddPermission\"]\r\n            idsDoesnotExistInJira = postWatcherIDFromSmaxToJira[\"idsDoesnotExistInJira\"]\r\n            idsAddedToJiraList = postWatcherIDFromSmaxToJira[\"idsAddedToJiraList\"]\r\n        else:\r\n            message = \"No watchers to add in JIRA\"\r\n            result = \"True\"       \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n\r\n    return {\"result\": result, \"message\": message, \"newWatcherAndJiraIDs\": newWatcherAndJiraIDs, \"existingWatcherAndJiraIDs\": existingWatcherAndJiraIDs, \"idsToAddPermission\":idsToAddPermission, \"idsDoesnotExistInJira\":idsDoesnotExistInJira, \"idsAddedToJiraList\":idsAddedToJiraList, \"errorType\": errorType,\"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n\r\ndef postWatcherFromSmaxToJira(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, newWatcherAndJiraIDs):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    idsToAddPermission = \"\"\r\n    idsDoesnotExistInJira = \"\"\r\n    addedWatchersList = \"\"\r\n    idsAddedToJiraList = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        for issues in newWatcherAndJiraIDs.split(\"♪\"):\r\n\r\n            watcherID = issues.split(\"♫\")[0]\r\n            jiraticketID = issues.split(\"♫\")[1]\r\n            \r\n            reqUrl = \"{0}rest/api/2/issue/{1}/watchers\".format(MarketPlace_jiraIssueURL,jiraticketID)                                                                \r\n            basicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n            headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n            response = requests.post(reqUrl, auth=basicAuthCredentials, headers=headers,data='\"'+watcherID+'\"')\r\n                    \r\n            if response.status_code == 204:\r\n                idsAddedToJiraList += watcherID + \"♫\" + jiraticketID + \"♪\"\r\n                message = \"Watcher Created in Jira\"\r\n                result = \"True\" \r\n            elif response.status_code == 401:\r\n                responseData = json.loads(response.content)\r\n                json_string = json.dumps(responseData)\r\n                \r\n                if json_string.find(\"does not have permission\") != -1:                        \r\n                    result = \"True\"\r\n                    message = \"Watchers requires permissions\"    \r\n                    idsToAddPermission += watcherID + \",\" + jiraticketID + '||'\r\n                else:\r\n                    msg = response.status_code + \": \"+ str(response.content) +\", Status Code: \"+ str(response.status_code)\r\n                    raise Exception(msg)\r\n                    \r\n            elif response.status_code == 400:\r\n                idsDoesnotExistInJira += watcherID + \"♫\" + jiraticketID + \"♪\" \r\n            else:\r\n                msg = \"Unsupported response from the Provider: \"  + str(response.content)\r\n                raise Exception(msg)\r\n\r\n        if len(idsDoesnotExistInJira) > 0:\r\n            msg = \"Watcher \"+watcherID+\" does not exist in Jira, Status Code:\"+  str(response.status_code) + \": \" + str(response.content)\r\n            raise Exception(msg)\r\n             \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n\r\n    return {\"result\": result, \"message\": message, \"idsToAddPermission\":idsToAddPermission, \"idsDoesnotExistInJira\":idsDoesnotExistInJira, \"idsAddedToJiraList\":idsAddedToJiraList, \"errorType\": errorType,\"errorSeverity\": errorSeverity,\"errorProvider\":errorProvider,\"errorMessage\":errorMessage}\r\n    \r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data = {}\r\n        data['Login'] = user\r\n        data['Password'] = password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - newWatcherAndJiraIDs
    - jiraWatchersList
    - existingWatcherAndJiraIDs
    - idsDoesnotExistInJira
    - idsToAddPermission
    - idsAddedToJiraList
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
