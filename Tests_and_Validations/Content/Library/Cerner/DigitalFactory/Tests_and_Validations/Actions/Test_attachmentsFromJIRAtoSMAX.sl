namespace: Cerner.DigitalFactory.Tests_and_Validations.Actions
operation:
  name: Test_attachmentsFromJIRAtoSMAX
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - projectNames: "${get_sp('MarketPlace.jiraProjects')}"
    - creator: "${get_sp('MarketPlace.jiraIssueCreator')}"
    - lastUpdate: "${get_sp('MarketPlace.lastUpdateTime')}"
    - smax_FieldID
    - smax_authToken
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Jira and Smax\r\n#   Author: Ashwini Shalke (ashwini.shalke@cerner.com), MicroFocus International\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  conn_timeout\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorMessage\r\n#       - errorProvider\r\n#       - errorSeverity\r\n# # this operation will fetch all the attachments from JIRA to SMAX\r\n###############################################################\r\n\r\nimport sys, os\r\nimport subprocess\r\nimport time\r\nimport datetime\r\nimport requests\r\nimport http.client\r\nfrom datetime import datetime\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, smax_authToken, smax_tenantId,\r\n            smax_baseurl, projectNames, creator, lastUpdate, smax_FieldID, conn_timeout):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = ''\r\n    errorMessage = \"\"\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    data = {}\r\n    jiraAndSMaxIDs = \"\"\r\n    #lastUpdate = \"2022-04-08 09:40\"\r\n\r\n    try:\r\n        # requirement external modules\r\n        install(\"requests\")\r\n        install(\"time\")\r\n        install(\"pytz\")\r\n        install(\"markdown\")\r\n\r\n        import requests\r\n        import json\r\n\r\n        index = 0\r\n        ids = projectNames.split(\"♪\")\r\n        inputString = \"\"\r\n\r\n        for id in ids:\r\n            reqUrl = '{0}rest/api/2/search'.format(MarketPlace_jiraIssueURL)\r\n            data = {}\r\n            data[\"jql\"] = \"project='{0}' AND updated >'{1}' AND creator='{2}'\".format(id, lastUpdate, creator)\r\n            data[\"startAt\"] = \"0\"\r\n            data[\"maxResults\"] = \"500\"\r\n            data[\"fields\"] = [smax_FieldID, \"id\", \"project\", \"attachment\"]\r\n\r\n            inputString = json.dumps(data)\r\n\r\n            jiraBasicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n            headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n\r\n            response = requests.post(reqUrl, auth=jiraBasicAuthCredentials, headers=headers, data=inputString,\r\n                                     timeout=int(conn_timeout))\r\n\r\n            if response.status_code == 200:\r\n                jiraAndSMaxIDs = \"\"\r\n                data = json.loads(response.content)\r\n                arr = data[\"issues\"]\r\n                if data[\"total\"] == 0 or not arr:\r\n                    message = \"No recent updated in JIRA Issues\"\r\n                    result = \"True\"\r\n                else:\r\n                    for issue in arr:\r\n                        if issue[\"fields\"][\"project\"][\"key\"] == id:\r\n                            # fetching JIRA ID snd SMAX ID\r\n                            if issue[\"fields\"][smax_FieldID]:\r\n                                jiraAndSMaxIDs += str(issue[\"id\"]) + \"♫\" + str(issue[\"fields\"][smax_FieldID]) + \"♪\"\r\n\r\n            else:\r\n                msg = \"Unsupported response from Provider : \" + str(response.content)\r\n                raise Exception(msg)\r\n\r\n            if len(jiraAndSMaxIDs) > 0:\r\n                jiraAndSMaxIDs = jiraAndSMaxIDs[:-1]\r\n                result = \"True\"\r\n\r\n                # calling getAttachmentsFromJIRA to fetch all the attachments from JIRA based on jiraAndSMaxIDs\r\n                getlastestUpdatedAttachmentData = getAttachmentsFromJIRA(MarketPlace_jiraIssueURL,\r\n                                                                         jiraBasicAuthCredentials, jiraAndSMaxIDs,\r\n                                                                         lastUpdate, creator, smax_authToken,\r\n                                                                         smax_tenantId, smax_baseurl,\r\n                                                                         smax_FieldID)\r\n                result = getlastestUpdatedAttachmentData[\"result\"]\r\n                message = getlastestUpdatedAttachmentData[\"message\"]\r\n            else:\r\n                result = \"True\"\r\n                message = \"No more updated issues in JIRA\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = str(message)\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"JIRA\"\r\n            \r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# fetch all attachment from JIRA based on jiraAndSMaxIDs\r\ndef getAttachmentsFromJIRA(MarketPlace_jiraIssueURL, jiraBasicAuthCredentials, jiraAndSMaxIDs,\r\n                           lastUpdate, creator, smax_authToken, smax_tenantId, smax_baseurl, smax_FieldID):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    count = 0\r\n    jiraticketID = \"\"\r\n    smaxticketID = \"\"\r\n    errorType = ''\r\n    errorMessage = \"\"\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    data = {}\r\n    arr = []\r\n    response = \"\"\r\n    smaxAttachResponse = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        if len(jiraAndSMaxIDs.split(\"♪\")) > 0:\r\n            result = \"True\"\r\n\r\n            for issues in jiraAndSMaxIDs.split(\"♪\"):\r\n                jiraticketID = str(issues.split(\"♫\")[0])\r\n                smaxticketID = str(issues.split(\"♫\")[1])\r\n                smaxAttachResponse = \"\"\r\n\r\n                reqUrl = '{0}rest/api/2/search'.format(MarketPlace_jiraIssueURL)\r\n                data = {}\r\n                data[\"jql\"] = \"issue={0} AND updated >'{1}'\".format(jiraticketID, lastUpdate)\r\n                data[\"startAt\"] = \"0\"\r\n                data[\"maxResults\"] = \"500\"\r\n                data[\"fields\"] = [\"attachment\", smax_FieldID]\r\n                inputString = json.dumps(data)\r\n\r\n                headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n                response = requests.post(reqUrl, auth=jiraBasicAuthCredentials, headers=headers, data=inputString)\r\n\r\n                if response.status_code == 200:\r\n                    responseData = {}\r\n                    responseData = response.json()\r\n                    arr = responseData[\"issues\"][0][\"fields\"][\"attachment\"]\r\n\r\n                    if arr != []:\r\n                        for i in arr:\r\n                            # attachments details\r\n                            fileName = i[\"filename\"]\r\n                            fileID = i[\"id\"]\r\n                            attachmentCreatedTime = i[\"created\"]\r\n\r\n                            from datetime import datetime\r\n                            TimeValue = ((attachmentCreatedTime.split('T'))[1].split(\".\"))[0]\r\n                            size = len(TimeValue)\r\n                            TimeValueHM = TimeValue[:size - 3]\r\n                            DateValue = ((attachmentCreatedTime.split('T'))[0])\r\n                            date_string = str(DateValue) + \" \" + str(TimeValueHM)\r\n                            attachUpdateDateTime = datetime.fromisoformat(date_string)\r\n                            lastUpdateDateTime = datetime.fromisoformat(lastUpdate)\r\n\r\n                            if (attachUpdateDateTime >= lastUpdateDateTime):\r\n                                if fileName != \"\":\r\n                                    token = \"Attachment Fetched!\"\r\n                                    message = responseData\r\n                                    result = \"True\"\r\n\r\n                                    downloadFromJIRA = downloadFileFromJIRA(MarketPlace_jiraIssueURL,\r\n                                                                            jiraBasicAuthCredentials, smax_baseurl,\r\n                                                                            smax_authToken,\r\n                                                                            smax_tenantId, fileID, fileName,\r\n                                                                            smaxticketID)\r\n                                    message = downloadFromJIRA[\"message\"]\r\n                                    result = downloadFromJIRA[\"result\"]\r\n                                    smaxAttachResponse += downloadFromJIRA[\"smaxAttachmentResponse\"]\r\n                                else:\r\n                                    message = \"No recent attachment added In updated issues in SMAX\"\r\n                                    result = \"True\"\r\n                            else:\r\n                                message = \"No recent attachment to update\"\r\n                                result = \"True\"\r\n\r\n                        if len(smaxAttachResponse.split(\"♪\")) > 0:\r\n                            # calling fetchAttachmentsFromSMAX to fetch all attachments based on smaxticketID\r\n                            fetchAttachmentFromSMAX = fetchAttachmentsFromSMAX(smax_authToken, smax_tenantId,\r\n                                                                               smax_baseurl, smaxticketID)\r\n                            attachmentDetailsFromSMAX = fetchAttachmentFromSMAX[\"attachmentDetails\"]\r\n\r\n                            # concating the response from downloadFileFromJIRA and fetchAttachmentsFromSMAX\r\n                            totalSmaxAttachResponse = smaxAttachResponse + attachmentDetailsFromSMAX\r\n\r\n                            # calling postAttachmentsToSMAX to post attachment to smaxticketID\r\n                            postAttachmentToSMAX = postAttachmentsToSMAX(smax_authToken, smax_tenantId,\r\n                                                                         smax_baseurl, smaxticketID,\r\n                                                                         totalSmaxAttachResponse)\r\n                            result = postAttachmentToSMAX[\"result\"]\r\n                            message = postAttachmentToSMAX[\"message\"]\r\n                    else:\r\n                        message = \"No recent updated Issues In SMAX!\"\r\n                        result = \"True\"\r\n                else:\r\n                    msg = \"Unsupported response from Provider : \" + str(message)\r\n                    raise Exception(msg)\r\n                \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Get JIRA Attachments :- \" + str(message)\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        \r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# download file from JIRA to c:/temp/\r\ndef downloadFileFromJIRA(MarketPlace_jiraIssueURL, jiraBasicAuthCredentials, smax_baseurl,\r\n                         smax_authToken, smax_tenantId, fileID, fileName, smaxticketID):\r\n    import platform\r\n    import os\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    message = \"\"\r\n    smaxAttachmentResponse = \"\"\r\n    downloadFilePath = \"\"\r\n    result = \"\"\r\n    attachFromSMAX = \"\"\r\n    jirafileID_Exists = 0\r\n    smaxfileID_Exists = 0\r\n    \r\n    try:\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        url = \"{0}secure/attachment/{1}/{2}\".format(MarketPlace_jiraIssueURL, fileID, fileName)\r\n\r\n        response = requests.get(url, auth=jiraBasicAuthCredentials, headers=authHeaders)\r\n        if response.status_code == 200:\r\n            data = response.content\r\n            my_os = platform.system()\r\n            jiraFileName = fileID + \"_\" + fileName\r\n\r\n            fetchAttachmentFromSMAX = fetchAttachmentsFromSMAX(smax_authToken, smax_tenantId, smax_baseurl, smaxticketID)\r\n            attachmentDetailsFromSMAX = fetchAttachmentFromSMAX[\"attachmentDetails\"]\r\n\r\n            if attachmentDetailsFromSMAX:\r\n                attachmentDetailsFromSMAX = attachmentDetailsFromSMAX[:-1]\r\n\r\n                for attach in attachmentDetailsFromSMAX.split(\"♪\"):\r\n                    attachId = attach.split(\"♫\")[0]\r\n                    attachName = attach.split(\"♫\")[1]\r\n                    attachFromSMAX += attachId[:9] + \"_\" + attachName + \"♪\"\r\n\r\n                find = fileName.find(\"_\")\r\n                if find > 0:\r\n                    smaxfileID = fileName[:find]\r\n                    smaxfileID_Exists = attachFromSMAX.find(smaxfileID)\r\n                else:\r\n                    jirafileID_Exists = attachFromSMAX.find(fileID)\r\n\r\n                if fileName not in attachFromSMAX:\r\n                    downloadFilePath = downloadFileInDrive(jiraFileName, data)\r\n                elif smaxfileID_Exists < 0:\r\n                    downloadFilePath = downloadFileInDrive(jiraFileName, data)\r\n                elif jirafileID_Exists < 0:\r\n                    downloadFilePath = downloadFileInDrive(jiraFileName, data)\r\n            else:\r\n                downloadFilePath = downloadFileInDrive(jiraFileName, data)\r\n\r\n            if downloadFilePath != \"\":\r\n                responseFromuploadFileToSMAX = uploadFileToSMAX(smax_baseurl, smax_authToken,\r\n                                                            smax_tenantId, downloadFilePath, jiraFileName)\r\n\r\n                smaxAttachmentResponse = responseFromuploadFileToSMAX[\"guid\"] + \"♫\" + responseFromuploadFileToSMAX[\r\n                    \"fileName\"] + \"♪\"\r\n                result = \"True\"\r\n                message = jiraFileName + \"downloaded in C:/temp folder\"\r\n\r\n            if os.path.exists(downloadFilePath):\r\n                os.remove(downloadFilePath)\r\n        else:\r\n            result = \"False\"\r\n            msg = \"Unsupported response from Provider : \" + str(message)\r\n            raise Exception(msg)\r\n            \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Get JIRA Attachments :- \" + str(message)\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        \r\n    return {\"result\": result, \"message\": message, \"smaxAttachmentResponse\": smaxAttachmentResponse,\r\n            \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# upload file to SMAX Environment\r\ndef uploadFileToSMAX(smax_baseurl, smax_authToken, smax_tenantId, filePath, fileName):\r\n    import requests\r\n    import json\r\n    import mimetypes\r\n    result = ''\r\n    message = \"\"\r\n    guid = ''\r\n    errorType = ''\r\n    errorMessage = \"\"\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n\r\n    try:\r\n        url = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ces/attachment\"\r\n        fileType = mimetypes.guess_type(filePath)[0] or 'application/octet-stream'\r\n        payload = {}\r\n        files = [('files[]', (fileName, open(filePath, 'rb'), fileType))]\r\n\r\n        headers = {\r\n            'Cookie': 'LWSSO_COOKIE_KEY=' + smax_authToken\r\n        }\r\n        response = requests.request(\"POST\", url, headers=headers, data=payload, files=files)\r\n\r\n        if response.status_code == 200:\r\n            content = json.loads(response.content)\r\n            guid = content[\"guid\"]  ##[\"guid\"]\r\n            fileName = content[\"name\"]  ##[\"name\"]\r\n            result = 'True'\r\n            message = 'Successfully uploaded the attachment file: ' + str(fileName)\r\n        else:\r\n            result = \"False\"\r\n            msg = \"Upload file to SMAX :- Failed to upload the attachment file:\" + fileName + str(response.content)\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Upload file to SMAX :- \" + str(message)\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        \r\n    return {\"result\": result, \"message\": message, \"guid\": guid, \"fileName\": fileName, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# fetch the existing attachment based on SMAXTicketID\r\ndef fetchAttachmentsFromSMAX(smax_authToken, smax_tenantId, smax_baseurl, smaxTicketID):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    count = 0\r\n    token = \"\"\r\n    errorType = ''\r\n    errorMessage = \"\"\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    attachmentDetails = ''\r\n    file = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json',\r\n                       'User-Agent': 'Apache-HttpClient/4.4.1', }\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n        reqUrl = '{0}/rest/{1}/ems/Request?layout=RequestAttachments,Id&filter=Id={2}'.format(smax_baseurl,\r\n                                                                                              smax_tenantId,\r\n                                                                                              smaxTicketID)\r\n        response = requests.get(reqUrl, headers=authHeaders, cookies=cookies)\r\n\r\n        if (response.status_code == 200):\r\n            entityJSONArray = json.loads(response.content)\r\n            if entityJSONArray[\"entities\"] == []:\r\n                message = \"No attachments in SMAX ID :\" + str(smaxTicketID)\r\n                result = \"True\"\r\n            else:\r\n                for entity in entityJSONArray[\"entities\"]:\r\n                    attachmentArray = entity[\"properties\"][\"RequestAttachments\"]\r\n                    attachmentJSONArray = json.loads(attachmentArray)\r\n                    for file in attachmentJSONArray[\"complexTypeProperties\"]:\r\n                        attachmentDetails += file[\"properties\"][\"id\"] + \"♫\" + file[\"properties\"][\"file_name\"] + \"♪\"\r\n                result = \"True\"\r\n                message = \"Attachments found in SMAX ID :\" + str(smaxTicketID)\r\n        else:\r\n            result = \"False\"\r\n            msg = \"Fetch Attachments From SMAX :- Unable to fetch the attachments from SMAX\"\r\n            raise Exception(msg)\r\n            \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Fetch Attachments From SMAX :- \" + str(message)\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"attachmentDetails\": attachmentDetails}\r\n\r\n\r\n# post attachments to SMAXTicketID\r\ndef postAttachmentsToSMAX(smax_authToken, smax_tenantId, smax_baseurl, smaxticketID, smaxAttachResponse):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    count = 0\r\n    token = \"\"\r\n    errorType = ''\r\n    errorMessage = \"\"\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n        complexPropertiesData = {}\r\n        smaxAttachResponse = smaxAttachResponse[:-1]\r\n\r\n        if len(smaxAttachResponse.split(\"♪\")) > 0:\r\n            complexPropertiesData[\"complexTypeProperties\"] = [0] * len(smaxAttachResponse.split(\"♪\"))\r\n            i = 0\r\n            for issues in smaxAttachResponse.split(\"♪\"):\r\n                complexPropertiesData[\"complexTypeProperties\"][i] = {}\r\n                complexPropertiesData[\"complexTypeProperties\"][i][\"properties\"] = {}\r\n                complexPropertiesData[\"complexTypeProperties\"][i][\"properties\"][\"id\"] = issues.split(\"♫\")[0]\r\n                complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"file_name\"] = issues.split(\"♫\")[1]\r\n                i += 1\r\n            complexPropertiesData_toString = str(complexPropertiesData)\r\n            RequestAttachments = complexPropertiesData_toString.replace(\"'\", '\"')\r\n\r\n        smaxDataU = {}\r\n        smaxDataU['entities'] = []\r\n        smaxDataU['operation'] = \"UPDATE\"\r\n        smaxDataU['entities'] = [0]\r\n        smaxDataU['entities'][0] = {}\r\n        smaxDataU['entities'][0][\"entity_type\"] = \"Request\"\r\n        smaxDataU['entities'][0][\"properties\"] = {}\r\n        smaxDataU['entities'][0][\"properties\"][\"Id\"] = smaxticketID\r\n        smaxDataU['entities'][0][\"properties\"][\"RequestAttachments\"] = RequestAttachments\r\n\r\n        reqUrl = '{0}/rest/{1}/ems/bulk'.format(smax_baseurl, smax_tenantId)\r\n        response = requests.post(reqUrl, headers=authHeaders, cookies=cookies, json=smaxDataU)\r\n        message = response.text\r\n\r\n        if response.status_code == 200:\r\n            message = \"Attachment Added to!\" + str(smaxticketID)\r\n            result = \"True\"\r\n        else:\r\n            result = \"False\"\r\n            msg = \"Post Attachments To SMAX : Attachment not updated in SMAX!\"\r\n            raise Exception(msg)\r\n            \r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Post Attachments To SMAX :-\" + str(message)\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        \r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef downloadFileInDrive(jiraFileName, data):\r\n    import os\r\n    import platform\r\n\r\n    my_os = platform.system()\r\n    downloadFilePath = \"\"\r\n\r\n    if (my_os == \"Windows\"):\r\n        downloadFilePath = 'c:\\\\temp\\\\' + jiraFileName\r\n        open(downloadFilePath, 'wb').write(data)\r\n    else:\r\n        downloadFilePath = '\\\\tmp\\\\' + jiraFileName\r\n        open(downloadFilePath, 'wb').write(data)\r\n\r\n    return downloadFilePath"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
