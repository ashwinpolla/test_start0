namespace: Cerner.DigitalFactory.Tests_and_Validations.Actions
operation:
  name: Test_attachmentsFromSMAXtoJIRA
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - projectNames: "${get_sp('MarketPlace.jiraProjects')}"
    - creator: "${get_sp('MarketPlace.jiraIssueCreator')}"
    - lastUpdate: "${get_sp('MarketPlace.lastUpdateTime')}"
    - smax_FieldID
    - smax_authToken
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Jira and Smax\r\n#   Author: Ashwini Shalke (ashwini.shalke@cerner.com), MicroFocus International\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  watchersList\r\n#       -  jiraticketID\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorMessage\r\n#       - errorProvider\r\n#       - errorSeverity\r\n# this operation will fetch all the attachments from SMAX to JIRA\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\nimport time\r\nimport datetime\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, smax_authToken, smax_tenantId,\r\n            smax_baseurl, projectNames, creator, lastUpdate, conn_timeout,smax_FieldID):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    smaxDataU = {}\r\n    smaxAndJiraIDs = \"\"\r\n    token = \"\"\r\n\r\n    try:\r\n        # requirement external modules\r\n        install(\"requests\")\r\n\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n        smaxDataU = {}\r\n        smaxDataU['entities'] = []\r\n        smaxDataU['operation'] = \"UPDATE\"\r\n\r\n        response = requests.get(\r\n            smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Request?layout=Id,DisplayLabel,JiraIssueId_c&filter=LastUpdateTime>\" + lastUpdate\r\n            , headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n\r\n        if response.status_code == 200:\r\n            entityJsonArray = json.loads(response.content)\r\n            if entityJsonArray[\"entities\"] == []:\r\n                message = \"No recent updated issues in SMAX\"\r\n                result = \"True\"\r\n            else:\r\n                for entity in entityJsonArray[\"entities\"]:\r\n                    jira_issue_id = entity[\"properties\"].get(\"JiraIssueId_c\")\r\n                    if jira_issue_id:\r\n                        smaxAndJiraIDs += entity[\"properties\"][\"Id\"] + \"♫\" + entity[\"properties\"][\"JiraIssueId_c\"] + \"♪\"\r\n\r\n                if len(smaxAndJiraIDs) > 0:\r\n                    smaxAndJiraIDs = smaxAndJiraIDs[:-1]\r\n                    result = \"True\"\r\n\r\n                    # fecthing all the latest attachment from SMAX\r\n                    getlastestAttachmentsFROMSMAX = getAttachmentsFROMSMAX(smax_baseurl, smax_tenantId, smax_authToken,\r\n                                                                           smaxAndJiraIDs, MarketPlace_jiraIssueURL,\r\n                                                                           MarketPlace_jiraUser,\r\n                                                                           MarketPlace_jiraPassword,\r\n                                                                           lastUpdate,creator,smax_FieldID)\r\n                    result = getlastestAttachmentsFROMSMAX[\"result\"]\r\n                    message = getlastestAttachmentsFROMSMAX[\"message\"]\r\n\r\n                    if result == \"False \":\r\n                        msg = getlastestAttachmentsFROMSMAX[\"errorMessage\"]\r\n                        errorProvider = getlastestAttachmentsFROMSMAX[\"errorProvider\"]\r\n                        raise Exception(msg)\r\n                else:\r\n                    result = \"True\"\r\n                    message = \"No recent updated issues in SMAX\"\r\n        else:\r\n            msg = \"Unsupported response from Provider : \" + str(response.content)\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef getAttachmentsFROMSMAX(smax_baseurl, smax_tenantId, smax_authToken, smaxAndJiraIDs, MarketPlace_jiraIssueURL,\r\n                           MarketPlace_jiraUser, MarketPlace_jiraPassword,\r\n                           lastUpdate, creator,smax_FieldID):\r\n    message = \"\"\r\n    result = \"\"\r\n    requestAttachURL = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n\r\n    try:\r\n        import json\r\n        import requests\r\n        attachmentLinkResponse = {}\r\n        attachmentList = []\r\n        responseMeta = {}\r\n        attachmentCount = 0\r\n        jiraticketID = \"\"\r\n\r\n        if len(smaxAndJiraIDs.split(\"♪\")) > 0:\r\n            result = \"True\"\r\n\r\n            for issues in smaxAndJiraIDs.split(\"♪\"):\r\n                smaxticketID = str(issues.split(\"♫\")[0])\r\n                jiraticketID = str(issues.split(\"♫\")[1])\r\n                smaxAttachResponse = \"\"\r\n\r\n                # create smax URL to get attachments for a Request\r\n                requestAttachURL = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/Request/\" + smaxticketID + \"?layout=RequestAttachments\"\r\n\r\n            # basicAuthCredentials = (smax_user, smax_password)\r\n            authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n            # request to pull the attachment links\r\n            response = requests.get(requestAttachURL, headers=authHeaders, cookies=cookies)\r\n\r\n            if response.status_code == 200:\r\n                responseMeta = json.loads(response.text)\r\n                attachmentCount = len(responseMeta[\"entities\"])\r\n                if responseMeta[\"meta\"][\"completion_status\"] == \"OK\":\r\n                    if attachmentCount > 0:\r\n                        attachmentLinkResponse = json.loads(response.content)\r\n\r\n                        # extract list of attached file attributes\r\n                        if \"RequestAttachments\" in attachmentLinkResponse[\"entities\"][0][\"properties\"]:\r\n                            attachmentJSONString = attachmentLinkResponse[\"entities\"][0][\"properties\"][\r\n                                \"RequestAttachments\"]\r\n                            attachmentJSONList = json.loads(attachmentJSONString)\r\n                            attachmentList = attachmentJSONList[\"complexTypeProperties\"]\r\n                            attachmentLastUpdateTime = attachmentLinkResponse[\"entities\"][0][\"properties\"][\r\n                                \"LastUpdateTime\"]\r\n\r\n                            # loop over json array containing properties of file\r\n                            if attachmentLastUpdateTime > int(lastUpdate):\r\n                                fileProperties = {}\r\n                                attachmentCount = 0\r\n                                if len(attachmentList) > 0:\r\n                                    for fileProperties in attachmentList:\r\n                                        if \"file_name\" in fileProperties[\"properties\"]:\r\n                                            fileId = fileProperties[\"properties\"][\"id\"]\r\n                                            fileName = fileProperties[\"properties\"][\"file_name\"]\r\n                                           \r\n\r\n                                            # create URL of attached file to download\r\n                                            attachURL = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ces/attachment/\" + fileId\r\n\r\n                                            # download attached file\r\n                                            response = requests.get(attachURL, headers=authHeaders,\r\n                                                                    cookies=cookies)\r\n\r\n                                            # if response is successful\r\n                                            if response.status_code == 200:\r\n                                                data = response.content\r\n                                                # upload file to Jira\r\n                                                uploadr = uploadFileToJira(MarketPlace_jiraIssueURL,\r\n                                                                           MarketPlace_jiraUser,\r\n                                                                           MarketPlace_jiraPassword, jiraticketID, data,\r\n                                                                           fileName, fileId, smax_authToken, creator,smax_FieldID,smax_tenantId,smax_baseurl)\r\n\r\n                                                if uploadr[\"result\"] == \"True\":\r\n                                                    result = \"True\"\r\n                                                    message = uploadr[\"message\"]\r\n                                                    attachmentCount += 1\r\n                                                else:\r\n                                                    result = \"False\"\r\n                                                    msg = \"Issue Uploading File: \" + str(uploadr[\"errorMessage\"])\r\n                                                    raise Exception(msg)\r\n                                            else:\r\n                                                result = \"False\"\r\n                                                msg = \"Issue Downloading File: \" + str(response.text)\r\n                                                raise Exception(msg)\r\n                                        else:\r\n                                            if len(attachmentList) == 1:\r\n                                                result = \"True\"\r\n                                                message = \"No attachment to upload\"\r\n                                    if attachmentCount == 0:\r\n                                        result = 'True'\r\n                                        message = \"No attachment to upload\"\r\n                                else:\r\n                                    result = \"True\"\r\n                                    message = \"No attachment to upload\"\r\n                            else:\r\n                                message = \"No latest attachment found\"\r\n                                result = \"True\"\r\n                        else:\r\n                            result = \"True\"\r\n                            message = \"No attachment found\"\r\n                    else:\r\n                        result = \"True\"\r\n                        message = \"No attachment to upload\"\r\n                else:\r\n                    result = \"False\"\r\n                    msg = \"Failure in attachment http response: \"\r\n                    msg += str(responseMeta[\"meta\"][\"errorDetailsList\"])\r\n                    raise Exception(msg)\r\n\r\n            else:\r\n                result = \"False\"\r\n                msg = \"Could not retrieve attachment links from SMAX :\" + str(response.text)\r\n                raise Exception(msg)\r\n            if result == \"True\" and attachmentCount > 0:\r\n                message = str(attachmentCount) + \" \" + message\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorMessage\": errorMessage,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider}\r\n\r\n\r\ndef getAttachmentsFromJIRA(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jiraIssueId,\r\n                           creator, smax_authToken, smax_tenantId,\r\n                           smax_baseurl, smax_FieldID, newFileName):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    count = 0\r\n    errorType = ''\r\n    errorMessage = \"\"\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    data = {}\r\n    arr = []\r\n    response = \"\"\r\n    attachmentDetails = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        reqUrl = '{0}rest/api/2/search'.format(MarketPlace_jiraIssueURL)\r\n        data = {}\r\n        data[\"jql\"] = \"issue={0}\".format(jiraIssueId)\r\n        data[\"startAt\"] = \"0\"\r\n        data[\"maxResults\"] = \"500\"\r\n        data[\"fields\"] = [\"attachment\", smax_FieldID]\r\n        inputString = json.dumps(data)\r\n\r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n        headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n        response = requests.post(reqUrl, auth=basicAuthCredentials, headers=headers, data=inputString)\r\n\r\n        if response.status_code == 200:\r\n            responseData = {}\r\n            responseData = response.json()\r\n            arr = responseData[\"issues\"][0][\"fields\"][\"attachment\"]\r\n\r\n            if arr != []:\r\n                for i in arr:\r\n                    # attachments details\r\n                    fileName = i[\"filename\"]\r\n                    fileID = i[\"id\"]\r\n                    attachmentDetails += fileID + \"_\" + fileName + \"♪\"\r\n            else:\r\n                result = \"True\"\r\n                message = \"No attachments\"\r\n        else:\r\n            result = \"False\"\r\n            msg = \"Unsupported response from the Provider\" + + str(response.content)\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Get JIRA Attachments :- \" + str(message)\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n\r\n    return {\"result\": result, \"message\": message, \"smax_response\": token, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"attachmentDetails\": attachmentDetails}\r\n\r\n\r\ndef uploadFileToJira(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jiraticketID, data,\r\n                     fileName, fileId, smax_authToken, creator,smax_FieldID,smax_tenantId,smax_baseurl):\r\n    message = \"\"\r\n    result = \"False\"\r\n    token = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    attachmentsFromJIRA = \"\"\r\n    newFileName = \"\"\r\n    fileExists = \"\"\r\n    jirafileID_Exists = 0\r\n    smaxfileID_Exists = 0\r\n    jiraResponse = \"\"\r\n    no_file = False\r\n\r\n    try:\r\n        import requests\r\n        getAttachmentListFromJIRA = getAttachmentsFromJIRA(MarketPlace_jiraIssueURL, MarketPlace_jiraUser,\r\n                                                           MarketPlace_jiraPassword, jiraticketID,\r\n                                                           creator, smax_authToken, smax_tenantId,\r\n                                                           smax_baseurl, smax_FieldID, fileName)\r\n\r\n        attachmentsFromJIRA = getAttachmentListFromJIRA[\"attachmentDetails\"]\r\n        errorType = getAttachmentListFromJIRA[\"errorType\"]\r\n        errorMessage = getAttachmentListFromJIRA[\"errorMessage\"]\r\n        errorSeverity = getAttachmentListFromJIRA[\"errorSeverity\"]\r\n        errorProvider = getAttachmentListFromJIRA[\"errorProvider\"]\r\n        result = getAttachmentListFromJIRA[\"result\"]\r\n\r\n        smaxTag = fileId[:9]\r\n        newFileName = smaxTag + \"_\" + fileName\r\n        find = fileName.find(\"_\")\r\n\r\n        # checking the condition if JIRA attachment ID exists\r\n        if find > 0:\r\n            jirafileID = fileName[:find]\r\n            jirafileID_Exists = attachmentsFromJIRA.find(jirafileID)\r\n        else:\r\n            smaxfileID_Exists = attachmentsFromJIRA.find(smaxTag)\r\n\r\n        if fileName not in attachmentsFromJIRA:\r\n            no_file = True\r\n        elif jirafileID_Exists < 0:\r\n            no_file = True\r\n        elif smaxfileID_Exists < 0:\r\n            no_file = True\r\n        else:\r\n            result = \"True\"\r\n            message = \"Attachment already exists\"\r\n\r\n        if no_file:\r\n            basicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n            headers = {'X-Atlassian-Token': 'no-check'}\r\n            url = \"{0}rest/api/2/issue/{1}/attachments\".format(MarketPlace_jiraIssueURL, jiraticketID)\r\n            response = requests.post(url, files={'file': (newFileName, data)}, headers=headers,\r\n                                     auth=basicAuthCredentials)\r\n            message = response.text\r\n\r\n            if response.status_code == 200:\r\n                result = \"True\"\r\n                message = \"File(s) Attached Successfully\"\r\n            else:\r\n                result = \"False\"\r\n                msg = \"Unable to attach the file\" + str(response.content)\r\n                raise Exception(msg)\r\n        else:\r\n            result = \"True\"\r\n            message = \"Attachment already exists\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n\r\n    return {\"result\": result, \"message\": str(message), \"errorType\": errorType, \"errorMessage\": errorMessage,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
