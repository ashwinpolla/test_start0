########################################################################################################################
#!!
#! @input userIds: It should be like Associate ID1 JIra Issue ID1 || Associate ID2, JIra Issue ID2 ||
#!
#! @output user_group: Key Value Pair of User nd Group  separated by double  pipe "||"
#!!#
########################################################################################################################
namespace: Cerner.DigitalFactory.Common.SMAX.Operation
operation:
  name: getUserIdsGroupsToAddPermission
  inputs:
    - userIds:
        required: false
    - smax_url: "${get_sp('Cerner.DigitalFactory.SMAX.smaxURL')}"
    - smax_tenantid: "${get_sp('Cerner.DigitalFactory.SMAX.tenantID')}"
    - smax_token
    - contractor_AD_groups: "${get_sp('Cerner.DigitalFactory.contractor_AD_groups')}"
    - upn_domain: "${get_sp('Cerner.DigitalFactory.cerner_upn_domain')}"
    - previous_errorLogs:
        required: false
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for reading the Contractors Group from SMAX\r\n#   Operation: getUserIdsGroupsToAddPermission\r\n#   Author: Rakesh Sharma (rakesh.sharma@cerner.com) Cerner\r\n#   Created on: 05 May 2022\r\n#   Inputs:\r\n#       -  jiraErrorMessage\r\n#       -  watcherFieIdCustomId\r\n#       -  smax_url\r\n#       -  smax_tenantid\r\n#       -  smax_token\r\n#       -  contractor_AD_groups\r\n#       -  upn_domain\r\n#\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorMessage\r\n#       - user_group\r\n#       - errorLogs\r\n# Modified by Rakesh on 20 Oct 2022 for User permision issue if users are more than one\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"OOExec\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n\r\n# main function\r\ndef execute(userIds, smax_url, smax_tenantid, smax_token, contractor_AD_groups, upn_domain, previous_errorLogs):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorLogs = \"\"\r\n    user_group = \"\"\r\n    url = \"\"\r\n    no_user = ''\r\n    users =''\r\n    tmsg = ''\r\n\r\n    try:\r\n        import json\r\n        import requests\r\n\r\n        user_group_resp = getUserGroup(smax_url, smax_tenantid, smax_token, userIds, contractor_AD_groups, upn_domain)\r\n        if user_group_resp[\"result\"] == \"True\":\r\n            user_group = user_group_resp[\"user_group\"]\r\n\r\n            for user_tmp in userIds.split('||'):\r\n                user = user_tmp.split(',')[0].strip()\r\n                if user not in user_group:\r\n                    authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n                    cookies = {\"SMAX_AUTH_TOKEN\": smax_token}\r\n                    url = smax_url + \"/rest/\" + smax_tenantid + \"/ems/Person?layout=Id,Upn,DistinguishedName&filter=Upn='\" + user + \"@\" + upn_domain + \"'\"\r\n                    response = requests.get(url, headers=authHeaders, cookies=cookies)\r\n                    if response.status_code == 200:\r\n                        sdata = json.loads(response.text)\r\n                        if len(sdata[\"entities\"]) > 0:\r\n                            dn = sdata[\"entities\"][0][\"properties\"].get(\"DistinguishedName\")\r\n\r\n                            # if 'Consultant' not in sdata[\"entities\"][0][\"properties\"][\"DistinguishedName\"]:\r\n                            if dn and 'Consultant' not in dn:\r\n                                user_group += user + ',' + 'Cerner_Associate' + ',||'\r\n                            else:\r\n                                if user not in users:\r\n                                    users += user +','\r\n                                tmsg = \"UnAuthorised User :\" + users[:-1] + \": Check if Consultant, he must be in Appropriate AD Group of Contractors or Not Active User or Missing User Info in SMAX\"\r\n                                #raise Exception(msg)\r\n                        else:\r\n                            no_user +=  user + \"@\" + upn_domain + ','\r\n                    else:\r\n                        msg = \"Invalid response from Provider: \" + str(response.content)\r\n                        raise Exception(msg)\r\n                result = \"True\"\r\n                if no_user:\r\n                    message = 'No Associate record found from Marketplace: ' + no_user\r\n                else:\r\n                    message = \"User's Group information retrieved successfully\"\r\n        else:\r\n            msg = user_group_resp[\"message\"]\r\n            raise Exception(msg)\r\n        if tmsg:\r\n            raise Exception(tmsg)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorLogs = \"ProviderUrl,\" + url + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n            message) + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"user_group\": user_group,\r\n            \"errorLogs\": errorLogs + previous_errorLogs}\r\n\r\n\r\n# Get user Group of Contractor\r\ndef getUserGroup(smax_url, smax_tenantid, smax_token, userIds, contractor_AD_groups, upn_domain):\r\n    message = \"\"\r\n    result = \"False\"\r\n    user_group = \"\"\r\n    user_upn = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        groups_resp = getGroupIds(smax_url, smax_tenantid, smax_token, contractor_AD_groups)\r\n        for user in userIds.split('||'):\r\n\r\n            if user:\r\n                user_tmp = user.split(',')[0].strip()\r\n                if user_tmp:\r\n                    if user_upn:\r\n                        user_upn += ',' + user_tmp + ','\r\n                    else:\r\n                        user_upn += user_tmp + ','\r\n                user_upn = user_upn[:-1]\r\n\r\n        #groups_resp = getGroupIds(smax_url, smax_tenantid, smax_token, contractor_AD_groups)\r\n        upn_domain = '@' + upn_domain\r\n        user_upn_list = [sub + upn_domain for sub in user_upn.split(',')]\r\n        user_upn_list = str(user_upn_list).strip('[').strip(']')\r\n\r\n        if groups_resp[\"result\"] == \"True\":\r\n            groups_n_ids = groups_resp[\"group_n_id\"]\r\n            for group in groups_n_ids.split('||'):\r\n                if group:\r\n                    gName = group.split(',')[0]\r\n                    gId = group.split(',')[1]\r\n\r\n                    authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n                    cookies = {\"SMAX_AUTH_TOKEN\": smax_token}\r\n                    url = smax_url + \"/rest/\" + smax_tenantid + \"/ems/PersonGroup/\" + gId + \"/associations/PersonToGroup?layout=Id,Upn,Name&filter=Upn+in+(\" + user_upn_list + \")\"\r\n                    response = requests.get(url, headers=authHeaders, cookies=cookies)\r\n                    if response.status_code == 200:\r\n                       result = 'True'\r\n                       sdata = json.loads(response.text)\r\n                       for entity in sdata['entities']:\r\n                           for user_n_jira in userIds.split('||'):\r\n                               if user_n_jira:\r\n                                   user = user_n_jira.split(',')[0].strip()\r\n                                   jira_id = \"\"\r\n                                   jira_id = user_n_jira.split(',')[1]\r\n                                   if user.lower() in entity[\"properties\"][\"Upn\"].lower():\r\n                                       user_group += user + ',' + gName + ',' + jira_id + '||'\r\n                                       result = \"True\"\r\n                                       message = \"User's Group information retrieved successfully\"\r\n                                       break\r\n\r\n                    else:\r\n                        result = \"False\"\r\n                        message = \"Invalid response from Provider: \" + str(response.content)\r\n        else:\r\n            result = \"False\"\r\n            message = groups_resp[\"message\"]\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n\r\n    return {\"result\": result, \"message\": message, \"user_group\": user_group}\r\n\r\n\r\n# Get Group and ID of Contractor Groups\r\ndef getGroupIds(smax_url, smax_tenantid, smax_token, contractor_AD_groups):\r\n    message = \"\"\r\n    result = \"False\"\r\n    group_n_id = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        if contractor_AD_groups:\r\n            cgroups = str(contractor_AD_groups.split(',')).strip('[').strip(']')\r\n            authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\": smax_token}\r\n            url = smax_url + \"/rest/\" + smax_tenantid + \"/ems/PersonGroup?layout=Id,Upn,Name&filter=Name+in+(\" + cgroups + \")\"\r\n            response = requests.get(url, headers=authHeaders, cookies=cookies)\r\n\r\n            if response.status_code == 200:\r\n                sdata = json.loads(response.text)\r\n                for entity in sdata['entities']:\r\n                    group_n_id += entity[\"properties\"][\"Name\"] + ',' + entity[\"properties\"][\"Id\"] + '||'\r\n                result = \"True\"\r\n                message = \"Succcessfully retrieved Groups and their Ids\"\r\n\r\n            else:\r\n                result = \"False\"\r\n                message = \"Invalid response from Provider: \" + str(response.content)\r\n\r\n        else:\r\n            message = 'Contractor Groups Value is null'\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n\r\n    return {\"result\": result, \"message\": message, \"group_n_id\": group_n_id}"
  outputs:
    - user_group
    - result
    - message
    - errorType
    - errorProvider
    - errorMessage
    - errorSeverity
    - errorLogs
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
