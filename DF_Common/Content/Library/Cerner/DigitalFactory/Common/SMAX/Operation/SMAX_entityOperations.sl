########################################################################################################################
#!!
#! @input entity: SMAX App Entity Table name
#! @input operation: Operation like  CREATE/UPDATE/DELETE. For UPDATE and DELETE operation entity ID is mandatory
#! @input smax_data: data to be processed for the operation  for the entity record in Key Value Pair. separated by double pipe  "||"
#! @input is_custom_app: Yes or No: Yes if Entity is Custom and No if Entity  is  Out of the Box
#!!#
########################################################################################################################
namespace: Cerner.DigitalFactory.Common.SMAX.Operation
operation:
  name: SMAX_entityOperations
  inputs:
    - smax_url: "${get_sp('Cerner.DigitalFactory.SMAX.smaxURL')}"
    - smax_tenantId: "${get_sp('Cerner.DigitalFactory.SMAX.tenantID')}"
    - smax_auth_token
    - entity
    - operation
    - smax_data
    - is_custom_app: 'Yes'
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation to create/update/delete entity records\r\n#   Author: Rakesh Sharma (rakesh.sharma@cerner.com)\r\n#   Operation: SMAX_entityOperations\r\n#   Inputs:\r\n#       -   smax_auth_baseurl\r\n#       -   smax_user\r\n#       -   smax_password\r\n#       -   smax_tenantId\r\n#       -   smax_baseurl\r\n#       -   smax_baseurl\r\n#       -   smax_app_dynamic_option\r\n#       -   jiradata_json\r\n#       -   jira_id_list\r\n#       -   update_days\r\n#   Outputs:\r\n#       -   result\r\n#       -   message\r\n#       -   errortype\r\n#       -\r\n###############################################################\r\nimport json\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\ndef execute(smax_url, smax_auth_token, smax_tenantId, entity, operation, smax_data,is_custom_app):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errortype = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    entity_id = ''\r\n\r\n    try:\r\n        import json\r\n\r\n        smaxData = prepareSMAXData(operation, entity, smax_data,is_custom_app)\r\n        data = smaxData[\"smaxData\"]\r\n        dataP = json.loads(smaxData[\"smaxData\"])\r\n\r\n        if len(dataP['entities'][0][\"properties\"]) >0:\r\n            response_data = processSMAXData(smax_url, smax_tenantId, smax_auth_token, data)\r\n            if response_data[\"result\"] == 'True':\r\n                message = '{} Record(s) Affected'.format(response_data[\"records\"])\r\n                result = \"True\"\r\n                entity_id = response_data[\"entity_id\"]\r\n                message += ': ' + str(response_data[\"message\"])\r\n            else:\r\n                result = \"False\"\r\n                message = response_data[\"message\"]\r\n                raise Exception(message)\r\n\r\n        else:\r\n            result = \"True\"\r\n            message = 'No Data to for Processing'\r\n\r\n    except Exception as e:\r\n        message = e\r\n        errorMessage = message\r\n        errortype = 'e20000'\r\n        result = \"False\"\r\n        errorProvider = 'SMAX'\r\n        errorSeverity = \"ERROR\"\r\n\r\n    return {\"result\": result, \"message\": message, \"entity_id\":entity_id,\"errorType\": errortype, \"errorMessage\": errorMessage,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, }\r\n\r\n# Prepar data for  insert or update or delete  data  in SMAX\r\ndef prepareSMAXData(operation, entity, dataS,is_custom_app):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n\r\n    try:\r\n        import json\r\n\r\n        # Create data for insert in SMAX\r\n        smaxData = {}\r\n        smaxData['entities'] = []\r\n        smaxData['operation'] = operation\r\n        # Only One record to be processed at a time\r\n        smaxData['entities'] = [0] * 1\r\n        smaxData['entities'][0] = {}\r\n        smaxData['entities'][0][\"entity_type\"] = entity\r\n        smaxData['entities'][0][\"properties\"] = {}\r\n        datas = dataS.split(\"||\")\r\n\r\n        for data in datas:\r\n            if data:\r\n                key = data.split(',')[0].strip()\r\n                if key[-2:] != '_c' and key != 'Id' and key != 'DisplayLabel' and is_custom_app.lower() == 'yes':\r\n                    key += '_c'\r\n                value = data.split(',',1)[1].strip()\r\n                if value:\r\n                    smaxData['entities'][0][\"properties\"][key] = value\r\n\r\n        message = 'Data Prepared for Insert Update and Delete in SMAX'\r\n        if len(smaxData['entities'][0][\"properties\"])<1:\r\n            message = 'No Data for Proccessing'\r\n        smaxData = json.dumps(smaxData)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData}\r\n\r\n\r\n# insert or update or delete data from SMAX\r\ndef processSMAXData(smax_baseurl, tenantId, token, dataS):\r\n    message = \"\"\r\n    result = \"False\"\r\n    smax_message = ''\r\n    records = 0\r\n    entity_id = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        headers = {\r\n            'Cookie': 'LWSSO_COOKIE_KEY=' + token,\r\n            'Content-Type': 'application/json',\r\n            'User-Agent': 'Apache-HttpClient/4.4.1'\r\n        }\r\n\r\n        payload = dataS\r\n        url = smax_baseurl + \"/rest/\" + tenantId + \"/ems/bulk\"\r\n\r\n        response = requests.request(\"POST\", url, headers=headers, data=payload)\r\n        message = response.text\r\n        mresponse = json.loads(response.text)\r\n\r\n        if response.status_code == 200 and mresponse[\"meta\"][\"completion_status\"] == \"OK\":\r\n            result_list = mresponse[\"entity_result_list\"]\r\n            i = 0\r\n            for rr in result_list:\r\n                if rr[\"completion_status\"] == \"OK\":\r\n                    i += 1\r\n                    entity_id += rr[\"entity\"][\"properties\"][\"Id\"] + ','\r\n\r\n            smax_message = \"{} Records Affected!\".format(i) + str(message)\r\n            records = i\r\n            entity_id = entity_id[:-1]\r\n            result = \"True\"\r\n        else:\r\n            smax_message = \"Issue Processing Records! :\" + str(message)\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_response\": smax_message, \"records\": records,\"entity_id\":entity_id}"
  outputs:
    - result
    - message
    - entity_id
    - errorMessage
    - errorSeverity
    - errorProvder
    - errorType
  results:
    - SUCCESS: '${result == "True"}'
    - FAILURE
