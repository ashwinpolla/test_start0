########################################################################################################################
#!!
#! @input smax_dynamic_option_app: the SMAX Dynamic Drop Down Option App Name
#! @input jiradata_json: json object with, id, title, description and update_date For Records update in SMAX Dynamic Options
#! @input jira_id_list: coma separated list of record IDs only.
#! @input update_days: No of days for updating the records, It will check if any record changed in last x days
#!!#
########################################################################################################################
namespace: Cerner.DigitalFactory.Common.SMAX.Operation
operation:
  name: updateSMAX_DynamicDropDownOptions
  inputs:
    - smax_auth_baseurl: "${get_sp('Cerner.DigitalFactory.SMAX.smaxAuthURL')}"
    - smax_user: "${get_sp('Cerner.DigitalFactory.SMAX.smaxIntgUser')}"
    - smax_password: "${get_sp('Cerner.DigitalFactory.SMAX.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('Cerner.DigitalFactory.SMAX.tenantID')}"
    - smax_baseurl: "${get_sp('Cerner.DigitalFactory.SMAX.smaxURL')}"
    - smax_dynamic_option_app
    - jiradata_json
    - jira_id_list
    - update_days: '1'
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation to update the Dynamic Drop Down Options\r\n#   Author: Rakesh Sharma (rakesh.sharma@cerner.com)\r\n#   Operation: updateSMAX_DynamicDropDownOptions\r\n#   Inputs:\r\n#       -   smax_auth_baseurl\r\n#       -   smax_user\r\n#       -   smax_password\r\n#       -   smax_tenantId\r\n#       -   smax_baseurl\r\n#       -   smax_baseurl\r\n#       -   smax_app_dynamic_option\r\n#       -   jiradata_json\r\n#       -   jira_id_list\r\n#       -   update_days\r\n#   Outputs:\r\n#       -   result\r\n#       -   message\r\n#       -   errortype\r\n#       -\r\n# Modified on 09 Sep 2022 By Rakesh Sharma for Deletion of records of issue of List out of Index\r\n# Modified on 08 Dec 2022 By Jonathan Acosta for big data load in processSMAXData\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n\r\ndef execute(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, smax_dynamic_option_app,\r\n            jiradata_json, jira_id_list, update_days):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errortype = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    external_id_list = \"\"\r\n    extrnalId_smaxId_json = \"\"\r\n    dmsg = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        authResponse = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResponse[\"result\"] == \"True\":\r\n            token = authResponse[\"smax_auth\"]\r\n\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", \"Content-Type\": \"application/json\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n        getURL = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ems/\" + smax_dynamic_option_app + \"?layout=Id,DisplayLabel,ExternalId_c,Description_c&size=200000\"\r\n        response = requests.get(getURL, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n\r\n        if response.status_code == 200:\r\n            jdata = json.loads(response.content)\r\n            for entity in jdata[\"entities\"]:\r\n                external_id_list += str(entity[\"properties\"][\"ExternalId_c\"]) + ','\r\n                extrnalId_smaxId_json += '\"' + str(\r\n                    entity[\"properties\"][\"ExternalId_c\"]) + '\":\"' + str(entity[\"properties\"][\"Id\"]) + '\",'\r\n\r\n            external_id_list = external_id_list[:-1]\r\n            extrnalId_smaxId_json = \"{\" + extrnalId_smaxId_json[:-1] + \"}\"\r\n\r\n            smax_data = prepareSMAXData(smax_dynamic_option_app, external_id_list, extrnalId_smaxId_json, jiradata_json,\r\n                                        jira_id_list, update_days)\r\n            dataI = smax_data[\"smaxDataInsert\"]\r\n            dataU = smax_data[\"smaxDataUpdate\"]\r\n            dataD = smax_data[\"smaxDataDelete\"]\r\n            # message = str(smax_data)\r\n\r\n            if len(dataI.strip()):\r\n                response_data = processSMAXData(smax_baseurl, smax_tenantId, token, dataI)\r\n                if response_data[\"result\"] == 'True':\r\n                    dmsg = '{} Records Inserted'.format(response_data[\"records\"])\r\n            if len(dataU.strip()):\r\n                response_data = processSMAXData(smax_baseurl, smax_tenantId, token, dataU)\r\n                if response_data[\"result\"] == 'True':\r\n                    if dmsg:\r\n                        dmsg += ':'\r\n                    dmsg += ' {} Records Updated'.format(response_data[\"records\"])\r\n            if len(dataD.strip()):\r\n                response_data = processSMAXData(smax_baseurl, smax_tenantId, token, dataD)\r\n                if response_data[\"result\"] == 'True':\r\n                    if dmsg:\r\n                        dmsg += ':'\r\n                    dmsg += ' {} Records Deleted'.format(response_data[\"records\"])\r\n\r\n            if not len(dmsg.strip()):\r\n                dmsg = \"No records found to process\"  # + str(response_data[\"message\"]) + str(response_data[\"smax_message\"])\r\n            result = \"True\"\r\n            message = \"SMAX Dynamic Option Update process state: \" + dmsg\r\n        else:\r\n            msg = 'Cannot Open Connection to SMAX, Wrong URL or Wrong User password or SMAX not Available'\r\n            errorType = 'e20000'\r\n            raise Exception(msg)\r\n    except Exception as e:\r\n        message = e\r\n        errorMessage = message\r\n        errortype = 'e20000'\r\n        result = \"False\"\r\n        errorProvider = 'SMAX'\r\n        errorSeverity = \"ERROR\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errortype, \"errorMessage\": errorMessage,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, }\r\n\r\n\r\n# Prepar data for  insert or update or delete  data  in SMAX\r\ndef prepareSMAXData(smax_dynamic_option_app, external_id_list, extrnalId_smaxId_json, jiradata_json, jira_id_list,\r\n                    update_days):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxDataInsert = \"\"\r\n    smaxDataUpdate = \"\"\r\n    smaxDataDelete = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        import datetime as dt\r\n        from pytz import timezone\r\n        fmt = \"%Y-%m-%d %H:%M\"  # Format of time\r\n        # Current time in CST - 'US/Central'\r\n        now_cst = dt.datetime.now(timezone('US/Central'))\r\n        updateTimeCheck = now_cst - dt.timedelta(days=int(update_days))\r\n        updateTimeCheck = updateTimeCheck.strftime(fmt)\r\n\r\n        jdata = json.loads(jiradata_json)\r\n        # Create data for insert in SMAX\r\n        smaxDataI = {}\r\n        smaxDataI['entities'] = []\r\n        smaxDataI['operation'] = \"CREATE\"\r\n        # Create data for Update in SMAX\r\n        smaxDataU = {}\r\n        smaxDataU['entities'] = []\r\n        smaxDataU['operation'] = \"UPDATE\"\r\n        # Create data for XDelete in SMAX\r\n        smaxDataD = {}\r\n        smaxDataD['entities'] = []\r\n        smaxDataD['operation'] = \"DELETE\"\r\n        extrnalId_smaxId_json = json.loads(extrnalId_smaxId_json)\r\n        jiradata_json = json.loads(jiradata_json)\r\n\r\n        jlen = len(jiradata_json)\r\n        tlen = len(extrnalId_smaxId_json)\r\n\r\n        smaxDataI['entities'] = [0] * len(jiradata_json)\r\n        smaxDataU['entities'] = [0] * len(jiradata_json)\r\n        if tlen > jlen:\r\n            jlen = tlen\r\n        smaxDataD['entities'] = [0] * jlen\r\n        external_id_list = external_id_list.split(',')\r\n\r\n        ii = 0\r\n        for group in jdata:\r\n            if group[\"id\"] not in external_id_list:\r\n                smaxDataI['entities'][ii] = {}\r\n                smaxDataI['entities'][ii][\"entity_type\"] = smax_dynamic_option_app\r\n                smaxDataI['entities'][ii][\"properties\"] = {}\r\n                smaxDataI['entities'][ii][\"properties\"][\"ExternalId_c\"] = group[\"id\"]\r\n                smaxDataI['entities'][ii][\"properties\"][\"DisplayLabel\"] = group[\"title\"]\r\n                smaxDataI['entities'][ii][\"properties\"][\"Description_c\"] = group[\"description\"]\r\n                if group.get(\"dependson\"):\r\n                    smaxDataI['entities'][ii][\"properties\"][\"DependsOn_c\"] = group[\"dependson\"]\r\n\r\n                ii += 1\r\n        ui = 0\r\n        for group in jdata:\r\n            if group[\"id\"] in external_id_list:\r\n                jupdate = group[\"update_date\"]\r\n                if jupdate != 'None':\r\n                    jupdate_date = jupdate[:10] + ' ' + jupdate[11:16]\r\n                    # check if the updated date is greater than update check date\r\n                    if jupdate_date > updateTimeCheck:\r\n                        ext_id = group[\"id\"]\r\n                        smaxDataU['entities'][ui] = {}\r\n                        smaxDataU['entities'][ui][\"entity_type\"] = smax_dynamic_option_app\r\n                        smaxDataU['entities'][ui][\"properties\"] = {}\r\n                        smaxDataU['entities'][ui][\"properties\"][\"Id\"] = extrnalId_smaxId_json[ext_id]\r\n                        smaxDataU['entities'][ui][\"properties\"][\"DisplayLabel\"] = group[\"title\"]\r\n                        smaxDataU['entities'][ui][\"properties\"][\"Description_c\"] = group[\"description\"]\r\n                        ui += 1\r\n\r\n        if ii > 0:\r\n            if jlen > ii:\r\n                iii = ii\r\n                while jlen > iii:\r\n                    del smaxDataI['entities'][ii]\r\n                    iii += 1\r\n\r\n            smaxDataInsert = json.dumps(smaxDataI)\r\n        if ui > 0:\r\n            if jlen > ui:\r\n                iii = ui\r\n                while jlen > iii:\r\n                    del smaxDataU['entities'][ui]\r\n                    iii += 1\r\n            smaxDataUpdate = json.dumps(smaxDataU)\r\n        # Process to create delete records\r\n        i = 0\r\n        jira_id_list = jira_id_list.split(',')\r\n        for ext_id in external_id_list:\r\n            if ext_id not in jira_id_list:\r\n                smaxDataD['entities'][i] = {}\r\n                smaxDataD['entities'][i][\"entity_type\"] = smax_dynamic_option_app\r\n                smaxDataD['entities'][i][\"properties\"] = {}\r\n                smaxDataD['entities'][i][\"properties\"][\"Id\"] = extrnalId_smaxId_json[ext_id]\r\n                i += 1\r\n        if i > 0:\r\n            if jlen > i:\r\n                iii = i\r\n                while jlen > iii:\r\n                    del smaxDataD['entities'][i]\r\n                    iii += 1\r\n            smaxDataDelete = json.dumps(smaxDataD)\r\n\r\n        message = 'Data Prepared for Insert Update and Delete in SMAX'\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smaxDataInsert\": smaxDataInsert, \"smaxDataUpdate\": smaxDataUpdate,\r\n            \"smaxDataDelete\": smaxDataDelete}\r\n\r\n\r\n# insert or update or delete data from SMAX\r\ndef processSMAXData(smax_baseurl, tenantId, token, dataS):\r\n    message = \"\"\r\n    result = \"False\"\r\n    smax_message = ''\r\n    records=0\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        headers = {\r\n            'Cookie': 'LWSSO_COOKIE_KEY=' + token,\r\n            'Content-Type': 'application/json',\r\n            'User-Agent': 'Apache-HttpClient/4.4.1'\r\n        }\r\n\r\n        sizeLimit=1000000\r\n        payload = dataS\r\n        url = smax_baseurl + \"/rest/\" + tenantId + \"/ems/bulk\"\r\n        if len(str(dataS)) <sizeLimit : \r\n            response = requests.request(\"POST\", url, headers=headers, data=payload)\r\n            message = response.text\r\n            mresponse = json.loads(response.text)\r\n            if response.status_code == 200:\r\n                result_list = mresponse[\"entity_result_list\"]\r\n                i = 0\r\n                for rr in result_list:\r\n                    if rr[\"completion_status\"] == \"OK\":\r\n                        i += 1\r\n\r\n                smax_message = \"{} Records Affected!\".format(i)\r\n                records += i\r\n                result = \"True\"\r\n            else:\r\n                smax_message = \"Issue Processing Records! Check syntax or body or SMAX availability\"\r\n\r\n        else :\r\n            payload = json.loads(dataS)\r\n            smaxDataB = {}\r\n            smaxDataB['entities'] = []\r\n            smaxDataB['operation'] = payload['operation']\r\n            size=0\r\n            for entity in payload[\"entities\"]:\r\n                if size+ len(str(entity))<sizeLimit :\r\n                    smaxDataB['entities'].append(entity)\r\n                    size=len(str(smaxDataB))\r\n                else :\r\n                    payloadB=json.dumps(smaxDataB)\r\n                    response = requests.request(\"POST\", url, headers=headers, data=payloadB)\r\n                    message = response.text\r\n                    mresponse = json.loads(response.text)\r\n                    if response.status_code == 200:\r\n                        result_list = mresponse[\"entity_result_list\"]\r\n                        i = 0\r\n                        for rr in result_list:\r\n                            if rr[\"completion_status\"] == \"OK\":\r\n                                i += 1\r\n                        records +=i\r\n                        smax_message += \"{} Records Affected!\".format(i)\r\n                        result = \"True\"\r\n                    else:\r\n                        smax_message += \"Issue Processing Records! Check syntax or body or SMAX availability\"\r\n                    smaxDataB = {}\r\n                    smaxDataB['entities'] = []\r\n                    smaxDataB['operation'] = payload['operation']\r\n                    size=0\r\n                    smaxDataB['entities'].append(entity)\r\n                    \r\n            dataI=json.dumps(smaxDataB)\r\n            response = requests.request(\"POST\", url, headers=headers, data=payloadB)\r\n            message = response.text\r\n            mresponse = json.loads(response.text)\r\n            if response.status_code == 200:\r\n                result_list = mresponse[\"entity_result_list\"]\r\n                i = 0\r\n                for rr in result_list:\r\n                    if rr[\"completion_status\"] == \"OK\":\r\n                        i += 1\r\n                records +=i\r\n                smax_message += \"{} Records Affected!\".format(i)\r\n                result = \"True\"\r\n            else:\r\n                smax_message += \"Issue Processing Records! Check syntax or body or SMAX availability\"        \r\n       \r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_response\": smax_message, \"records\": records}\r\n\r\n\r\n# authenticate in SMAX\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\",\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data = {}\r\n        data['Login'] = user\r\n        data['Password'] = password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token}"
  outputs:
    - result
    - message
    - errorMessage
    - errorSeverity
    - errorProvder
    - errorType
  results:
    - SUCCESS: '${result == "True"}'
    - FAILURE
