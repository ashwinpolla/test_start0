########################################################################################################################
#!!
#! @input add_permissions: whether to add permissions
#!!#
########################################################################################################################
namespace: Cerner.DigitalFactory.Common.JIRA.Operation
operation:
  name: addUserPermissions_Jira
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - user_group_list:
        required: false
    - contractor_jira_script_mapping: "${get_sp('Cerner.DigitalFactory.contractor_jira_script_mapping')}"
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - add_permissions: 'Yes'
    - previous_errorLogs:
        required: false
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Jira and Smax\r\n#   Operation: jira_AddUserPermission\r\n#   Author: Rajesh Singh (rajesh.singh5@microfocus.com), MicroFocus International\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  user_group_list\r\n#       -  contractor_jira_script_mapping\r\n#       - conn_timeout\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorMessage\r\n#       - errorLogs\r\n#   Modified by Rakesh Sharma on 05 May 2021 for adding Permissions for Contractors\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"OOExec\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n\r\n# main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, user_group_list,\r\n            contractor_jira_script_mapping, conn_timeout, add_permissions,previous_errorLogs):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    jira_id_old = \"\"\r\n    jira_issues = \"\"\r\n    msg = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl =\"\"\r\n    \r\n    try:\r\n        import json\r\n        import requests\r\n\r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n        headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n\r\n        for user_group in user_group_list.split(\"||\"):\r\n            if user_group:\r\n                user = user_group.split(',')[0]\r\n                group = user_group.split(',')[1]\r\n                jira_id = user_group.split(',')[2]\r\n                if group == 'Cerner_Associate':\r\n                    reqUrl = '{0}rest/scriptrunner/latest/custom/addUserToJiraDefault?username={1}'.format(\r\n                        MarketPlace_jiraIssueURL, user)\r\n                else:\r\n                    jira_script = json.loads(contractor_jira_script_mapping).get(group)\r\n                    reqUrl = '{0}rest/scriptrunner/latest/custom/{1}?username={2}'.format(MarketPlace_jiraIssueURL,\r\n                                                                                          jira_script, user)\r\n                    if jira_id and jira_id != jira_id_old:\r\n                        jira_id_old = jira_id\r\n                        jira_issues += jira_id + ','\r\n                        jurl = '{0}rest/api/2/issue/{1}'.format(MarketPlace_jiraIssueURL, jira_id)\r\n                        payload = json.dumps({\r\n                            \"fields\": {\r\n                                \"security\": {\r\n                                    \"name\": \"Jira Secure Contingent Workers\"\r\n                                } } })\r\n                        jresponse = requests.request(\"PUT\",jurl, auth=basicAuthCredentials, headers=headers, data=payload, timeout=int(conn_timeout))\r\n\r\n                        if jresponse.status_code != 200 and jresponse.status_code != 204:\r\n                            msg = 'failed to Change the security Level for: ' + jira_id + ' status code :' + str(\r\n                                jresponse.status_code) + ': ' + str(jresponse.text)\r\n                            raise Exception(msg)\r\n                        else:\r\n                            msg = \"Changed Security level of Jira Issue:\" + jira_issues\r\n                if add_permissions == \"Yes\":\r\n                    response = requests.get(reqUrl, auth=basicAuthCredentials, headers=headers, timeout=int(conn_timeout))\r\n                    if response.status_code == 200:\r\n                        result = \"True\"\r\n                        message = \"Permission Granted. Retrying creating Jira Incident/Request, \" + msg\r\n\r\n                    else:\r\n                        msg = 'status code :' + str(response.status_code) + ': ' + str(response.text)\r\n                        raise Exception(msg)\r\n                elif add_permissions == \"No\":\r\n                    result = \"True\"\r\n                    message = \"Permission Grant Not Requested, \" + msg\r\n        \r\n        result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        errorLogs = \"ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + str(message) + \"|||\"\r\n\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\"errorLogs\":errorLogs + previous_errorLogs}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - errorLogs
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
