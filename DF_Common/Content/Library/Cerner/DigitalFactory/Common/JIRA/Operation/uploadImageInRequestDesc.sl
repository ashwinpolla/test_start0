namespace: Cerner.DigitalFactory.Common.JIRA.Operation
operation:
  name: uploadImageInRequestDesc
  inputs:
    - smaxURL: "${get_sp('MarketPlace.smaxURL')}"
    - smaxAuthURL: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smaxUser: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smaxPass: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - jiraURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - imageLinks:
        required: false
    - jiraIssueId
  python_action:
    use_jython: false
    script: "##################################################################################\r\n#   OO operation for uploading Images from Request Description to Jira Issues\r\n#   Author: Rajesh Singh Micro Focus (rajesh.singh5@microsoft.com)\r\n#   Operation: uploadImageInRequestDesc\r\n#   Inputs:\r\n#       - watchers\r\n#       - reporter\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorMessage\r\n#   Created On: 22 Sep 2021\r\n#  -------------------------------------------------------------\r\n#   Modified On\t: 11 Oct 2021\r\n#   Modified By\t: Ashwini Shalke\r\n#   Modification: added 4 outputs for error handling\r\n#   Modified On\t: 03 Dec 2021\r\n#   Modified By\t: Rakesh Sharma\r\n#   Modification: added 4 outputs for error handling in install(param) section\r\n#   Modified By Rakesh Sharma on 03 Jun 2022 for Image Uplaoding Issue,  third party Image Links failure fixed\r\n####################################################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# do not remove the execute function\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorSeverity = ''\r\n    errorType = ''\r\n    errorProvider = ''\r\n    errorMessage = ''\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        # Modified on 03 Dec 2021 - message and added below sections to cover all error details\r\n        message = e + 'Installation Failed: ' + param\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n# code goes here\r\n# you can add additional helper methods below.\r\n\r\ninstall(\"requests\")\r\n\r\n# do not remove the execute function\r\ndef execute(smaxURL, smaxAuthURL, smaxUser, smaxPass, imageLinks, jiraURL, jiraUser, jiraPassword, jiraIssueId):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorSeverity = ''\r\n    errorType = ''\r\n    errorProvider = ''\r\n    errorMessage = ''\r\n    try:\r\n        import json\r\n        import requests\r\n        import sys\r\n\r\n        if len(imageLinks.strip()) > 0:\r\n            authResp = getAuthCookie(smaxAuthURL, smaxUser, smaxPass)\r\n            if authResp[\"result\"] == \"True\":\r\n                token = authResp[\"smax_auth\"]\r\n\r\n            basicAuthCredentials = (smaxUser, smaxPass)\r\n            jirabasicAuthCredentials = (jiraUser, jiraPassword)\r\n            authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\": token}\r\n            # header = \"Cookie: SMAX_AUTH_TOKEN=\"+token+\";TENANTID=\"+smaxTenantId\r\n\r\n            for imageLink in imageLinks.split(\"||\"):\r\n                fileName = imageLink.split('~')[0]\r\n                attachURL = imageLink.split('~')[1]\r\n\r\n                # If there is direct URL of the Image in the link or third party URL link\r\n                if 'https://' in attachURL[0:10] or 'http://' in attachURL[0:10]:\r\n                    attachURL = attachURL[1:attachURL.find(\"?\")]\r\n                    turl = attachURL\r\n                    response = requests.get(turl, stream=True, auth=jirabasicAuthCredentials)\r\n                elif '/secure/attachment' in attachURL[0:25]:  ## This is incomplete link from JIRA that caanot be processed\r\n                    result = 'True'\r\n                    message = 'No Valid Image Link found in the Content'\r\n                    continue\r\n                    attachURL = attachURL[2:attachURL.find(\"?\")]\r\n                    turl = jiraURL + attachURL\r\n                    response = requests.get(turl, stream=True, auth=jirabasicAuthCredentials)\r\n                else:\r\n                    attachURL = attachURL[3:attachURL.find(\"?\")]\r\n                    turl = smaxURL + attachURL\r\n                    response = requests.get(turl, headers=authHeaders, cookies=cookies)\r\n\r\n                if response.status_code == 200:\r\n                    data = response.content\r\n                    #response.raw.decode_content = True\r\n                    #data = response.raw\r\n                    # uploadr = uploadFileToJira(jiraURL, jiraUser, jiraPassword,jiraIssueId,filePath,fileName)\r\n                    uploadr = uploadFileToJira(jiraURL, jiraUser, jiraPassword, jiraIssueId, data, fileName)\r\n                    if uploadr[\"result\"] == \"True\":\r\n                        result = \"True\"\r\n                        message = uploadr[\"message\"]\r\n                    else:\r\n                        result = \"False\"\r\n                        errorProvider = 'JIRA'\r\n                        msg = \"Issue Uploading File: \" + uploadr[\"message\"]\r\n                        raise Exception(msg)\r\n                else:\r\n                    msg = \"Issue Downloading File: \" + response.text\r\n                    raise Exception(msg)\r\n        else:\r\n            result = \"True\"\r\n            message = \"No image in description\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    errorSeverity = ''\r\n    errorType = ''\r\n    errorProvider = ''\r\n    errorMessage = ''\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data = {}\r\n        data['Login'] = user\r\n        data['Password'] = password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        if response.status_code == 200:\r\n            result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = \"During auth token\" + str(e)\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\ndef uploadFileToJira(url, user, password, jiraIssueId, filePath, fileName):\r\n    message = \"\"\r\n    result = \"False\"\r\n    token = \"\"\r\n    errorSeverity = ''\r\n    errorType = ''\r\n    errorProvider = ''\r\n    errorMessage = ''\r\n\r\n    try:\r\n        import requests\r\n\r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(user, password)\r\n        # files = data\r\n        headers = {'X-Atlassian-Token': 'no-check'}\r\n        url = \"{0}rest/api/2/issue/{1}/attachments\".format(url, jiraIssueId)\r\n        # response = requests.post(url, files={'file':(fileName,open(filePath,'rb'))}, headers=headers, auth=basicAuthCredentials)\r\n        response = requests.post(url, files={'file': (fileName, filePath)}, headers=headers, auth=basicAuthCredentials)\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            result = \"True\"\r\n            message = \"Image Attached Successfully\"\r\n        else:\r\n            result = \"False\"\r\n            msg = \"Image has not been attached\" + str(response.text)\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n\r\n    return {\"result\": result, \"message\": str(message), \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
