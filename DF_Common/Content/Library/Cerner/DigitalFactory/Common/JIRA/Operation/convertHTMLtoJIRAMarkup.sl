namespace: Cerner.DigitalFactory.Common.JIRA.Operation
operation:
  name: convertHTMLtoJIRAMarkup
  inputs:
    - htmlString:
        required: false
    - smaxID:
        required: false
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for converting html tage to wiki tag\r\n#   Author: Rajesh Singh Micro Focus (rajesh.singh5@microsoft.com)\r\n#   Operation: convertHTMLtoJIRAMarkup\r\n#   Inputs:\r\n#       - htmlString\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - wikiString\r\n#       - errorType\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorMessage\r\n#   Modified On\t: 11 Oct 2021\r\n#   Modified By\t: Ashwini Shalke\r\n#   Modification: added 4 outputs for error handling\r\n#   Modified on 26 Apr 2022 by Rakesh Sharma for honoring text in <> and pass it to JIRA as it is\r\n#   Modified on 24 may 2022 by Rakesh Sharma for Marketplace/Jira Integration Differences in Description Field (Table data was in format)\r\n#   Modified on 02 Jun 2022 by Rakesh Sharma for adding default name for image file name if it is null in function getImages()\r\n#   Modified on 14 Jun 2022 by Rakesh Sharma to suppress unncessary newlines in the content\r\n#   Modified on 17 Jun 2002 by Rakesh Sharma to include  html tags for formatting (created a variable excludeList3Chars )\r\n#   Modified on 02 Aug 2022 by Rakesh Sharma to replace \\n with \\r\\n since in some Jira fields it is not correctly intrepreted\r\n#   Modified on 06 Jan 2023 by Rakesh Sharma to format SMAX Table data for Jira, added a new function smaxTableFormat\r\n###############################################################\r\n\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorSeverity = \"e30000\"\r\n        errorType = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# requirement external modules\r\n\r\ninstall(\"markdownify\")\r\n\r\n\r\n# main function\r\ndef execute(htmlString, smaxID):\r\n    message = \"\"\r\n    conversionResult = \"\"\r\n    wikiString = \"\"\r\n    imageLinks = \"\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n\r\n    try:\r\n\r\n        import json\r\n\r\n        if len(htmlString) > 0:\r\n\r\n            import re\r\n            from markdownify import markdownify\r\n            # if there is unnecessary newline then suppress it\r\n            htmlString = htmlString.replace('<br />\\n', '<br>').replace('<br>\\n', '<br>')\r\n\r\n            htmlString = htmlString.replace(\"<strong>\", \" *\").replace(\"</strong>\", \"* \")\r\n            ## This code block: to check any content in html tag format <> but actually not a tag but data that will be go to Jira as unformatted data\r\n            excludeList3Chars = ('th ', 'br>', 'td ')  # 'th ' is a table header Tag like <th scope=\"col\">\r\n            if '<' in htmlString:\r\n                for i in htmlString.split('<'):\r\n                    if i and '>' in i and 'style=' not in i and 'href=' not in i and i[\r\n                                                                                     :3] not in excludeList3Chars and i[\r\n                                                                                                                      :6] != 'table ':\r\n                        htag = i.split('>')[0]\r\n                        if '/' not in htag:\r\n                            if '/' + htag not in htmlString:\r\n                                hhtag = '<' + htag + '>'\r\n                                newhtag = '♪♪' + htag + '♪'\r\n                                htmlString = htmlString.replace(hhtag, newhtag)\r\n                    if 'href=\"mailto:' in i:\r\n                        mailto = i.split('\"')[1]\r\n                        htmlString = htmlString.replace('<' + i + '</a>', '[' + mailto + ']')\r\n            if 'href=\"http' in htmlString:\r\n                for i in htmlString.split('<a'):\r\n                    if i and 'href=\"http' in i:\r\n                        linkurl = i.split('\"')[1]\r\n                        for ii in i.split('</a>')[0].split('>'):\r\n                            if 'http' in ii and 'href' not in ii:\r\n                                showtitle = ii.split('<')[0]\r\n                                htmlString = htmlString.replace('<a' + i.split('</a>')[0] + '</a>',\r\n                                                                '[' + showtitle + '|' + linkurl + ']')\r\n                            elif 'http' not in ii and 'href' not in ii:\r\n                                showtitle = ii\r\n                                htmlString = htmlString.replace('<a' + i.split('</a>')[0] + '</a>',\r\n                                                                '[' + showtitle + '|' + linkurl + ']')\r\n            if '<table' in htmlString:\r\n                htmlString = smaxTableFormat(htmlString)[\"jirastring\"]\r\n\r\n            if '<ol>' in htmlString or '<ul>' in htmlString:\r\n                htmlToJiraString = oltoJiraList(htmlString)\r\n                html = markdownify(htmlToJiraString[\"jirastring\"], escape_underscores=False, escape_asterisks=False)\r\n            else:\r\n                html = markdownify(htmlString, escape_underscores=False, escape_asterisks=False)\r\n            # remove blank record in table\r\n            html = html.replace(' --- |\\n|', '').replace(' --- |', '').replace('\\n| |\\n|', '\\n|').replace('\\n|  |\\n|',\r\n                                                                                                          '\\n|')\r\n\r\n            ## check if \\n is precceded by \\r or not. if not then add \\r before \\n so that Jira fields intrepret it correctly\r\n            tthtml = ''\r\n            if '\\n' in html:\r\n                for line in html.split('\\n'):\r\n                    if line and '|' not in line:\r\n                        if line[-1] == '\\r':\r\n                            tthtml += line + '\\n'\r\n                        else:\r\n                            tthtml += line + '\\r\\n'\r\n                    else:\r\n                        tthtml += line + '\\n'\r\n            if tthtml:\r\n                html = tthtml\r\n\r\n            wikiString = html.replace(\"\\\\_\", \"_\")\r\n            conversionResult = getImages(wikiString, smaxID)\r\n\r\n            if conversionResult[2] == \"True\":\r\n                wikiString = conversionResult[0]\r\n                imageLinks = conversionResult[1]\r\n                # print(\"WikiString:\"+conversionResult[0]+\" ImageLink: \"+conversionResult[1])\r\n                wikiString = wikiString.replace(\"\\u00a0\", \" \").replace(\"0xa0\\n\", \"\\n\")\r\n                message = \"HTML to Wiki tag conversion is successfull\"\r\n                result = \"True\"\r\n            else:\r\n                message = conversionResult[3]\r\n                result = conversionResult[2]\r\n\r\n            if wikiString:\r\n                ### Convert Back the special Char to  format (<>) like original chars of html tag format\r\n                wikiString = json.dumps(wikiString)\r\n                wikiString = wikiString.replace('\\\\u266a\\\\u266a', '<').replace('\\\\u266a', '>').replace('♪♪','<').replace('♪', '>')\r\n                wikiString = wikiString.replace('\\\\u2019', \"'\")\r\n\r\n                ## For Comments Schedular below is needed for above line\r\n                # wikiString = wikiString.replace('\\\\u266a\\\\u266a', '<').replace('\\\\u266a', '>').replace('♪♪','<').replace('♪','>')\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n\r\n    return {\"result\": result, \"message\": message, \"wikiString\": wikiString, \"imageLinks\": imageLinks,\r\n            \"errorType\": errorType, \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider,\r\n            \"errorMessage\": errorMessage}\r\n\r\n\r\ndef getImages(wikiString, smaxID):\r\n    imageLinks = \"\"\r\n    x = 0\r\n    result = \"\"\r\n    message = \"\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    smaxID = str(smaxID)\r\n\r\n    try:\r\n        imageNameIndex = 1\r\n        endOfString = len(wikiString)\r\n        # print(\"EndOfString: \" + str(endOfString))\r\n        while x < endOfString:\r\n            imageIndex = wikiString.find(\"![\", 0, endOfString)\r\n\r\n            if (imageIndex > -1):\r\n                if len(wikiString) > endOfString:\r\n                    endOfString = len(wikiString)\r\n\r\n                srcStartIndex = wikiString.find(\"](\", imageIndex, endOfString) + 1\r\n                srcEndIndex = wikiString.find(\")\", srcStartIndex, endOfString)\r\n                imageFileName = wikiString[imageIndex + 2:wikiString.find(\"]\", imageIndex, srcEndIndex)]\r\n\r\n                ## If there is no filename found for the provided image then set the default filename\r\n                if not imageFileName:\r\n                    imageFileName = \"image.png\"\r\n\r\n                if imageFileName == \"image.png\":\r\n                    img_name = smaxID + '_' + 'image-'\r\n                    imageLinks += img_name + str(imageNameIndex) + \".png\" + \"~\" + wikiString[\r\n                                                                                  srcStartIndex:srcEndIndex] + \")||\"\r\n                    wikiString = wikiString[0:imageIndex] + \" !\" + img_name + str(\r\n                        imageNameIndex) + \".png! \" + wikiString[\r\n                                                     srcEndIndex + 1:endOfString]\r\n                else:\r\n                    imageFileName = smaxID + '_' + imageFileName\r\n\r\n                    imageLinks += imageFileName + \"~\" + wikiString[wikiString.find(\"]\", imageIndex,\r\n                                                                                   srcEndIndex) + 1:srcEndIndex] + \")||\"\r\n                    wikiString = wikiString[0:imageIndex] + \" !\" + imageFileName + \"! \" + wikiString[\r\n                                                                                          srcEndIndex + 1:endOfString]\r\n                x += srcEndIndex + 1\r\n                imageNameIndex += 1\r\n            else:\r\n                break\r\n\r\n        if len(imageLinks) > 0:\r\n            imageLinks = imageLinks[0:-2]\r\n\r\n        result = \"True\"\r\n        message = \"success in converting image tags\"\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n\r\n    return wikiString, imageLinks, result, message, errorType, errorSeverity, errorProvider, errorMessage\r\n\r\n\r\n## convert ordered list and un-ordered list to JIRA Markup list\r\ndef oltoJiraList(htmlstring):\r\n    try:\r\n        import json\r\n        ol = 0\r\n        ul = 0\r\n        il = 0\r\n        at = \"\"\r\n        tt = htmlstring.split(\">\")\r\n        current_list_type = ''\r\n        jira_list_value = ''\r\n        for ii in tt:\r\n            if ii:\r\n                i = ii + '>'\r\n                if '<ol>' in i and '</ol>' not in i:\r\n                    ol += 1\r\n                    current_list_type = 'ol'\r\n                    jira_list_value += '#'\r\n                elif '<ul>' in i and '</ul>' not in i:\r\n                    ul += 1\r\n                    current_list_type = 'ul'\r\n                    jira_list_value += '*'\r\n                elif '</ol>' in i:\r\n                    ol -= 1\r\n                    jira_list_value = jira_list_value[:-1]\r\n                elif '</ul>' in i:\r\n                    ul -= 1\r\n                    jira_list_value = jira_list_value[:-1]\r\n                elif '<li>' in i and '</li>' not in i:\r\n                    il += 1\r\n                elif '</li>' in i:\r\n                    il -= 1\r\n                if '<li' in i and '<li>' not in i:\r\n                    print()  ### do nothing\r\n                elif '<ol>' in i or '<li>' in i or '</ol>' in i or '</li>' in i or '<ul>' in i or '</ul>' in i:\r\n                    at += i.replace(\"<ul>\", \"\").replace(\"<ol>\", \"\").replace(\"<li>\", \"\").replace(\"</ul>\", \"\").replace(\r\n                        \"</ol>\", \"\").replace(\"</li>\", \"\")\r\n                else:\r\n                    at += i\r\n                if (i == '</ol>' and ol == 0) or (i == '</ul>' and ul == 0):\r\n                    at += '\\n\\n'\r\n                ## Ordered list to JIRA list\r\n                if i == '<li>' or ('<li' in i and '<li>' not in i):\r\n                    at += '\\n'\r\n                    at += jira_list_value\r\n                    at += ' '\r\n    except Exception as e:\r\n        message = e\r\n    return {\"jirastring\": at}\r\n\r\n## Formatting of table data for Jira -- removing unneccessary table formats\r\n\r\ndef smaxTableFormat(htmlstring):\r\n    try:\r\n        jira_string = ''\r\n        table_end_tag = 0\r\n\r\n        htmlstringlist = htmlstring.split(\"</tr><tr>\")\r\n        table_depth = 0\r\n        for i in htmlstringlist:\r\n            if i:\r\n                if '<table' in i:\r\n                    table_depth += i.count('<table')\r\n                    table_index = i.index('<table')\r\n                if '</table>' in i:\r\n                    table_end_tag = i.count('</table>')\r\n                    table_end_tag_index = i.index('</table>')\r\n                else:\r\n                    table_end_tag = 0\r\n\r\n                if table_depth == 1:\r\n                    jira_string += i + '</tr><tr>'\r\n                elif table_depth > 1:\r\n                    if table_end_tag_index < table_index:\r\n                        jira_string += i.split('<table')[0] + '<table'\r\n                        it = i.split('<table')[1]\r\n                    else:\r\n                        it = i\r\n                    while '<table' in it:\r\n                        while '<td><table' in it:\r\n                            it = it.split('<td><table',1)[0] + it.split('<td><table',1)[1].split('>',1)[1]\r\n                        while '<table' in it:\r\n                            it = it.split('<table',1)[0] + it.split('<table',1)[1].split('>', 1)[1]\r\n                        it = it.replace('</table></td>','')\r\n                        it = it.replace('<tbody>', '').replace('</tbody>', '').replace('</table>', '')\r\n                        it = it.replace('<tr>','').replace('</tr>','').replace('<colgroup><col /></colgroup>','')\r\n\r\n                    jira_string += it\r\n                    table_depth -= table_end_tag\r\n                    if table_depth > 0:\r\n                        jira_string += '</tr><tr>'\r\n                    if table_depth == 0:\r\n                        last_data_index = jira_string.rindex('</td>')\r\n                        jira_string = jira_string[0:last_data_index] + '</td></tr></tbody></table>' + jira_string[last_data_index + 5:]\r\n\r\n    except Exception as e:\r\n        message = e\r\n        errorProvider = 'OOExec'\r\n    return {\"jirastring\": jira_string}"
  outputs:
    - wikiString
    - result
    - message
    - imageLinks
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
