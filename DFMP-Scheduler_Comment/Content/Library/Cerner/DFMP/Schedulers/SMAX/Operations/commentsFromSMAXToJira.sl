namespace: Cerner.DFMP.Schedules.SMAX.Operations
operation:
  name: commentsFromSMAXToJira
  inputs:
    - MP_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MP_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MP_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_Url: "${get_sp('MarketPlace.smaxURL')}"
    - smax_Token
    - smax_jirasmaxid_list:
        required: false
    - smax_request_id_list:
        required: false
    - creator: "${get_sp('MarketPlace.jiraIssueCreator')}"
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - lastUpdate:
        required: false
    - http_fail_status_codes: "${get_sp('Cerner.DigitalFactory.http_fail_status_codes')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of comments From Smax TO Jira\r\n#   Operation: commentsFromSMAXToJira\r\n#   Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Inputs:\r\n#       -  MP_jiraIssueURL\r\n#       -  MP_jiraUser\r\n#       -  MP_jiraPassword\r\n#       -  smax_user\r\n#       -  smax_tenantId\r\n#       -  smax_Url\r\n#       -  projectNames\r\n#       -  creator\r\n#       -  lastUpdate\r\n#       -  conn_timeout\r\n#       -  smax_jirasmaxid_list\r\n#       -  smax_request_id_list\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorMessage\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - provider_failure\r\n#       - errorLogs\r\n# Modified on 14 Dec 2022 by Sirisha Krishna Yalam to handle image body with SMAX URL while uploading from SMAX to JIRA (functionsour -imageFromSmaxToJira)\r\n#################################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\ninstall(\"markdownify\")\r\n\r\n# main function\r\ndef execute(MP_jiraIssueURL, MP_jiraUser, MP_jiraPassword, smax_tenantId,\r\n            smax_Url, smax_Token, smax_jirasmaxid_list, smax_request_id_list, creator, conn_timeout,\r\n            lastUpdate, http_fail_status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    tresult = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    comTag = \"@~Comment_From_Marketplace~\"\r\n    smax_comment_list = \"\"\r\n    jira_comment_list = \"\"\r\n    errorLogs = \"\"\r\n    provider_failure = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    smaxticketID =\"\"\r\n    jiraticketID = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        status_codes = json.loads(http_fail_status_codes)\r\n\r\n        if len(smax_jirasmaxid_list.split(\"♪\")) > 0:\r\n            for issues in smax_jirasmaxid_list.split(\"♪\"):\r\n\r\n                jiraticketID = issues.split(\"♫\")[0]\r\n                smaxticketID = issues.split(\"♫\")[1]\r\n                smax_comment_list = \"\"\r\n                # ***********FETCH ALL COMMENTS FOR smaxticketID and jiraticketID**********\r\n                fetchCommentsFromSmax = getSmaxCommentData(smax_Url, smax_tenantId, smaxticketID, jiraticketID,\r\n                                                           smax_Token, smax_request_id_list,\r\n                                                           lastUpdate, conn_timeout, status_codes)\r\n\r\n                tresult = fetchCommentsFromSmax[\"result\"]\r\n                message = fetchCommentsFromSmax[\"message\"]\r\n                errorType = fetchCommentsFromSmax[\"errorType\"]\r\n                errorLogs += fetchCommentsFromSmax[\"errorLogs\"]\r\n                provider_failure = fetchCommentsFromSmax[\"provider_failure\"]\r\n                smax_comment_list = fetchCommentsFromSmax[\"smax_comment_list\"]\r\n                if tresult == \"False\" and provider_failure == \"True\":\r\n                    raise Exception(message)\r\n                elif tresult == \"False\" and provider_failure != \"True\":\r\n                    continue\r\n                # ********************FETCH ALL COMMENTS FROM JIRA FOR jiraticketID if smax_comment_list is not empty**********\r\n                if smax_comment_list:\r\n                    fetchCommentsFromJira = getJiraCommentData(MP_jiraUser, MP_jiraPassword, MP_jiraIssueURL,\r\n                                                               jiraticketID, smaxticketID, conn_timeout, status_codes)\r\n                    tresult = fetchCommentsFromJira[\"result\"]\r\n                    message = fetchCommentsFromJira[\"message\"]\r\n                    errorType = fetchCommentsFromJira[\"errorType\"]\r\n                    errorProvider = fetchCommentsFromJira[\"errorProvider\"]\r\n                    errorLogs += fetchCommentsFromJira[\"errorLogs\"]\r\n                    provider_failure = fetchCommentsFromJira[\"provider_failure\"]\r\n                    jira_comment_list = fetchCommentsFromJira[\"jira_comment_list\"]\r\n                    if tresult == \"False\" and provider_failure == \"True\":\r\n                        raise Exception(message)\r\n                    elif tresult == \"False\" and provider_failure != \"True\":\r\n                        continue\r\n                    # *************validate Comment already exist or not **********************\r\n                    validatSmaxComToJiraCom = validateComment(smax_comment_list, jira_comment_list)\r\n                    result = validatSmaxComToJiraCom[\"result\"]\r\n                    message = validatSmaxComToJiraCom[\"message\"]\r\n                    errorType = validatSmaxComToJiraCom[\"errorType\"]\r\n                    errorProvider = validatSmaxComToJiraCom[\"errorProvider\"]\r\n                    postSmaxComData = validatSmaxComToJiraCom[\"postSmaxComData\"]\r\n                    errorLogs += validatSmaxComToJiraCom[\"errorLogs\"]\r\n\r\n                    if postSmaxComData:\r\n                        for postData in postSmaxComData.split(\"♫♫\"):\r\n                            if postData:\r\n                                # ***************Convert html to jira markup and get imagelinks also*******************\r\n                                conversionHtmlToMarkUp = convertHTMLToMarkUp(postData)\r\n                                imageLinks = conversionHtmlToMarkUp[\"imageLinks\"]\r\n                                commentSmaxData = conversionHtmlToMarkUp[\"wikiString\"]\r\n\r\n                                # *****************post image from smax to jira*********************************\r\n                                postImagesFromSmaxToJira = imageFromSmaxToJira(smax_Url, smax_Token, imageLinks,\r\n                                                                               MP_jiraIssueURL,\r\n                                                                               MP_jiraUser,\r\n                                                                               MP_jiraPassword, jiraticketID,\r\n                                                                               smaxticketID, conn_timeout,\r\n                                                                               smax_tenantId, status_codes)\r\n                                fileNameList = \"\"\r\n                                fileNameList = postImagesFromSmaxToJira[\"fileNameList\"]\r\n                                tresult = postImagesFromSmaxToJira[\"result\"]\r\n                                message = postImagesFromSmaxToJira[\"message\"]\r\n                                errorType = postImagesFromSmaxToJira[\"errorType\"]\r\n                                errorProvider = postImagesFromSmaxToJira[\"errorProvider\"]\r\n                                errorLogs += postImagesFromSmaxToJira[\"errorLogs\"]\r\n                                provider_failure = postImagesFromSmaxToJira[\"provider_failure\"]\r\n                                if tresult == \"False\" and provider_failure == \"True\":\r\n                                    raise Exception(message)\r\n                                elif tresult == \"False\" and provider_failure != \"True\":\r\n                                    continue\r\n                                # ***************** FETCH USERID FOR SMAX COMMENT USER *************\r\n\r\n                                fetchUserIdFromSmax = getUserID(smax_Token, smax_Url, smax_tenantId, postData, creator,conn_timeout)\r\n                                commentUpdateUserId = fetchUserIdFromSmax[\"commentUpdateUserId\"]\r\n\r\n                                # ************* POST COMMENT FROM SMAX TO JIRA  ********************\r\n                                commentsTag = \"\"\r\n                                commentsTag = str(\"smaxCommentID:\" + postData.split(\"♪\")[2] + comTag)\r\n\r\n                                postCommentsFromSmaxToJira = postCommentsToJira(MP_jiraIssueURL, MP_jiraUser,\r\n                                                                                MP_jiraPassword,\r\n                                                                                jiraticketID, commentSmaxData,\r\n                                                                                commentUpdateUserId, conn_timeout,\r\n                                                                                commentsTag, smaxticketID, fileNameList,\r\n                                                                                status_codes)\r\n                                tresult = postCommentsFromSmaxToJira[\"result\"]\r\n                                message = postCommentsFromSmaxToJira[\"message\"]\r\n                                errorType = postCommentsFromSmaxToJira[\"errorType\"]\r\n                                errorProvider = postCommentsFromSmaxToJira[\"errorProvider\"]\r\n                                errorLogs += postCommentsFromSmaxToJira[\"errorLogs\"]\r\n                                provider_failure = postCommentsFromSmaxToJira[\"provider_failure\"]\r\n                                if tresult == \"False\" and provider_failure == \"True\":\r\n                                    raise Exception(message)\r\n                                elif tresult == \"False\" and provider_failure != \"True\":\r\n                                    continue\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"SMAX\"\r\n        errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(message) + \": Response Code: \" + responseCode + \"|||\"\r\n    \r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs, \"provider_failure\": provider_failure, \"smax_comment_list\": smax_comment_list}\r\n\r\n\r\ndef getSmaxCommentData(smax_Url, smax_tenantId, smaxticketID, jiraticketID, smax_Token, smax_request_id_list,\r\n                       lastUpdate, conn_timeout, status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    smax_comment_list = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    tDate = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    failCodes = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n        \r\n        reqUrl = smax_Url + \"/rest/\" + smax_tenantId + \"/collaboration/comments/Request/\" + str(smaxticketID)\r\n        response = requests.get(reqUrl, headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n        if response.status_code == 200:\r\n            smaxResponseData = json.loads(response.content)\r\n            if smaxResponseData != []:\r\n                if not lastUpdate:\r\n                    for i in smaxResponseData:\r\n                        tDate = i['CreateTime']\r\n                        if not lastUpdate:\r\n                            lastUpdate = tDate\r\n                        if int(tDate) < int(lastUpdate):\r\n                            lastUpdate = tDate\r\n                for i in smaxResponseData:\r\n                    smaxcommentUserID = i['Submitter']['UserId']\r\n                    smaxcommentsData = i['Body']\r\n                    smaxCommentID = i['Id']\r\n                    if (i['CreateTime'] > int(lastUpdate)) and (i[\"CommentFrom\"] == \"User\") and (i['Body'] != \"\"):\r\n                        smax_comment_list += smaxticketID + \"♪\" + smaxCommentID + \"♪\" + smaxcommentUserID + \"♪\" + smaxcommentsData + \"♫♫\"\r\n            else:\r\n                result = \"True\"\r\n                message = \"No comments to post for smaxticketID \" + smaxticketID\r\n        else:\r\n            failCodes = status_codes['smax']\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                result = \"False\"\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + responseBody + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            e) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"smax_comment_list\": smax_comment_list,\r\n            \"errorLogs\": errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\ndef getJiraCommentData(MP_jiraUser, MP_jiraPassword, MP_jiraIssueURL, jiraticketID, smaxticketID, conn_timeout,\r\n                       status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    jira_comment_list = \"\"\r\n    response = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    combody = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseCode = \"\"\r\n    responseBody = \"\"\r\n    failCodes = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(MP_jiraUser, MP_jiraPassword)\r\n        headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n        reqUrl = '{0}rest/api/2/search?jql=issue={1}&fields=customfield_49500,comment'.format(MP_jiraIssueURL,\r\n                                                                                              jiraticketID)\r\n        response = requests.get(reqUrl, auth=basicAuthCredentials, headers=headers, timeout=int(conn_timeout))\r\n        responseCode = str(response.status_code)\r\n        responseBody = str(response.text)\r\n        if response.status_code == 200:\r\n            combody = response.text\r\n            if combody:\r\n                jira_comment_list += jiraticketID + \"♪\" + combody + \"♫♫\"\r\n                jira_comment_list = jira_comment_list[:-2]\r\n        else:\r\n            failCodes = status_codes['jira']\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + responseBody + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            e) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorLogs\": errorLogs,\r\n            \"provider_failure\": provider_failure, \"jira_comment_list\": jira_comment_list}\r\n\r\n\r\ndef validateComment(smax_comment_list, jira_comment_list):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    postSmaxComData = \"\"\r\n    comTag = \"@~Comment_From_Marketplace~\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    smaxticketID =\"\"\r\n    jiraticketID = \"\"\r\n    \r\n    try:\r\n\r\n        import requests\r\n        import json\r\n\r\n        for smaxCom in smax_comment_list.split(\"♫♫\"):\r\n            if smaxCom:\r\n                if jira_comment_list:\r\n                    jiraComData = jira_comment_list.split(\"♪\")[1]\r\n                    jiraticketID = jira_comment_list.split(\"♪\")[0]\r\n                    if jiraComData:\r\n                        commentsTag = \"\"\r\n                        commentsTag = \"smaxCommentID:\" + smaxCom.split(\"♪\")[1] + comTag\r\n                        if commentsTag not in jiraComData:\r\n                            postSmaxComData += jiraticketID + \"♪\" + smaxCom + \"♫♫\"\r\n        if not postSmaxComData:\r\n            result = \"True\"\r\n            message = \"No new comments to update from SMAX to JIRA\"\r\n    except Exception as e:\r\n        message = \"Validation failure of SMAX comments with JIRA comments \" + str(e)\r\n        result = \"False\"\r\n        errorType = \"e10000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(message) + \": Response Code: \" + responseCode + \"|||\"\r\n    \r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"postSmaxComData\": postSmaxComData,\"errorLogs\": errorLogs}\r\n\r\n\r\ndef getUserID(smax_Token, smax_Url, smax_tenantId, postData, creator,conn_timeout):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    commentUserID = \"\"\r\n    commentUpdateUserId = \"\"\r\n    reqUrl = \"\"\r\n    smaxticketID = \"\"\r\n    jiraticketID = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseCode = \"\"\r\n    responseBody = \"\"\r\n    errorLogs = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        commentUserID = str(postData.split(\"♪\")[3])\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n        reqUrl = smax_Url + \"/rest/\" + smax_tenantId + \"/ems/Person?layout=Id,Upn,Email,EmployeeStatus&filter=Id=\" + commentUserID\r\n\r\n        response = requests.get(reqUrl, headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n        if response.status_code == 200:\r\n            entityJsonArray = json.loads(response.content)\r\n            commentUpdateUserId = entityJsonArray[\"entities\"][0][\"properties\"][\"Upn\"].split(\"@\")[0]\r\n        else:\r\n            commentUpdateUserId = creator\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            e) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"commentUpdateUserId\": commentUpdateUserId}\r\n\r\n\r\n# post comments to jira\r\ndef postCommentsToJira(MP_jiraIssueURL, MP_jiraUser, MP_jiraPassword, jiraticketID, commentSmaxData,\r\n                       commentUpdateUserId, conn_timeout,\r\n                       commentsTag, smaxticketID, fileNameList, status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    response = \"\"\r\n    errorLogs = \"\"\r\n    provider_failure = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseCode = \"\"\r\n    responseBody = \"\"\r\n    failCodes = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        if fileNameList:\r\n            for file in fileNameList.split(\"||\"):\r\n                if file:\r\n                    oldFile = file.split(\",\")[0]\r\n                    newFile = file.split(\",\")[1]\r\n                    smaxToJiraCommentData = commentSmaxData.replace(oldFile, newFile)\r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(MP_jiraUser, MP_jiraPassword)\r\n        headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n        data = {}\r\n        data[\"issue_id\"] = jiraticketID\r\n        data[\"author_id\"] = commentUpdateUserId\r\n        data[\"comment_body\"] = commentSmaxData + \"{color:white}\" + \"Do not edit this line\" + commentsTag.rjust(\r\n            86, '-') + \"{color}\"\r\n        inputString = json.dumps(data)\r\n        ProviderUrlBody = inputString\r\n        \r\n        reqUrl = \"{0}rest/scriptrunner/latest/custom/addCommentPost\".format(MP_jiraIssueURL)\r\n        response = requests.post(reqUrl, auth=basicAuthCredentials, headers=headers, data=inputString, timeout=int(conn_timeout))\r\n        responseCode = str(response.status_code)\r\n        responseBody = str(response.text)\r\n        if response.status_code == 201:\r\n            message = \"Comments integrated from SMAX to JIRA Successfully\" + responseCode\r\n            result = \"True\"\r\n        else:\r\n            failCodes = status_codes['jira']\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + responseBody + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            e) + \": Response Code: \" + responseCode + \"|||\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs,\r\n            \"provider_failure\": provider_failure}\r\n\r\n\r\ndef convertHTMLToMarkUp(postData):\r\n    message = \"\"\r\n    result = \"\"\r\n    conversionResult = \"\"\r\n    wikiString = \"\"\r\n    imageLinks = \"\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    smaxID = \"\"\r\n    htmlString = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    smaxticketID =\"\"\r\n    jiraticketID = \"\"\r\n    try:\r\n        import json\r\n        smaxID = str(postData.split(\"♪\")[2])[:8]\r\n        htmlString = str(postData.split(\"♪\")[4])\r\n\r\n        if len(htmlString) > 0:\r\n            import re\r\n            from markdownify import markdownify\r\n            # if there is unnecessary newline then suppress it\r\n            htmlString = htmlString.replace('<br />\\n', '<br>').replace('<br>\\n', '<br>')\r\n\r\n            htmlString = htmlString.replace(\"<strong>\", \" *\").replace(\"</strong>\", \"* \")\r\n            ## This code block: to check any content in html tag format <> but actually not a tag but data\r\n            excludeList3Chars = ('th ', 'br>', 'td ')  # 'th ' is a table header Tag like <th scope=\"col\">\r\n            if '<' in htmlString:\r\n                for i in htmlString.split('<'):\r\n                    if i and '>' in i and 'style=' not in i and 'href=' not in i and i[\r\n                                                                                     :3] not in excludeList3Chars and i[\r\n                                                                                                                      :6] != 'table ':\r\n                        htag = i.split('>')[0]\r\n                        if '/' not in htag:\r\n                            if '/' + htag not in htmlString:\r\n                                hhtag = '<' + htag + '>'\r\n                                newhtag = '♪♪' + htag + '♪'\r\n                                htmlString = htmlString.replace(hhtag, newhtag)\r\n                    if 'href=\"mailto:' in i:\r\n                        mailto = i.split('\"')[1]\r\n                        htmlString = htmlString.replace('<' + i + '</a>', '[' + mailto + ']')\r\n            if 'href=\"http' in htmlString:\r\n                for i in htmlString.split('<a'):\r\n                    if i and 'href=\"http' in i:\r\n                        linkurl = i.split('\"')[1]\r\n                        for ii in i.split('</a>')[0].split('>'):\r\n                            if 'http' in ii and 'href' not in ii:\r\n                                showtitle = ii.split('<')[0]\r\n                                htmlString = htmlString.replace('<a' + i.split('</a>')[0] + '</a>',\r\n                                                                '[' + showtitle + '|' + linkurl + ']')\r\n                            elif 'http' not in ii and 'href' not in ii:\r\n                                showtitle = ii\r\n                                htmlString = htmlString.replace('<a' + i.split('</a>')[0] + '</a>',\r\n                                                                '[' + showtitle + '|' + linkurl + ']')\r\n\r\n            if '<ol>' in htmlString or '<ul>' in htmlString:\r\n                htmlToJiraString = oltoJiraList(htmlString)\r\n                html = markdownify(htmlToJiraString[\"jirastring\"], escape_underscores=False, escape_asterisks=False)\r\n            else:\r\n                html = markdownify(htmlString, escape_underscores=False, escape_asterisks=False)\r\n            # remove blank record in table\r\n            html = html.replace(' --- |\\n|', '').replace(' --- |', '').replace('\\n| |\\n|', '\\n|').replace('\\n|  |\\n|',\r\n                                                                                                          '\\n|')\r\n\r\n            wikiString = html.replace(\"\\\\_\", \"_\")\r\n            conversionResult = getImages(wikiString, smaxID)\r\n\r\n            if conversionResult[\"result\"] == \"True\":\r\n\r\n                wikiString = conversionResult[\"wikiString\"]\r\n                imageLinks = conversionResult[\"imageLinks\"]\r\n                wikiString = wikiString.replace(\"\\u00a0\", \" \").replace(\"0xa0\\n\", \"\\n\")\r\n                message = \"HTML to Wiki tag conversion is successfull\"\r\n                result = \"True\"\r\n            else:\r\n                message = conversionResult[3]\r\n                result = conversionResult[2]\r\n\r\n            if wikiString:\r\n                ### Convert Back the special Char to  format (<>) like original chars of html tag format\r\n                wikiString = wikiString.replace('\\\\u266a\\\\u266a', '<').replace('\\\\u266a', '>').replace('♪♪',\r\n                                                                                                       '<').replace('♪',\r\n                                                                                                                    '>')\r\n    except Exception as e:\r\n        message = \"Failed in converting html to jira Markup \" + str(e)\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(message) + \": Response Code: \" + responseCode + \"|||\"\r\n    \r\n    return {\"result\": result, \"message\": message, \"wikiString\": wikiString, \"imageLinks\": imageLinks,\r\n            \"errorType\": errorType, \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider,\r\n            \"errorMessage\": errorMessage,\"errorLogs\": errorLogs,\"provider_failure\":provider_failure}\r\n\r\n\r\ndef getImages(wikiString, smaxID):\r\n    imageLinks = \"\"\r\n    x = 0\r\n    result = \"\"\r\n    message = \"\"\r\n    errorType = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    errorMessage = \"\"\r\n    smaxID = str(smaxID)\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    smaxticketID =\"\"\r\n    jiraticketID = \"\"\r\n\r\n    try:\r\n        imageNameIndex = 1\r\n        endOfString = len(wikiString)\r\n        \r\n        while x < endOfString:\r\n            imageIndex = wikiString.find(\"![\", 0, endOfString)\r\n\r\n            if (imageIndex > -1):\r\n                if len(wikiString) > endOfString:\r\n                    endOfString = len(wikiString)\r\n\r\n                srcStartIndex = wikiString.find(\"](\", imageIndex, endOfString) + 1\r\n                srcEndIndex = wikiString.find(\")\", srcStartIndex, endOfString)\r\n                imageFileName = wikiString[imageIndex + 2:wikiString.find(\"]\", imageIndex, srcEndIndex)]\r\n\r\n                ## If there is no filename found for the provided image then set the default filename\r\n                if not imageFileName:\r\n                    imageFileName = \"image.png\"\r\n\r\n                if imageFileName == \"image.png\":\r\n                    img_name = smaxID + '_' + 'image-'\r\n                    imageLinks += img_name + str(imageNameIndex) + \".png\" + \"~\" + wikiString[\r\n                                                                                  srcStartIndex:srcEndIndex] + \")||\"\r\n                    wikiString = wikiString[0:imageIndex] + \" !\" + img_name + str(\r\n                        imageNameIndex) + \".png! \" + wikiString[\r\n                                                     srcEndIndex + 1:endOfString]\r\n                else:\r\n                    imageFileName = smaxID + '_' + imageFileName\r\n\r\n                    imageLinks += imageFileName + \"~\" + wikiString[wikiString.find(\"]\", imageIndex,\r\n                                                                                   srcEndIndex) + 1:srcEndIndex] + \")||\"\r\n                    wikiString = wikiString[0:imageIndex] + \" !\" + imageFileName + \"! \" + wikiString[\r\n                                                                                          srcEndIndex + 1:endOfString]\r\n                x += srcEndIndex + 1\r\n                imageNameIndex += 1\r\n            else:\r\n                break\r\n\r\n        if len(imageLinks) > 0:\r\n            imageLinks = imageLinks[0:-2]\r\n\r\n        result = \"True\"\r\n        message = \"success in converting image tags\"\r\n\r\n    except Exception as e:\r\n        message = \"Failed to get imageLinks from Smax Comment \" + str(e)\r\n        result = \"False\"\r\n        errorType = \"e30000\"\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorMessage = message\r\n        errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(message) + \": Response Code: \" + responseCode + \"|||\"\r\n    \r\n    return {\"result\": result, \"message\": message, \"wikiString\": wikiString, \"imageLinks\": imageLinks,\r\n            \"errorType\": errorType, \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider,\r\n            \"errorMessage\": errorMessage}\r\n\r\n\r\n## convert ordered list and un-ordered list to JIRA Markup list\r\ndef oltoJiraList(htmlstring):\r\n    try:\r\n        import json\r\n        ol = 0\r\n        ul = 0\r\n        il = 0\r\n        at = \"\"\r\n        tt = htmlstring.split(\">\")\r\n        current_list_type = ''\r\n        jira_list_value = ''\r\n        for ii in tt:\r\n            if ii:\r\n                i = ii + '>'\r\n                if '<ol>' in i and '</ol>' not in i:\r\n                    ol += 1\r\n                    current_list_type = 'ol'\r\n                    jira_list_value += '#'\r\n                elif '<ul>' in i and '</ul>' not in i:\r\n                    ul += 1\r\n                    current_list_type = 'ul'\r\n                    jira_list_value += '*'\r\n                elif '</ol>' in i:\r\n                    ol -= 1\r\n                    jira_list_value = jira_list_value[:-1]\r\n                elif '</ul>' in i:\r\n                    ul -= 1\r\n                    jira_list_value = jira_list_value[:-1]\r\n                elif '<li>' in i and '</li>' not in i:\r\n                    il += 1\r\n                elif '</li>' in i:\r\n                    il -= 1\r\n                if '<li' in i and '<li>' not in i:\r\n                    print()  ### do nothing\r\n                elif '<ol>' in i or '<li>' in i or '</ol>' in i or '</li>' in i or '<ul>' in i or '</ul>' in i:\r\n                    at += i.replace(\"<ul>\", \"\").replace(\"<ol>\", \"\").replace(\"<li>\", \"\").replace(\"</ul>\", \"\").replace(\r\n                        \"</ol>\", \"\").replace(\"</li>\", \"\")\r\n                else:\r\n                    at += i\r\n                if (i == '</ol>' and ol == 0) or (i == '</ul>' and ul == 0):\r\n                    at += '\\n\\n'\r\n                ## Ordered list to JIRA list\r\n                if i == '<li>' or ('<li' in i and '<li>' not in i):\r\n                    at += '\\n'\r\n                    at += jira_list_value\r\n                    at += ' '\r\n    except Exception as e:\r\n        message = e\r\n    return {\"jirastring\": at}\r\n\r\n\r\n# attachmentto jira\r\ndef imageFromSmaxToJira(smaxURL, smax_Token, imageLinks, jiraURL, jiraUser, jiraPassword,\r\n                        jiraIssueId, smaxticketID, conn_timeout, smax_tenantId, status_codes):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    FILES = []\r\n    my_os = ''\r\n    downloadFilePath = ''\r\n    fileDeletionPathList = []\r\n    fileNameList = \"\"\r\n    errorLogs = \"\"\r\n    provider_failure = \"\"\r\n    ProviderUrlBody = \"\"\r\n    tresult = \"\"\r\n    turl = \"\"\r\n    responseCode = \"\"\r\n    failCodes = \"\"\r\n\r\n    try:\r\n        import json\r\n        import requests\r\n        import sys\r\n\r\n        if len(imageLinks.strip()) > 0:\r\n            authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n\r\n            jirabasicAuthCredentials = (jiraUser, jiraPassword)\r\n\r\n            for imageLink in imageLinks.split(\"||\"):\r\n                fileName = imageLink.split('~')[0]\r\n                attachURL = imageLink.split('~')[1]\r\n\r\n                # If there is direct URL of the Image in the link or third party URL link\r\n                if 'https://' in attachURL[0:10] or 'http://' in attachURL[0:10]:\r\n                    attachURL = attachURL[1:attachURL.find(\"?\")]\r\n                    turl = attachURL\r\n                    if smaxURL in turl:\r\n                        response = requests.get(turl, headers=authHeaders, cookies=cookies)\r\n                    elif jiraURL in turl:\r\n                        response = requests.get(turl, stream=True, auth=jirabasicAuthCredentials)\r\n                    else:\r\n                        response = requests.get(turl, stream=True, auth=jirabasicAuthCredentials)\r\n                    \r\n                elif '/secure/attachment' in attachURL[\r\n                                             0:25]:  ## This is incomplete link from JIRA that caanot be processed\r\n                    result = 'True'\r\n                    message = 'No Valid Image Link found in the Content'\r\n                    continue\r\n                    attachURL = attachURL[2:attachURL.find(\"?\")]\r\n                    turl = jiraURL + attachURL\r\n                    response = requests.get(turl, stream=True, auth=jirabasicAuthCredentials)\r\n                else:\r\n                    attachURL = attachURL[3:attachURL.find(\"?\")]\r\n                    turl = smaxURL + attachURL\r\n                    response = requests.get(turl, headers=authHeaders, cookies=cookies)\r\n\r\n                if response.status_code == 200:\r\n                    data = response.content\r\n                    uploadr = uploadFileToJira(jiraURL, jiraUser, jiraPassword, jiraIssueId, data, fileName,\r\n                                               smaxticketID, status_codes)\r\n                    tresult = uploadr[\"result\"]\r\n                    message = uploadr[\"message\"]\r\n                    errorType = uploadr[\"errorType\"]\r\n                    errorProvider = uploadr[\"errorProvider\"]\r\n                    provider_failure = uploadr[\"provider_failure\"]\r\n                    errorLogs += uploadr[\"errorLogs\"]\r\n\r\n                    if tresult == \"False\" and provider_failure == \"True\":\r\n                        raise Exception(message)\r\n                    elif tresult == \"False\" and provider_failure != \"True\":\r\n                        continue\r\n                else:\r\n                    failCodes = status_codes['smax']\r\n                    if str(response.status_code) in failCodes:\r\n                        provider_failure = \"True\"\r\n                        msg = \"Unsupported response from provider: \" + str(\r\n                            response.content) + \", Response Code: \" + str(\r\n                            response.status_code)\r\n                        raise Exception(msg)\r\n                    else:\r\n                        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraIssueId + \"||ProviderUrl,\" + str(turl) + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                            response.content) + \": Response Code: \" + str(\r\n                            response.status_code) + \"|||\"\r\n        else:\r\n            result = \"True\"\r\n            message = \"No image in description\"\r\n        result = \"True\"\r\n\r\n    except Exception as e:\r\n        message = \"Failed to upload images from Smax to JIRA \" + str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"SMAX\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraIssueId + \"||ProviderUrl,\" + str(turl) + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n            message) + \", Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"fileNameList\": fileNameList,\r\n            \"errorLogs\": errorLogs,\r\n            \"provider_failure\": provider_failure}\r\n\r\n\r\ndef uploadFileToJira(url, user, password, jiraIssueId, filePath, fileName, smaxticketID, status_codes):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseCode = \"\"\r\n    responseBody = \"\"\r\n    failCodes = \"\"\r\n\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(user, password)\r\n        headers = {'X-Atlassian-Token': 'no-check'}\r\n        reqUrl = \"{0}rest/api/2/issue/{1}/attachments\".format(url, jiraIssueId)\r\n        response = requests.post(reqUrl, files={'file': (fileName, filePath)}, headers=headers,\r\n                                 auth=basicAuthCredentials)\r\n        responseCode = str(response.status_code)\r\n        responseBody = str(response.content)\r\n        if response.status_code == 200:\r\n            result = \"True\"\r\n            message = \"Image Attached Successfully\"\r\n        else:\r\n            failCodes = status_codes['jira']\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraIssueId + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + responseBody + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(reqUrl) + str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraIssueId + \"||ProviderUrl,\" + str(reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + str(\r\n            e) + \", Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorLogs\": errorLogs,\r\n            \"provider_failure\": provider_failure}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - errorLogs
    - provider_failure
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
