namespace: Cerner.DFMP.Schedules.JIRA.Operations
operation:
  name: commentsUpdateFromJiraToSMAX
  inputs:
    - MP_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MP_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MP_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_Url: "${get_sp('MarketPlace.smaxURL')}"
    - creator: "${get_sp('MarketPlace.jiraIssueCreator')}"
    - lastUpdate:
        required: false
    - smax_FieldID
    - smax_Bridge_ID
    - domainName
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - smax_Token
    - smax_request_id_list:
        required: false
    - jira_smaxjiraid_list
    - http_fail_status_codes: "${get_sp('Cerner.DigitalFactory.http_fail_status_codes')}"
    - previous_errorLogs:
        required: false
    - fileExtTypeMapping: "${get_sp('Cerner.DigitalFactory.AttachmentExtnFiletype_mapping')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of comments From JIRA TO SMAX\r\n#   Author: Sirisha Krishna Yalam(SY091463@cerner.net)\r\n#   Operation: commentsFromJiraToSMAX\r\n#   Inputs:\r\n#       -  MP_jiraIssueURL\r\n#       -  MP_jiraUser\r\n#       -  MP_jiraPassword\r\n#       -  jira_smaxjiraid_list\r\n#       -  lastUpdate\r\n#       -  smax_Token\r\n#       -  smax_user\r\n#       -  smax_tenantId\r\n#       -  smax_Url\r\n#       -  smax_FieldID\r\n#       -  smax_Bridge_ID\r\n#       -  conn_timeout\r\n#       -  domainName\r\n#       -  http_fail_status_codes\r\n#       -  previous_errorLogs\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorMessage\r\n#       - errorSeverity\r\n#       - errorProvider\r\n#       - errorLogs\r\n#       - provider_failure\r\n# Modified by Sirisha Krishna On 15-Nov-2022 for MARKET- 6585 in function - getJiraCommentData by adding an if condition to filter which all comments should integrate from jira to smax bases on following parameter(smaxComIdInJiraCom,jiraComCreatedDt,jiraComUpdatedDt)\r\n\r\n###############################################################\r\n\r\nimport sys, os\r\nimport subprocess\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\ninstall(\"time\")\r\ninstall(\"pytz\")\r\ninstall(\"markdown\")\r\n\r\n\r\n# main function\r\ndef execute(MP_jiraIssueURL, MP_jiraUser, MP_jiraPassword, smax_Token, smax_tenantId, smax_Url,\r\n            smax_FieldID, smax_Bridge_ID, smax_user, smax_request_id_list, jira_smaxjiraid_list,\r\n            lastUpdate, domainName, conn_timeout, http_fail_status_codes, previous_errorLogs, fileExtTypeMapping):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    attachmentData = \"\"\r\n    attachmentDetails = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    smaxticketID = \"\"\r\n    jiraticketID = \"\"\r\n\r\n    import requests\r\n    basicAuthCredentials = requests.auth.HTTPBasicAuth(MP_jiraUser, MP_jiraPassword)\r\n    headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n\r\n    try:\r\n        import json\r\n        from datetime import datetime\r\n        if lastUpdate:\r\n            lastUpdate = lastUpdate[:16]\r\n\r\n        if len(jira_smaxjiraid_list.split(\"♪\")) > 0:\r\n\r\n            for issues in jira_smaxjiraid_list.split(\"♪\"):\r\n                if issues:\r\n                    status_codes = json.loads(http_fail_status_codes)\r\n                    jiraticketID = str(issues.split(\"♫\")[0])\r\n                    smaxticketID = str(issues.split(\"♫\")[1])\r\n\r\n                    fetchCommentsFromJira = getJiraCommentData(MP_jiraIssueURL, jiraticketID, smax_user, smaxticketID,\r\n                                                               smax_FieldID, basicAuthCredentials, headers, lastUpdate,\r\n                                                               conn_timeout, status_codes)\r\n                    tresult = fetchCommentsFromJira[\"result\"]\r\n                    message = fetchCommentsFromJira[\"message\"]\r\n                    errorType = fetchCommentsFromJira[\"errorType\"]\r\n                    errorLogs += fetchCommentsFromJira[\"errorLogs\"]\r\n                    provider_failure = fetchCommentsFromJira[\"provider_failure\"]\r\n                    jira_comment_list = fetchCommentsFromJira[\"jira_comment_list\"]\r\n\r\n                    attachmentData = fetchCommentsFromJira[\"attachmentData\"]\r\n                    if tresult == \"False\" and provider_failure == \"True\":\r\n                        raise Exception(message)\r\n                    elif tresult == \"False\" and provider_failure != \"True\":\r\n                        continue\r\n                    # ************FETCH ALL RECNET COMMENTS FROM SMAX if if we have jira comments fetched******************\r\n                    if jira_comment_list:\r\n                        fetchCommentsFromSmax = getSmaxCommentData(smax_Url, smax_tenantId, smaxticketID, jiraticketID,\r\n                                                                   smax_Token, smax_request_id_list, conn_timeout,\r\n                                                                   status_codes)\r\n                        tresult = fetchCommentsFromSmax[\"result\"]\r\n                        message = fetchCommentsFromSmax[\"message\"]\r\n                        errorType = fetchCommentsFromSmax[\"errorType\"]\r\n                        errorLogs += fetchCommentsFromSmax[\"errorLogs\"]\r\n                        provider_failure = fetchCommentsFromSmax[\"provider_failure\"]\r\n                        smax_comment_list = fetchCommentsFromSmax[\"smax_comment_list\"]\r\n                        if tresult == \"False\" and provider_failure == \"True\":\r\n                            raise Exception(message)\r\n                        elif tresult == \"False\" and provider_failure != \"True\":\r\n                            continue\r\n\r\n                        jira_updated_com_list = \"\"\r\n                        jira_new_com_list = \"\"\r\n                        # *************validate Comment already exist or not **********************\r\n                        compareSmaxComToJiraCom = validateComment(smax_comment_list, jira_comment_list, smax_Url,\r\n                                                                  smax_tenantId, smax_Token, status_codes, conn_timeout)\r\n                        tresult = compareSmaxComToJiraCom[\"result\"]\r\n                        message = compareSmaxComToJiraCom[\"message\"]\r\n                        errorType = compareSmaxComToJiraCom[\"errorType\"]\r\n                        errorLogs += compareSmaxComToJiraCom[\"errorLogs\"]\r\n                        provider_failure = compareSmaxComToJiraCom[\"provider_failure\"]\r\n                        jira_updated_com_list = compareSmaxComToJiraCom[\"jira_updated_com_list\"]\r\n                        jira_new_com_list = compareSmaxComToJiraCom[\"jira_new_com_list\"]\r\n                        if tresult == \"False\" and provider_failure == \"True\":\r\n                            raise Exception(message)\r\n                        elif tresult == \"False\" and provider_failure != \"True\":\r\n                            continue\r\n                        # ********get attachmentDetails if there are any comments to push********\r\n                        if jira_new_com_list != \"\" or jira_updated_com_list != \"\":\r\n                            # ***********get attachment details******************\r\n                            if attachmentData != []:\r\n                                attachmentDetails = fetchAttachmentDetails(attachmentData)\r\n                        if jira_new_com_list:\r\n                            for postJiraCom in jira_new_com_list.split(\"♫♫\"):\r\n                                if postJiraCom:\r\n                                    commentUpdateUserId = \"\"\r\n                                    jiraticketID = postJiraCom.split(\"♪\")[0]\r\n                                    smaxticketID = postJiraCom.split(\"♪\")[1]\r\n                                    jiracomUptUserName = postJiraCom.split(\"♪\")[2]\r\n                                    jiraComTag = postJiraCom.split(\"♪\")[3]\r\n                                    jiraComment = str(postJiraCom.split(\"♪\")[4])\r\n                                    # ***************************convert comment *********************\r\n                                    convertCommentData = formCommentBody(MP_jiraIssueURL, basicAuthCredentials,\r\n                                                                         smax_Url, smax_tenantId, jiraComment,\r\n                                                                         attachmentDetails, smax_Token, domainName,\r\n                                                                         smaxticketID, jiraticketID, status_codes,\r\n                                                                         conn_timeout, fileExtTypeMapping)\r\n                                    tresult = convertCommentData[\"result\"]\r\n                                    message = convertCommentData[\"message\"]\r\n                                    errorType = convertCommentData[\"errorType\"]\r\n                                    errorLogs += convertCommentData[\"errorLogs\"]\r\n                                    provider_failure = convertCommentData[\"provider_failure\"]\r\n                                    convertedJiraCommentData = convertCommentData[\"convertComData\"]\r\n                                    if tresult == \"False\" and provider_failure == \"True\":\r\n                                        raise Exception(message)\r\n                                    elif tresult == \"False\" and provider_failure != \"True\":\r\n                                        continue\r\n                                    # ***************** FETCH USERID From SMAX *************\r\n                                    fetchUserIdFromSmax = getUserID(smax_Token, smax_Url, smax_tenantId, smax_Bridge_ID,\r\n                                                                    jiracomUptUserName, smaxticketID, jiraticketID,\r\n                                                                    domainName, conn_timeout)\r\n                                    commentUpdateUserId = fetchUserIdFromSmax[\"commentUpdateUserId\"]\r\n                                    # ************** create comment in smax ********************\r\n                                    postCommentsFromJiraToSMAX = postCommentsToSMAX(smax_Url, smax_tenantId, smax_Token,\r\n                                                                                    smaxticketID, jiraticketID,\r\n                                                                                    convertedJiraCommentData,\r\n                                                                                    jiraComTag, commentUpdateUserId,\r\n                                                                                    status_codes, conn_timeout)\r\n                                    tresult = postCommentsFromJiraToSMAX[\"result\"]\r\n                                    message = postCommentsFromJiraToSMAX[\"message\"]\r\n                                    errorType = postCommentsFromJiraToSMAX[\"errorType\"]\r\n                                    errorLogs += postCommentsFromJiraToSMAX[\"errorLogs\"]\r\n                                    provider_failure = postCommentsFromJiraToSMAX[\"provider_failure\"]\r\n                                    if tresult == \"False\" and provider_failure == \"True\":\r\n                                        raise Exception(message)\r\n                                    elif tresult == \"False\" and provider_failure != \"True\":\r\n                                        continue\r\n                        if jira_updated_com_list:\r\n                            for uptJiraCom in jira_updated_com_list.split(\"♫♫\"):\r\n                                if uptJiraCom:\r\n                                    jiraticketID = uptJiraCom.split(\"♪\")[0]\r\n                                    smaxticketID = uptJiraCom.split(\"♪\")[1]\r\n                                    jiracomUptUserName = uptJiraCom.split(\"♪\")[2]\r\n                                    jiraComment = str(uptJiraCom.split(\"♪\")[6])\r\n                                    # ***************************convert comment *********************\r\n                                    convertCommentData = formCommentBody(MP_jiraIssueURL, basicAuthCredentials,\r\n                                                                         smax_Url, smax_tenantId, jiraComment,\r\n                                                                         attachmentDetails, smax_Token, domainName,\r\n                                                                         smaxticketID, jiraticketID, status_codes,\r\n                                                                         conn_timeout, fileExtTypeMapping)\r\n                                    tresult = convertCommentData[\"result\"]\r\n                                    message = convertCommentData[\"message\"]\r\n                                    errorType = convertCommentData[\"errorType\"]\r\n                                    errorLogs += convertCommentData[\"errorLogs\"]\r\n                                    provider_failure = convertCommentData[\"provider_failure\"]\r\n                                    convertedJiraCommentData = convertCommentData[\"convertComData\"]\r\n                                    if tresult == \"False\" and provider_failure == \"True\":\r\n                                        raise Exception(message)\r\n                                    elif tresult == \"False\" and provider_failure != \"True\":\r\n                                        continue\r\n                                    # ***************** FETCH USERID From SMAX *************\r\n                                    fetchUserIdFromSmax = getUserID(smax_Token, smax_Url, smax_tenantId, smax_Bridge_ID,\r\n                                                                    jiracomUptUserName, smaxticketID, jiraticketID,\r\n                                                                    domainName, conn_timeout)\r\n                                    commentUpdateUserId = fetchUserIdFromSmax[\"commentUpdateUserId\"]\r\n                                    # ************form provider url body****************************\r\n                                    fetchPostData = getPostData(uptJiraCom, convertedJiraCommentData,\r\n                                                                commentUpdateUserId)\r\n                                    data = fetchPostData[\"data\"]\r\n                                    smaxCommID = fetchPostData[\"smaxCommID\"]\r\n                                    # ************** create comment in smax ********************\r\n                                    updateSmaxComment = updateSmaxExistingComment(smax_Url, smax_tenantId, smax_Token,\r\n                                                                                  smaxticketID, jiraticketID, data,\r\n                                                                                  smaxCommID, status_codes,\r\n                                                                                  conn_timeout)\r\n                                    tresult = updateSmaxComment[\"result\"]\r\n                                    message = updateSmaxComment[\"message\"]\r\n                                    errorType = updateSmaxComment[\"errorType\"]\r\n                                    errorLogs += updateSmaxComment[\"errorLogs\"]\r\n                                    provider_failure = updateSmaxComment[\"provider_failure\"]\r\n                                    if tresult == \"False\" and provider_failure == \"True\":\r\n                                        raise Exception(message)\r\n                                    elif tresult == \"False\" and provider_failure != \"True\":\r\n                                        continue\r\n                    else:\r\n                        result = \"True\"\r\n                        message = \"No new comments to post from jiraIssueID \" + jiraticketID + \"to smaxRequestID \" + smaxticketID\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"JIRA\"\r\n        errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs + previous_errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\ndef getJiraCommentData(MP_jiraIssueURL, jiraticketID, smax_user, smaxticketID,\r\n                       smax_FieldID, basicAuthCredentials, headers, lastUpdate,\r\n                       conn_timeout, status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    response = \"\"\r\n    attachmentData = \"\"\r\n    jira_comment_list = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    jiraComUpdatedDt = \"\"\r\n    failCodes = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        from datetime import datetime\r\n        reqUrl = '{0}rest/api/2/search'.format(MP_jiraIssueURL)\r\n        data = {}\r\n        if lastUpdate:\r\n            data[\"jql\"] = \"issue={0} AND updated >'{1}'\".format(jiraticketID, lastUpdate)\r\n        else:\r\n            data[\"jql\"] = \"issue={0}\".format(jiraticketID)\r\n        data[\"startAt\"] = \"0\"\r\n        data[\"maxResults\"] = \"500\"\r\n        data[\"fields\"] = [\"comment\", smax_FieldID, \"attachment\"]\r\n        inputString = json.dumps(data)\r\n        ProviderUrlBody = inputString\r\n        response = requests.post(reqUrl, auth=basicAuthCredentials, headers=headers, data=inputString,\r\n                                 timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n        if response.status_code == 200:\r\n            responseData = response.json()\r\n            if responseData[\"total\"] != 0:\r\n                jira_comm_list = responseData[\"issues\"][0][\"fields\"][\"comment\"][\"comments\"]\r\n                attachmentData = responseData[\"issues\"][0][\"fields\"][\"attachment\"]\r\n                if jira_comm_list:\r\n                    for i in jira_comm_list:\r\n                        jiraComment = i[\"body\"]\r\n                        jiraCommentID = i[\"id\"]\r\n                        jiracomUptUserName = \"\"\r\n                        smaxComIdInJiraCom = \"\"\r\n                        if (jiraComment[len(jiraComment) - 110:].find(\"--smaxCommentID:\") != -1 and jiraComment[len(jiraComment) - 110:].find(\"Comment_From_Marketplace\") != -1):   \r\n                            getSmaxIDfromJiraCommTag = jiraComment.split(\"--smaxCommentID:\")\r\n                            smaxComIdInJiraCom = getSmaxIDfromJiraCommTag[1].split(\"@\")\r\n\r\n                        if \"updateAuthor\" in i:\r\n                            if (i[\"updateAuthor\"][\"name\"] != \"\"):\r\n                                jiracomUptUserName = i[\"updateAuthor\"][\"name\"]\r\n                            else:\r\n                                jiracomUptUserName = smax_user\r\n                        else:\r\n                            jiracomUptUserName = smax_user\r\n                        visibility = \"\"\r\n                        if \"visibility\" in i:\r\n                            visibility = i[\"visibility\"][\"value\"]\r\n                        jiraComUpdatedDt = timeConversion(i[\"updated\"])\r\n                        jiraComCreatedDt = timeConversion(i[\"created\"])\r\n                        if visibility == \"Users\" or visibility.lower() == \"jira-users\" or visibility == \"\":\r\n                            if lastUpdate:\r\n                                lastUpdateDateTime = datetime.fromisoformat(lastUpdate)\r\n                                if (jiraComUpdatedDt > lastUpdateDateTime) and (jiraComment != \"\"):\r\n                                    if (smaxComIdInJiraCom != \"\" and jiraComCreatedDt != jiraComUpdatedDt) or (smaxComIdInJiraCom == \"\" and jiraComCreatedDt != jiraComUpdatedDt) or (smaxComIdInJiraCom == \"\" and jiraComCreatedDt == jiraComUpdatedDt):   \r\n                                        jira_comment_list += jiraticketID + \"♪\" + smaxticketID + \"♪\" + jiracomUptUserName + \"♪\" + jiraCommentID + \"♪\" + jiraComment + \"♫♫\"\r\n                            else:\r\n                                if (jiraComment != \"\"):\r\n                                    if (smaxComIdInJiraCom != \"\" and jiraComCreatedDt != jiraComUpdatedDt) or (smaxComIdInJiraCom == \"\" and jiraComCreatedDt != jiraComUpdatedDt) or (smaxComIdInJiraCom == \"\" and jiraComCreatedDt == jiraComUpdatedDt):   \r\n                                        jira_comment_list += jiraticketID + \"♪\" + smaxticketID + \"♪\" + jiracomUptUserName + \"♪\" + jiraCommentID + \"♪\" + jiraComment + \"♫♫\"\r\n                else:\r\n                    result = \"True\"\r\n                    message = \"No comments to post from JIRA to SMAX for jiraticketID \" + jiraticketID\r\n            else:\r\n                result = \"True\"\r\n                message = \"No comments to post from JIRA to SMAX for jiraticketID \" + jiraticketID\r\n        else:\r\n            failCodes = status_codes['jira']\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                result = \"False\"\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n                    reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + responseBody + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n        if jira_comment_list:\r\n            result = \"True\"\r\n            message = \"Fetched all the comments from jira ticket\"\r\n        if not jira_comment_list:\r\n            result = \"True\"\r\n            message = \"No new comments to post from jiraIssueID \" + jiraticketID + \"to smaxRequestID \" + smaxticketID\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"jira_comment_list\": jira_comment_list,\r\n            \"attachmentData\": attachmentData, \"errorLogs\": errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\ndef getSmaxCommentData(smax_Url, smax_tenantId, smaxticketID, jiraticketID, smax_Token, smax_request_id_list,\r\n                       conn_timeout, status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    smax_comment_list = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    failCodes = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n\r\n        reqUrl = smax_Url + \"/rest/\" + smax_tenantId + \"/collaboration/comments/Request/\" + smaxticketID\r\n        response = requests.get(reqUrl, headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n\r\n        if response.status_code == 200:\r\n            smaxResponseData = json.loads(response.content)\r\n            if smaxResponseData != []:\r\n                for i in smaxResponseData:\r\n                    smaxcommentUserID = i['Submitter']['UserId']\r\n                    smaxcommentsData = i['Body']\r\n                    smaxCommentID = i['Id']\r\n                    if smaxcommentsData:\r\n                        smax_comment_list += smaxticketID + \"♪\" + smaxCommentID + \"♪\" + smaxcommentUserID + \"♪\" + str(\r\n                            smaxcommentsData) + \"♫♫\"\r\n            else:\r\n                result = \"True\"\r\n                message = \"No comments to post for smaxticketID \" + smaxticketID\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                result = \"False\"\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n                    reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + responseBody + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"smax_comment_list\": smax_comment_list,\r\n            \"errorLogs\": errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\ndef validateComment(smax_comment_list, jira_comment_list, smax_Url, smax_tenantId, smax_Token, status_codes,\r\n                    conn_timeout):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    comTag = \"@~Comment_From_Marketplace~\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    jira_updated_com_list = \"\"\r\n    jira_new_com_list = \"\"\r\n    jiraticketID = \"\"\r\n    smaxticketID = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        if jira_comment_list:\r\n            for jiraCom in jira_comment_list.split(\"♫♫\"):\r\n                if jiraCom:\r\n                    smaxCommentID = \"\"\r\n                    smaxExistingCommentID = \"\"\r\n                    jiraticketID = jiraCom.split(\"♪\")[0]\r\n                    smaxticketID = jiraCom.split(\"♪\")[1]\r\n                    jiracomUptUserName = jiraCom.split(\"♪\")[2]\r\n                    jiraComTag = \"jira_comments_id:\" + jiraCom.split(\"♪\")[3]\r\n                    jiraComment = jiraCom.split(\"♪\")[4]\r\n                    if smax_comment_list:\r\n                        if jiraComTag in smax_comment_list:\r\n                            # *****************get smaxID id of existing jira comment from smax*************************\r\n                            existingCommentID = getSmaxCommentIDOfExistingComment(smax_Url, smax_tenantId, smax_Token,\r\n                                                                                  jiraComTag, smaxticketID,\r\n                                                                                  jiraticketID, status_codes,\r\n                                                                                  conn_timeout)\r\n                            tresult = existingCommentID[\"result\"]\r\n                            message = existingCommentID[\"message\"]\r\n                            errorType += existingCommentID[\"errorType\"]\r\n                            errorLogs = existingCommentID[\"errorLogs\"]\r\n                            provider_failure = existingCommentID[\"provider_failure\"]\r\n                            smaxExistingCommentID = existingCommentID[\"existingCommentId\"]\r\n                            if tresult == \"False\" and provider_failure == \"True\":\r\n                                raise Exception(message)\r\n                            elif tresult == \"False\" and provider_failure != \"True\":\r\n                                continue\r\n                                # ******************fetch smaxid if exist in jiraComment*****************\r\n                        elif (jiraComment[len(jiraComment) - 110:].find(\"--smaxCommentID:\") != -1 and jiraComment[len(jiraComment) - 110:].find(\"Comment_From_Marketplace\") != -1):\r\n                            getsmaxComID = \"\"\r\n                            getSmaxIDfromCommTag = jiraComment.split(\"--smaxCommentID:\")\r\n                            getsmaxComID = getSmaxIDfromCommTag[1].split(\"@\")\r\n                            if getsmaxComID != \"\":\r\n                                smaxCommentID = getsmaxComID[0]\r\n                        if (smaxExistingCommentID != '' or smaxCommentID != ''):\r\n                            if smaxExistingCommentID:\r\n                                smaxCommentID = \"\"\r\n                                jira_updated_com_list += jiraticketID + \"♪\" + smaxticketID + \"♪\" + jiracomUptUserName + \"♪\" + jiraComTag + \"♪\" + smaxExistingCommentID + \"♪\" + smaxCommentID + \"♪\" + jiraComment + \"♫♫\"\r\n                            if smaxCommentID:\r\n                                smaxExistingCommentID = \"\"\r\n                                jira_updated_com_list += jiraticketID + \"♪\" + smaxticketID + \"♪\" + jiracomUptUserName + \"♪\" + jiraComTag + \"♪\" + smaxExistingCommentID + \"♪\" + smaxCommentID + \"♪\" + jiraComment + \"♫♫\"\r\n                        else:\r\n                            jira_new_com_list += jiraticketID + \"♪\" + smaxticketID + \"♪\" + jiracomUptUserName + \"♪\" + jiraComTag + \"♪\" + jiraComment + \"♫♫\"\r\n                    else:\r\n                        jira_new_com_list += jiraticketID + \"♪\" + smaxticketID + \"♪\" + jiracomUptUserName + \"♪\" + jiraComTag + \"♪\" + jiraComment + \"♫♫\"\r\n        if jira_new_com_list == \"\" and jira_updated_com_list == \"\":\r\n            result = \"True\"\r\n            message = \"No new comments to update from SMAX to JIRA\"\r\n    except Exception as e:\r\n        message = \"Failed to compare from SMAX comments with JIRA comments \" + str(e)\r\n        result = \"False\"\r\n        errorType = \"e10000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"jira_new_com_list\": jira_new_com_list,\r\n            \"jira_updated_com_list\": jira_updated_com_list, \"errorLogs\": errorLogs,\r\n            \"provider_failure\": provider_failure}\r\n\r\n\r\ndef postCommentsToSMAX(smax_Url, smax_tenantId, smax_Token, smaxticketID, jiraticketID,\r\n                       convertedJiraCommentData,\r\n                       jiraComTag, commentUpdateUserId,\r\n                       status_codes, conn_timeout):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    failCodes = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        data = {}\r\n        data[\"IsSystem\"] = \"false\"\r\n        data[\r\n            \"Body\"] = convertedJiraCommentData + \"<p><span style=\\\"color:#ffffff\\\">\" + jiraComTag + \"</span></p>\"\r\n        data[\"CommentFrom\"] = \"ExternalServiceDesk\"\r\n        data[\"Submitter\"] = {}\r\n        data[\"Submitter\"][\"UserId\"] = commentUpdateUserId\r\n        ProviderUrlBody = str(data)\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n        reqUrl = '{0}/rest/{1}/collaboration/comments/Request/{2}'.format(smax_Url, smax_tenantId, smaxticketID)\r\n        response = requests.post(reqUrl, headers=authHeaders, cookies=cookies, json=data, timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n        if response.status_code == 201:\r\n            message = \"Comments updated from JIRA to SMAX\"\r\n            result = \"True\"\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                result = \"False\"\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n                    reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n                    responseBody) + \": Response Code: \" + str(responseCode) + \"|||\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorLogs\": errorLogs,\r\n            \"provider_failure\": provider_failure}\r\n\r\n\r\ndef updateSmaxExistingComment(smax_Url, smax_tenantId, smax_Token, smaxticketID, jiraticketID, data, smaxCommID,\r\n                              status_codes, conn_timeout):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    failCodes = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n        ProviderUrlBody = str(data)\r\n        reqUrl = '{0}/rest/{1}/collaboration/comments/Request/{2}/{3}'.format(smax_Url, smax_tenantId, smaxticketID,\r\n                                                                              smaxCommID)\r\n        response = requests.put(reqUrl, headers=authHeaders, cookies=cookies, json=data, timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n        if response.status_code == 200 or response.status_code == 201:\r\n            message = \"Comments updated from JIRA to SMAX\"\r\n            result = \"True\"\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                result = \"False\"\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n                    reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n                    responseBody) + \": Response Code: \" + str(responseCode) + \"|||\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorLogs\": errorLogs,\r\n            \"provider_failure\": provider_failure}\r\n\r\n\r\ndef conversionMarkUpToHTML(arrayofComments):\r\n    message = \"\"\r\n    conversionResult = \"\"\r\n    jiraString = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    html = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    ProviderUrlBody = \"\"\r\n    smaxticketID = \"\"\r\n    jiraticketID = \"\"\r\n\r\n    try:\r\n        import markdown\r\n        import json\r\n        result = \"True\"\r\n        html = str(arrayofComments)\r\n        # check if table in data then convert it to HTML  table\r\n        if '||' in html:\r\n            for x in html:\r\n                if '||' in html:\r\n                    if '||' in html.split('||\\r\\n')[1]:\r\n                        tr_separator_count = html.split('||\\r\\n')[1].split('||', 1)[0].count('|')\r\n                        prebody = html.split('||')[0]\r\n                        i = 1\r\n                        position = 0\r\n                        len_middle_body = len(html.split('||\\r\\n')[0]) + 4\r\n                        for a in html.split('||\\r\\n')[1].split('|'):\r\n                            position = html.split('||\\r\\n')[1].find('|', position)\r\n                            if i == tr_separator_count:\r\n                                position += 1\r\n                                break\r\n                            else:\r\n                                position += 1\r\n                            i += 1\r\n                        last_content = html[len_middle_body + position:]\r\n                    else:\r\n                        tr_separator_count = html.split('||\\r\\n')[1].count('|')\r\n                        prebody = html.split('||')[0]\r\n                        last_content = html.split('||\\r\\n')[1][html.split('||\\r\\n')[1].rfind('|') + 1:]\r\n                    newhtml = prebody + '<table><thead><tr>'\r\n                    thtml = html.split('||', 1)[1]\r\n                    for i in thtml.split('||'):\r\n                        if not i[:2] == '\\r\\n':\r\n                            newhtml += '<th>' + i + '</th>'\r\n                        if i[:2] == '\\r\\n':\r\n                            newhtml += '</tr></thead>'\r\n                            break\r\n                    tmp_trhtml = html.split('||\\r\\n', 1)[1]\r\n                    trhtml = tmp_trhtml.split('|', 1)[1]\r\n                    newhtml += '<tbody><tr>'\r\n                    ri = 2\r\n                    for i in trhtml.split('|'):\r\n                        if not i[:2] == '\\r\\n':\r\n                            newhtml += '<td>' + i + '</td>'\r\n                        if i[:2] == '\\r\\n':\r\n                            newhtml += '</tr><tr>'\r\n                        if ri == tr_separator_count:\r\n                            newhtml += '</tr></tbody></table>\\n' + last_content\r\n                            html = newhtml\r\n                            break\r\n                        ri += 1\r\n                else:\r\n                    break\r\n        html = markdown.markdown(html, extensions=['markdown.extensions.tables'])\r\n        jiraString = html\r\n\r\n    except Exception as e:\r\n        message = \"Failure in converting markup to html\" + str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"OOExec\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,OOExec||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"jiraString\": jiraString, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage}\r\n\r\n\r\n# this function will form the comment body\r\ndef formCommentBody(MP_jiraIssueURL, basicAuthCredentials, smax_Url, smax_tenantId, jiraComment, attachmentDetails,\r\n                    smax_Token, domainName, smaxticketID, jiraticketID, status_codes, conn_timeout, fileExtTypeMapping):\r\n    message = \"\"\r\n    errorType = \"\"\r\n    result = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    convertComData = \"\"\r\n    replace_ThumbnailFromComments = \"\"\r\n    arrayofComments = \"\"\r\n    errorLogs = \"\"\r\n    provider_failure = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    try:\r\n        replace_ThumbnailFromComments = jiraComment.replace(\"|thumbnail\", \"\")\r\n        for x in replace_ThumbnailFromComments:\r\n            if '[^' in replace_ThumbnailFromComments:\r\n                c = replace_ThumbnailFromComments\r\n                t = c[:c.index('[^')] + '!' + c[c.index('[^') + 2:c.index(']', c.index('[^'))] + '!' + c[c.index(']',\r\n                                                                                                                 c.index(\r\n                                                                                                                     '[^')) + 1:]\r\n                replace_ThumbnailFromComments = t\r\n            else:\r\n                break\r\n        arrayofComments = replace_ThumbnailFromComments\r\n        count = 0\r\n        if \"!\" in arrayofComments:\r\n            for i in str(arrayofComments):\r\n                if i == '!':\r\n                    count = count + 1\r\n        if count > 1:\r\n            for x in arrayofComments:\r\n                getIndexNot1 = 0\r\n                getIndexNot2 = 0\r\n                if '!' in arrayofComments:\r\n                    c = arrayofComments\r\n                    getIndexNot1 = c.index('!')\r\n                    if \"!\" in c[getIndexNot1 + 1:]:\r\n                        ttgetIndexNot2 = c[getIndexNot1 + 1:].index('!')\r\n                        if ttgetIndexNot2:\r\n                            getIndexNot2 = getIndexNot1 + ttgetIndexNot2\r\n                    if getIndexNot2 and getIndexNot2 - getIndexNot1 > 1 and '\\n' not in c[getIndexNot1:getIndexNot2]:\r\n\r\n                        c_attach_file = c[c.index('!') + 1:c.index('!', c.index('!') + 1)]\r\n                        t = c[:c.index('!')] + c[c.index('!') + 1:c.index('!', c.index('!') + 1)] + c[\r\n                                                                                                    c.index('!') + len(\r\n                                                                                                        c_attach_file) + 2:]\r\n                        arrayofComments = t\r\n\r\n                        for file in attachmentDetails.split(\"♪\"):\r\n                            if file:\r\n                                fileName = file.split(\"♫\")[0]\r\n                                fileCreatedDate = file.split(\"♫\")[1]\r\n                                fileId = file.split(\"♫\")[2]\r\n                                if c_attach_file == fileName:\r\n                                    # download the attachment into local\r\n                                    downloadFromJIRA = downloadFileFromJIRA(MP_jiraIssueURL, basicAuthCredentials,\r\n                                                                            smax_Url,\r\n                                                                            smax_tenantId, smax_Token, fileId, fileName,\r\n                                                                            smaxticketID, jiraticketID, status_codes,\r\n                                                                            conn_timeout, fileExtTypeMapping)\r\n                                    tresult = downloadFromJIRA[\"result\"]\r\n                                    message = downloadFromJIRA[\"message\"]\r\n                                    errorType = downloadFromJIRA[\"errorType\"]\r\n                                    errorLogs += downloadFromJIRA[\"errorLogs\"]\r\n                                    provider_failure = downloadFromJIRA[\"provider_failure\"]\r\n                                    smaxAttachResponse = downloadFromJIRA[\"smaxAttachmentResponse\"]\r\n                                    smaxAttachResponse = smaxAttachResponse[: -1]\r\n                                    fileName1 = str(smaxAttachResponse.split(\"♫\")[1])\r\n                                    fileGUID = str(smaxAttachResponse.split(\"♫\")[0])\r\n\r\n                                    if tresult == \"False\" and provider_failure == \"True\":\r\n                                        raise Exception(message)\r\n                                    elif tresult == \"False\" and provider_failure != \"True\":\r\n                                        continue\r\n                                    c_attach_link = \"<p><img alt=\\\"\" + fileName1 + \"\\\" \" + \"height=\\\"180\\\" src=\\\"\" + smax_Url + \"/rest/\" + smax_tenantId + \"/frs/file-list/\" + fileGUID + \"?draftMode=true\\\" width=\\\"241\\\" /></p>\"\r\n\r\n                                    arrayofComments = arrayofComments.replace(c_attach_file, c_attach_link)\r\n                    else:\r\n\r\n                        arrayofComments = arrayofComments[:getIndexNot1] + \"♫\" + arrayofComments[getIndexNot1 + 1:]\r\n\r\n                        if getIndexNot2:\r\n                            arrayofComments = arrayofComments[:getIndexNot2] + \"♫\" + arrayofComments[getIndexNot2 + 1:]\r\n\r\n                else:\r\n                    break\r\n        arrayofComments = arrayofComments.replace(\"♫\", \"!\")\r\n        conversionMarkUpToHTMLData = conversionMarkUpToHTML(arrayofComments)\r\n        commentBody = conversionMarkUpToHTMLData[\"jiraString\"]\r\n        convertComData = commentBody\r\n        ## Name Formatting in the comment for names mentioned in the comment\r\n        if '[~' in convertComData:\r\n            newCommentBody = nameFormattingComments(convertComData, smax_Url, smax_tenantId, domainName, smax_Token,\r\n                                                    smaxticketID, jiraticketID, status_codes, conn_timeout)\r\n\r\n            tresult = newCommentBody[\"result\"]\r\n            message = newCommentBody[\"message\"]\r\n            errorType = newCommentBody[\"errorType\"]\r\n            errorLogs += newCommentBody[\"errorLogs\"]\r\n            provider_failure = newCommentBody[\"provider_failure\"]\r\n            if tresult == 'True':\r\n                convertComData = newCommentBody[\"convertComData\"]\r\n            if tresult == \"False\" and provider_failure == \"True\":\r\n                raise Exception(message)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = \"Failure in formatting the comment body \" + str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if errorProvider:\r\n            errorProvider = \"JIRA\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            e) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"convertComData\": convertComData, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"errorType\": errorType,\r\n            \"errorLogs\": errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\n# download file from JIRA to c:/temp/\r\ndef downloadFileFromJIRA(MP_jiraIssueURL, basicAuthCredentials, smax_Url,\r\n                         smax_tenantId, smax_Token, fileID, fileName, smaxticketID, jiraticketID, status_codes,\r\n                         conn_timeout, fileExtTypeMapping):\r\n    result = \"\"\r\n    message = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    smaxAttachmentResponse = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    provider_failure = \"\"\r\n    responseCode = \"\"\r\n    responseBody = \"\"\r\n    errorLogs = \"\"\r\n    failCodes = \"\"\r\n    try:\r\n        import platform\r\n        import os\r\n        import requests\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        jiraFileName = fileID + \"_\" + fileName\r\n        reqUrl = \"{0}secure/attachment/{1}/{2}\".format(MP_jiraIssueURL, fileID, fileName)\r\n        response = requests.get(reqUrl, auth=basicAuthCredentials, headers=authHeaders, timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n        if response.status_code == 200:\r\n            data = response.content\r\n            my_os = platform.system()\r\n            if (my_os == \"Windows\"):\r\n                downloadFilePath = 'c:\\\\temp\\\\' + jiraFileName\r\n                open(downloadFilePath, 'wb').write(data)\r\n            else:\r\n                downloadFilePath = '\\\\tmp\\\\' + jiraFileName\r\n                open(downloadFilePath, 'wb').write(data)\r\n\r\n            responseFromuploadFileToSMAX = uploadFileToSMAX(smax_Url, smax_tenantId, smax_Token, downloadFilePath,\r\n                                                            jiraFileName, smaxticketID, jiraticketID, status_codes,\r\n                                                            conn_timeout, fileExtTypeMapping)\r\n\r\n            smaxAttachmentResponse = responseFromuploadFileToSMAX[\"guid\"] + \"♫\" + responseFromuploadFileToSMAX[\r\n                \"fileName\"] + \"♪\"\r\n            tresult = responseFromuploadFileToSMAX[\"result\"]\r\n            message = responseFromuploadFileToSMAX[\"message\"]\r\n            errorType = responseFromuploadFileToSMAX[\"errorType\"]\r\n            errorLogs += responseFromuploadFileToSMAX[\"errorLogs\"]\r\n            provider_failure = responseFromuploadFileToSMAX[\"provider_failure\"]\r\n            if tresult == \"False\" and provider_failure == \"True\":\r\n                raise Exception(message)\r\n\r\n            result = \"True\"\r\n            message = fileName + \"downloaded in C:/temp folder\"\r\n\r\n            if os.path.exists(downloadFilePath):\r\n                os.remove(downloadFilePath)\r\n        else:\r\n            failCodes = status_codes[\"jira\"]\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n                    reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n                    responseBody) + \": Response Code: \" + str(responseCode) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"JIRA\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,JIRA||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"smaxAttachmentResponse\": smaxAttachmentResponse,\r\n            \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\n# upload file to SMAX Environment\r\ndef uploadFileToSMAX(smax_Url, smax_tenantId, smax_Token, filePath, fileName, smaxticketID, jiraticketID, status_codes,\r\n                     conn_timeout, fileExtTypeMapping):\r\n    result = ''\r\n    message = ''\r\n    guid = ''\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    fileType = ''\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    failCodes = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        import mimetypes\r\n        import imghdr\r\n        fileExtTypeMapping = json.loads(fileExtTypeMapping)\r\n        fileExtn = fileName[fileName.rfind('.') + 1:]\r\n        fileType = fileExtTypeMapping.get(fileExtn)\r\n        if fileType is None or fileType == '' or not fileType:\r\n            fileExtn = imghdr.what(filePath)\r\n            if fileExtn:\r\n                fileType = mimetypes.guess_type(filePath)[0] or 'application/octet-stream'\r\n                if fileExtn not in fileName[fileName.rfind('.'):]:\r\n                    fileName = fileName[:fileName.rfind('.')] + '.' + fileExtn\r\n                    fileType = 'image/' + fileExtn\r\n            else:\r\n                fileType = mimetypes.guess_type(filePath)[0] or 'application/octet-stream'\r\n        # File Extensions which are accepted by SMAX without any Mime Type or FileType\r\n        if fileType.lower() == 'nofiletype':\r\n            fileType = ''\r\n        payload = {}\r\n        files = [('files[]', (fileName, open(filePath, 'rb'), fileType))]\r\n        ProviderUrlBody = files\r\n        reqUrl = smax_Url + \"/rest/\" + smax_tenantId + \"/ces/attachment\"\r\n        headers = {'Cookie': 'LWSSO_COOKIE_KEY=' + smax_Token}\r\n        response = requests.request(\"POST\", reqUrl, headers=headers, data=payload, files=files,\r\n                                    timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n        if response.status_code == 200:\r\n            content = json.loads(response.content)\r\n            guid = content[\"guid\"]  ##[\"guid\"]\r\n            fileName = content[\"name\"]  ##[\"name\"]\r\n            result = 'True'\r\n            message = 'Successfully uploaded the attachment file: ' + fileName\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if responseCode in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                result = \"False\"\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n                    reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + str(\r\n                    ProviderUrlBody) + \"||ErrorMessage,\" + responseBody + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Upload file to SMAX :- \" + message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"guid\": guid, \"fileName\": fileName, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\ndef timeConversion(commentUpdateTime):\r\n    from datetime import datetime\r\n    # **************Format updated time******************\r\n    TimeValue = ((commentUpdateTime.split('T'))[1].split(\".\"))[0]\r\n    size = len(TimeValue)\r\n    TimeValueHM = TimeValue[:size - 3]\r\n    DateValue = ((commentUpdateTime.split('T'))[0])\r\n    date_string = str(DateValue) + \" \" + str(TimeValueHM)\r\n    convertedTime = datetime.fromisoformat(date_string)\r\n\r\n    return convertedTime\r\n\r\n\r\ndef fetchAttachmentDetails(attachmentData):\r\n    attachmentDetails = \"\"\r\n    for i in attachmentData:\r\n        # *********attachment details********\r\n        fileName = i[\"filename\"] + \"♫\"\r\n        fileCreated = i[\"created\"] + \"♫\"\r\n        fileID = i[\"id\"] + \"♪\"\r\n        attachmentDetails += fileName + fileCreated + fileID\r\n\r\n    return attachmentDetails\r\n\r\n\r\ndef getPostData(uptJiraCom, convertedJiraCommentData, commentUpdateUserId):\r\n    smaxCommID = \"\"\r\n    removeSmaxTag = \"\"\r\n    jiraComTag = uptJiraCom.split(\"♪\")[3]\r\n    smaxExistingCommentID = str(uptJiraCom.split(\"♪\")[4])\r\n    smaxCommentID = str(uptJiraCom.split(\"♪\")[5])\r\n\r\n    # ***********update the smax comment with jira commnet*************\r\n    data = {}\r\n    data[\"IsSystem\"] = \"false\"\r\n    if smaxCommentID != '':\r\n        if convertedJiraCommentData.find(\"{color:#FFFFFF}Do not edit this line\") != -1:\r\n            removeSmaxTag = convertedJiraCommentData.split(\r\n                \"{color:#FFFFFF}Do not edit this line\")\r\n        elif convertedJiraCommentData.find(\"{color:white}Do not edit this line\") != -1:\r\n            removeSmaxTag = convertedJiraCommentData.split(\r\n                \"{color:white}Do not edit this line\")\r\n        elif convertedJiraCommentData.find(\r\n                \"{color:#ffffff}Do not edit this line\") != -1:\r\n            removeSmaxTag = convertedJiraCommentData.split(\r\n                \"{color:#ffffff}Do not edit this line\")\r\n            # convertedJiraCommentData = removeSmaxTag[0]\r\n        data[\"Body\"] = removeSmaxTag[0]\r\n    else:\r\n        data[\r\n            \"Body\"] = convertedJiraCommentData + \"<p><span style=\\\"color:#ffffff\\\">\" + jiraComTag + \"</span></p>\"\r\n    data[\"CommentFrom\"] = \"ExternalServiceDesk\"\r\n    data[\"Submitter\"] = {}\r\n    data[\"Submitter\"][\"UserId\"] = commentUpdateUserId\r\n    if smaxCommentID:\r\n        data[\"Id\"] = smaxCommentID\r\n        smaxCommID = smaxCommentID\r\n    else:\r\n        data[\"Id\"] = smaxExistingCommentID\r\n        smaxCommID = smaxExistingCommentID\r\n\r\n    return {\"data\": data, \"smaxCommID\": smaxCommID}\r\n\r\n\r\ndef getSmaxCommentIDOfExistingComment(smax_Url, smax_tenantId, smax_Token, comparisionSTring, smaxticketID,\r\n                                      jiraticketID, status_codes, conn_timeout):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    existingCommentId = ''\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    failCodes = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n        reqUrl = smax_Url + \"/rest/\" + smax_tenantId + \"/collaboration/comments/Request/\" + smaxticketID\r\n        response = requests.get(reqUrl, headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n        responseBody = str(response.content)\r\n        responseCode = str(response.status_code)\r\n        if response.status_code == 200:\r\n            responseData = json.loads(response.content)\r\n            if responseData != []:\r\n                for i in responseData:\r\n                    commentsData = i['Body']\r\n                    commentID = i[\"Id\"]\r\n\r\n                    if commentsData.find(comparisionSTring) != -1:\r\n                        existingCommentId = commentID\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if response.status_code in failCodes:\r\n                provider_failure = \"True\"\r\n                msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                raise Exception(msg)\r\n            else:\r\n                result = \"False\"\r\n                errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n                    reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + responseBody + \": Response Code: \" + responseCode + \"|||\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n    return {\"result\": result, \"existingCommentId\": existingCommentId, \"message\": message,\r\n            \"errorType\": errorType, \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider,\r\n            \"errorMessage\": errorMessage, \"errorLogs\": errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\n# format names on comments for SMAX Format\r\ndef nameFormattingComments(convertComData, smax_Url, smax_tenantId, domainName, smax_Token, smaxticketID, jiraticketID,\r\n                           status_codes, conn_timeout):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = ''\r\n    errorMessage = ''\r\n    errorSeverity = ''\r\n    errorProvider = ''\r\n    user_upn_list = ''\r\n    user_list = ''\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseBody = \"\"\r\n    responseCode = \"\"\r\n    provider_failure = \"\"\r\n    errorLogs = \"\"\r\n    failCodes = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n\r\n        if convertComData and '[~' in convertComData:\r\n            tConverComData = '[~' + convertComData.split('[~', 1)[1]\r\n            for tuser in tConverComData.split('[~'):\r\n                if tuser and ']' in tuser:\r\n                    user = tuser.split(']')[0]\r\n                    user_list += user + ','\r\n                    user_upn_list += \"'\" + user + '@' + domainName + \"',\"\r\n\r\n            user_upn_list = user_upn_list[:-1]\r\n            reqUrl = smax_Url + \"/rest/\" + smax_tenantId + \"/ems/Person?layout=Id,Upn,Email,Name&filter=Upn+in+(\" + user_upn_list + \")\"\r\n\r\n            response = requests.get(reqUrl, headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n            responseBody = str(response.text)\r\n            responseCode = str(response.status_code)\r\n            if response.status_code == 200:\r\n                sdata = json.loads(response.text)\r\n                for entity in sdata['entities']:\r\n                    upn = entity[\"properties\"][\"Upn\"]\r\n                    name = entity[\"properties\"][\"Name\"]\r\n                    for user in user_list.split(','):\r\n                        if user and user in upn:\r\n                            convertComData = convertComData.replace('[~' + user + ']',\r\n                                                                    '<strong>' + name + '</strong>')\r\n                message = 'Comments body formatted with User Names successfully'\r\n                result = 'True'\r\n            else:\r\n                failCodes = status_codes[\"smax\"]\r\n                if response.status_code in failCodes:\r\n                    provider_failure = \"True\"\r\n                    msg = \"Unsupported response from provider: \" + responseBody + \", Response Code: \" + responseCode\r\n                    raise Exception(msg)\r\n                else:\r\n                    result = \"False\"\r\n                    errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n                        reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + responseBody + \": Response Code: \" + responseCode + \"|||\"\r\n        else:\r\n            message = 'This Comments body does not have any Users referenced in it.'\r\n            result = 'True'\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = \"Failure in getting UserID from SMAX\" + message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"convertComData\": convertComData,\r\n            \"errorLogs\": errorLogs, \"provider_failure\": provider_failure}\r\n\r\n\r\ndef getUserID(smax_Token, smax_Url, smax_tenantId, smax_Bridge_ID, jiracomUptUserName, smaxticketID, jiraticketID,\r\n              domainName, conn_timeout):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    commentUpdateUserId = \"\"\r\n    reqUrl = \"\"\r\n    ProviderUrlBody = \"\"\r\n    responseCode = \"\"\r\n    responseBody = \"\"\r\n    errorLogs = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_Token}\r\n        reqUrl = smax_Url + \"/rest/\" + smax_tenantId + \"/ems/Person?layout=Id,Upn,Email,EmployeeStatus&filter=Upn='\" + jiracomUptUserName + \"@\" + domainName + \"'\"\r\n        response = requests.get(reqUrl, headers=authHeaders, cookies=cookies, timeout=int(conn_timeout))\r\n        responseCode = str(response.status_code)\r\n        responseBody = str(response.content)\r\n\r\n        if response.status_code == 200:\r\n            entityJsonArray = json.loads(response.content)\r\n            if 'properties' in str(entityJsonArray):\r\n                commentUpdateUserId = entityJsonArray[\"entities\"][0][\"properties\"][\"Id\"]\r\n            else:\r\n                commentUpdateUserId = smax_Bridge_ID\r\n        else:\r\n            commentUpdateUserId = smax_Bridge_ID\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_failure = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + str(\r\n            reqUrl) + \"||ErrorProvider,SMAX||ProviderUrlBody,\" + ProviderUrlBody + \"||ErrorMessage,\" + str(\r\n            message) + \": Response Code: \" + responseCode + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType, \"errorSeverity\": errorSeverity,\r\n            \"errorProvider\": errorProvider, \"errorMessage\": errorMessage, \"commentUpdateUserId\": commentUpdateUserId,\r\n            \"errorLogs\": errorLogs}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - errorLogs
    - provider_failure
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
