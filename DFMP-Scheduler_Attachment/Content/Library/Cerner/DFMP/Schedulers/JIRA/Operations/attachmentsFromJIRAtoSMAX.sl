########################################################################################################################
#!!
#!!#
########################################################################################################################
namespace: Cerner.DFMP.Schedules.JIRA.Operations
operation:
  name: attachmentsFromJIRAtoSMAX
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - projectNames: "${get_sp('MarketPlace.jiraProjects')}"
    - creator: "${get_sp('MarketPlace.jiraIssueCreator')}"
    - lastUpdate:
        required: false
    - smax_FieldID
    - smax_authToken
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - fileExtTypeMapping: "${get_sp('Cerner.DigitalFactory.AttachmentExtnFiletype_mapping')}"
    - jira_smaxjiraid_list:
        required: false
    - smax_request_id_list:
        required: false
    - http_fail_status_codes: "${get_sp('Cerner.DigitalFactory.http_fail_status_codes')}"
    - previous_errorLogs:
        required: false
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Jira and Smax\r\n#   Author: Ashwini Shalke (ashwini.shalke@cerner.com), MicroFocus International\r\n#   Operation : attachmentsFromJiratoSMAX\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  smax_authToken\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  projectNames\r\n#       -  creator\r\n#       -  lastUpdate\r\n#       -  smax_FieldID\r\n#       -  conn_timeout\r\n#       -  fileExtTypeMapping\r\n#       -  previous_errorLogs\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorMessage\r\n#       - errorProvider\r\n#       - errorSeverity\r\n# this operation will fetch all the attachments from JIRA to SMAX\r\n# Modified on : 29 April 2021\r\n# modified the code to fetch the properties of file like :- size, creator, created date.\r\n# Modified on 16 Jn 2022 by Rakesh Sharma to read the correct type of Image apart from what is coming from Jira. (Function uploadFileToSMAX modified)\r\n# Modified on 21 Jn 2022 by Ashwini Shalke to re-built the logic for attachments\r\n# Modified on 20 July 2022 by Ashwini Shalke for error logs\r\n# Modified on 03 Nov 2022 by Rakesh Sharma to get the Jira created date if lastupdate is NULL\r\n# Modified on 11 Nov 2022 by Rakesh Sharma to zip the file where there is no file extension in the file name\r\n# Modified on 30 Nov 2022 by Rakesh Sharma to zip the file on failure as Invalid File Format while uploading to SMAX\r\n#################################################################################\r\n\r\nimport sys, os\r\nimport subprocess\r\nimport time\r\nimport datetime\r\nimport requests\r\nimport http.client\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\ninstall(\"zipfile\")\r\n\r\n\r\n# main function :- fetch all attachment from JIRA based on jiraAndSMaxIDs\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, smax_authToken, smax_tenantId,\r\n            smax_baseurl, smax_FieldID, fileExtTypeMapping,\r\n            jira_smaxjiraid_list, smax_request_id_list, http_fail_status_codes, lastUpdate, creator,\r\n            previous_errorLogs):\r\n    message = \"\"\r\n    result = \"\"\r\n    jiraticketID = \"\"\r\n    smaxticketID = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    tmsg = \"\"\r\n    reqUrl = \"\"\r\n    lastUpdate_null = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        if lastUpdate:\r\n            lastUpdate = lastUpdate[:16]\r\n        else:\r\n            lastUpdate_null = True\r\n\r\n        jiraBasicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser, MarketPlace_jiraPassword)\r\n\r\n\r\n        if len(jira_smaxjiraid_list.split(\"♪\")) > 0:\r\n            for issues in jira_smaxjiraid_list.split(\"♪\"):\r\n                if issues:\r\n                    status_codes = json.loads(http_fail_status_codes)\r\n                    jiraticketID = str(issues.split(\"♫\")[0])\r\n                    smaxticketID = str(issues.split(\"♫\")[1])\r\n                    #print(\"SMAXID\", smaxticketID)\r\n                    ## if lastupdate date is null to the operation then et the created date of Jira Issue:\r\n                    if lastUpdate_null:\r\n                        lastupdt = get_created_dt(jiraBasicAuthCredentials, MarketPlace_jiraIssueURL, jiraticketID,smaxticketID,status_codes)\r\n\r\n                        tresult = lastupdt[\"result\"]\r\n                        message = lastupdt[\"message\"]\r\n                        errorType = lastupdt[\"errorType\"]\r\n                        provider_issue = lastupdt[\"provider_issue\"]\r\n                        lastUpdate = lastupdt[\"jiraCreatedDate\"][:16].replace('T',' ')\r\n                        errorLogs += lastupdt[\"errorLogs\"]\r\n                        if tresult == \"False\" and provider_issue == \"True\":\r\n                            raise Exception(message)\r\n                        elif tresult == \"False\" and provider_issue != \"True\":\r\n                            continue\r\n\r\n                    ###################variable declaration #################################################################################\r\n                    smaxAttachResponse = []\r\n                    attachmentDetailsFromSMAX = []\r\n                    attachmentDetailsFromJIRA = []\r\n                    jiraUpdatedDate = \"\"\r\n                    filesListFromJira = []\r\n                    jiraAttachments = []\r\n                    downloadFileDetailArray = []\r\n                    updatedDownloadFileDetailArray = []\r\n                    smaxFileDetailArray = []\r\n\r\n                    response = \"\"\r\n\r\n                    ####################calling getAttachmentFromJIRA to fetch all attachments from Jira based on jiraTicketID##########\r\n                    attachmentsFromJIRA = getAttachmentFromJIRA(jiraBasicAuthCredentials,MarketPlace_jiraIssueURL, smaxticketID, jiraticketID,\r\n                                                                lastUpdate, smax_FieldID, smax_request_id_list,\r\n                                                                status_codes)\r\n\r\n                    tresult = attachmentsFromJIRA[\"result\"]\r\n                    message = attachmentsFromJIRA[\"message\"]\r\n                    errorType = attachmentsFromJIRA[\"errorType\"]\r\n                    provider_issue = attachmentsFromJIRA[\"provider_issue\"]\r\n                    attachmentDetailsFromJIRA = attachmentsFromJIRA[\"jiraAttachments\"]\r\n                    jiraUpdatedDate = attachmentsFromJIRA[\"jiraUpdatedDate\"]\r\n                    errorLogs += attachmentsFromJIRA[\"errorLogs\"]\r\n                    if tresult == \"False\" and provider_issue == \"True\":\r\n                        raise Exception(message)\r\n                    elif tresult == \"False\" and provider_issue != \"True\":\r\n                        continue\r\n\r\n                    ####################calling fetchAttachmentsFromSMAX to fetch all attachments from SMAX based on smaxticketID###############\r\n                    if attachmentDetailsFromJIRA != []:\r\n                        attachmentsFromSmax = fetchAttachmentsFromSMAX(smax_authToken, smax_tenantId, smax_baseurl,\r\n                                                                       smaxticketID, jiraticketID, status_codes)\r\n\r\n                        tresult = attachmentsFromSmax[\"result\"]\r\n                        message = attachmentsFromSmax[\"message\"]\r\n                        errorType = attachmentsFromSmax[\"errorType\"]\r\n                        errorProvider = attachmentsFromSmax[\"errorProvider\"]\r\n                        provider_issue = attachmentsFromSmax[\"provider_issue\"]\r\n                        attachmentDetailsFromSMAX = attachmentsFromSmax[\"attachmentDetailsArray\"]\r\n                        errorLogs += attachmentsFromSmax[\"errorLogs\"]\r\n                        if tresult == \"False\" and provider_issue == \"True\":\r\n                            raise Exception(message)\r\n                        elif tresult == \"False\" and provider_issue != \"True\":\r\n                            continue\r\n\r\n                        ####################calling compareFiles to get the list of new attachments for SMAX######################################\r\n                        filesFromJira = compareFiles(attachmentDetailsFromSMAX, attachmentDetailsFromJIRA, smaxticketID,\r\n                                                     lastUpdate, MarketPlace_jiraUser, jiraUpdatedDate)\r\n                        result = filesFromJira[\"result\"]\r\n                        message = filesFromJira[\"message\"]\r\n                        errorType = filesFromJira[\"errorType\"]\r\n                        errorLogs += filesFromJira[\"errorMessage\"]\r\n                        filesListFromJira = filesFromJira['attachmentDetailsFromJIRA']\r\n\r\n                        ####################calling downloadFileFromJIRA to get the details of filePath and data##################################\r\n                        if filesListFromJira != []:\r\n                            downloadFromJIRA = downloadFileFromJIRA(jiraBasicAuthCredentials,MarketPlace_jiraIssueURL, filesListFromJira,\r\n                                                                    fileExtTypeMapping, jiraticketID, smaxticketID,\r\n                                                                    status_codes)\r\n\r\n                            tresult = downloadFromJIRA[\"result\"]\r\n                            message = downloadFromJIRA[\"message\"]\r\n                            errorType = downloadFromJIRA[\"errorType\"]\r\n                            errorProvider = downloadFromJIRA[\"errorProvider\"]\r\n                            provider_issue = downloadFromJIRA[\"provider_issue\"]\r\n                            downloadFileDetailArray = downloadFromJIRA['downloadFileDetailArray']\r\n                            errorLogs += downloadFromJIRA[\"errorLogs\"]\r\n                            if tresult == \"False\" and provider_issue == \"True\":\r\n                                raise Exception(message)\r\n                            elif tresult == \"False\" and provider_issue != \"True\":\r\n                                continue\r\n                        else:\r\n                            message = \"No attachment list to update\"\r\n                            result = \"True\"\r\n\r\n                        ####################concating the response from downloadFileFromJIRA and fetchAttachmentsFromSMAX#########################\r\n                        if downloadFileDetailArray:\r\n                            updateExternalID = getExternalID(smax_baseurl, smax_authToken, smax_tenantId, jiraticketID,\r\n                                                             smaxticketID, status_codes, downloadFileDetailArray)\r\n\r\n                            tresult = updateExternalID[\"result\"]\r\n                            message = updateExternalID[\"message\"]\r\n                            errorType = updateExternalID[\"errorType\"]\r\n                            errorProvider = updateExternalID[\"errorProvider\"]\r\n                            provider_issue = updateExternalID[\"provider_issue\"]\r\n                            updatedDownloadFileDetailArray = updateExternalID[\"downloadFileDetailArray\"]\r\n                            errorLogs += updateExternalID[\"errorLogs\"]\r\n                            if tresult == \"False\" and provider_issue == \"True\":\r\n                                raise Exception(message)\r\n                            elif tresult == \"False\" and provider_issue != \"True\":\r\n                                continue\r\n\r\n                        ####################concating the response from downloadFileFromJIRA and fetchAttachmentsFromSMAX##########################\r\n                        if updatedDownloadFileDetailArray:\r\n                            uploadFileToSMAXDetail = uploadFileToSMAX(smax_baseurl, smax_authToken, smax_tenantId,\r\n                                                                      updatedDownloadFileDetailArray,\r\n                                                                      fileExtTypeMapping, jiraticketID, smaxticketID,\r\n                                                                      status_codes)\r\n\r\n                            tresult = uploadFileToSMAXDetail[\"result\"]\r\n                            message = uploadFileToSMAXDetail[\"message\"]\r\n                            errorType = uploadFileToSMAXDetail[\"errorType\"]\r\n                            provider_issue = uploadFileToSMAXDetail[\"provider_issue\"]\r\n                            smaxFileDetailArray = uploadFileToSMAXDetail[\"fileDetailsArray\"]\r\n                            errorLogs += uploadFileToSMAXDetail[\"errorLogs\"]\r\n                            if tresult == \"False\" and provider_issue == \"True\":\r\n                                raise Exception(message)\r\n                            elif tresult == \"False\" and provider_issue != \"True\":\r\n                                continue\r\n\r\n                        ####################concating the response from downloadFileFromJIRA and fetchAttachmentsFromSMAX###################################\r\n                        if len(smaxFileDetailArray) > 0:\r\n                            totalSmaxAttachResponse = smaxFileDetailArray + attachmentDetailsFromSMAX\r\n\r\n                            ########################calling postAttachmentsToSMAX to post attachment to smaxticketID###########################################\r\n                            postAttachmentToSMAX = postAttachmentsToSMAX(smax_authToken, smax_tenantId, smax_baseurl,\r\n                                                                         smaxticketID, jiraticketID,\r\n                                                                         totalSmaxAttachResponse, status_codes)\r\n\r\n                            tresult = postAttachmentToSMAX[\"result\"]\r\n                            message = postAttachmentToSMAX[\"message\"]\r\n                            errorType = postAttachmentToSMAX[\"errorType\"]\r\n                            provider_issue = postAttachmentToSMAX[\"provider_issue\"]\r\n                            errorLogs += postAttachmentToSMAX[\"errorLogs\"]\r\n                            if tresult == \"False\" and provider_issue == \"True\":\r\n                                raise Exception(message)\r\n                            elif tresult == \"False\" and provider_issue != \"True\":\r\n                                continue\r\n                    else:\r\n                        result = \"True\"\r\n                        message += \"No attachments in JIRA, SMAXID :\" + str(smaxticketID)\r\n\r\n        result = True\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"JIRA\"\r\n        if not errorLogs:\r\n            errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs + previous_errorLogs, \"provider_issue\": provider_issue}\r\n\r\n\r\n# get the attachment list from JIRA based on jiraTicketID and lastUpdate#############################################\r\ndef getAttachmentFromJIRA(jiraBasicAuthCredentials, MarketPlace_jiraIssueURL, smaxticketID,\r\n                          jiraticketID,\r\n                          lastUpdate, smax_FieldID, smax_request_id_list, status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    data = {}\r\n    jiraAttachments = []\r\n    jiraUpdatedDate = \"\"\r\n    response = \"\"\r\n    tmsg = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    responseCode = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        import time\r\n        data = {}\r\n        if lastUpdate:\r\n            data[\"jql\"] = \"issue={0} AND updated >'{1}'\".format(jiraticketID, lastUpdate)\r\n        else:\r\n            data[\"jql\"] = \"issue={0}\".format(jiraticketID)\r\n\r\n        reqUrl = '{0}rest/api/2/search'.format(MarketPlace_jiraIssueURL)\r\n        data[\"startAt\"] = \"0\"\r\n        data[\"maxResults\"] = \"500\"\r\n        data[\"fields\"] = [\"attachment\", smax_FieldID, \"updated\"]\r\n        inputString = json.dumps(data)\r\n\r\n        headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n        number = 0\r\n        while number < 4:\r\n            response = requests.post(reqUrl, auth=jiraBasicAuthCredentials, headers=headers,\r\n                                     data=inputString)\r\n            responseCode = str(response.status_code)\r\n\r\n            if response.status_code == 200:\r\n                responseData = response.json()\r\n\r\n                if responseData[\"issues\"] == []:\r\n                    time.sleep(5)\r\n                    number = number + 1\r\n                else:\r\n                    jiraAttachments = responseData[\"issues\"][0][\"fields\"][\"attachment\"]\r\n                    jiraUpdatedDate = responseData[\"issues\"][0][\"fields\"][\"updated\"]\r\n                    break\r\n            else:\r\n                failCodes = status_codes[\"jira\"]\r\n                if responseCode in failCodes:\r\n                    provider_issue = \"True\"\r\n                    msg = \"getAttachmentFromJIRA:- Unsupported response from provider: \" + str(\r\n                        response.text) + \" :Response Code: \" + str(response.status_code)\r\n                    raise Exception(msg)\r\n                else:\r\n                    result = \"False\"\r\n                    errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                        response.content) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n        if responseData[\"issues\"] == []:\r\n            msg = \"No data response from Jira: \" + str(response.content) + \":JIRAID: \" + str(jiraticketID)\r\n            raise Exception(msg)\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs, \"provider_issue\": provider_issue,\r\n            \"jiraAttachments\": jiraAttachments, \"jiraUpdatedDate\": jiraUpdatedDate}\r\n\r\n\r\n# coverting time ######################################################################################################\r\ndef formatDateTime(jiraAttachmentCreatedTime, lastUpdate):\r\n    from datetime import datetime\r\n    TimeValue = ((jiraAttachmentCreatedTime.split('T'))[1].split(\".\"))[0]\r\n    size = len(TimeValue)\r\n    TimeValueHM = TimeValue[:size - 3]\r\n    DateValue = ((jiraAttachmentCreatedTime.split('T'))[0])\r\n    date_string = str(DateValue) + \" \" + str(TimeValueHM)\r\n    attachUpdateDateTime = datetime.fromisoformat(date_string)\r\n    lastUpdateDateTime = datetime.fromisoformat(lastUpdate)\r\n\r\n    return {\"attachUpdateDateTime\": attachUpdateDateTime, \"lastUpdateDateTime\": lastUpdateDateTime}\r\n\r\n\r\n# comparing the files in SMAX and JIRA and preparing the attachment list for SMAX\r\ndef compareFiles(attachmentDetailsFromSMAX, fileListFromJIRA, smaxID, lastUpdate, MarketPlace_jiraUser,\r\n                 jiraUpdatedDate):\r\n    attachIDSMAX = \"\"\r\n    attachmentDetailsFromJIRA = []\r\n    result = \"\"\r\n    message = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n\r\n    try:\r\n        for file in fileListFromJIRA:\r\n            jiraFileName = file[\"filename\"]\r\n            jiraFileID = file[\"id\"]\r\n            jiraAttachmentCreatedTime = file[\"created\"]\r\n            jiraAuthorEmail = file[\"author\"][\"emailAddress\"]\r\n            jiraAuthorName = file[\"author\"][\"name\"]\r\n            jiraFileSize = file[\"size\"]\r\n            attachmentDetailFromJIRA = {}\r\n\r\n            if not lastUpdate:\r\n                lastUpdate = jiraUpdatedDate[:16]\r\n\r\n            dateTimeFormat = formatDateTime(jiraAttachmentCreatedTime, lastUpdate)\r\n            jiraAttachUpdateDateTime = dateTimeFormat[\"attachUpdateDateTime\"]\r\n            lastUpdateDateTime = dateTimeFormat[\"lastUpdateDateTime\"]\r\n\r\n            if (jiraAttachUpdateDateTime >= lastUpdateDateTime):\r\n                if jiraFileName != \"\" and jiraFileSize > 0:\r\n\r\n                    if jiraAuthorName == MarketPlace_jiraUser:\r\n                        message = \"This attachment is from MarketPlace\"\r\n                        continue\r\n\r\n                    if attachmentDetailsFromSMAX:\r\n                        for attach in attachmentDetailsFromSMAX:\r\n                            attachId = attach.get(\"guid\")\r\n                            attachName = attach.get(\"fileName\")\r\n                            if not attachName:\r\n                                attachName = attach.get(\"name\")\r\n                            if not attachName:\r\n                                attachName = 'NONE'\r\n\r\n                            attachIDSMAX = attachId[:8]\r\n                            flag = \"\"\r\n                            jiraNewFileName = jiraFileID + \"_\" + jiraFileName\r\n\r\n                            if attachIDSMAX in jiraFileName[:len(attachIDSMAX)] or smaxID in jiraFileName[\r\n                                                                                             :len(\r\n                                                                                                 attachIDSMAX)] or attachIDSMAX in jiraNewFileName[\r\n                                                                                                                                   :len(\r\n                                                                                                                                       attachIDSMAX)]:\r\n                                result = \"True\"\r\n                                message = \"Parent of attachment is SMAX\"\r\n                                break\r\n                            elif jiraFileID in attachName[:len(jiraFileID)]:\r\n                                result = \"True\"\r\n                                message = \"Jira Attachment exists in SMAX\"\r\n                                break\r\n                            else:\r\n                                flag = \"attachment doesn't exists\"\r\n                    else:\r\n                        flag = \"attachment doesn't exists\"\r\n\r\n                    if flag == \"attachment doesn't exists\":\r\n                        attachmentDetailFromJIRA.update({\"fileName\": jiraFileName})\r\n                        attachmentDetailFromJIRA.update({\"fileID\": jiraFileID})\r\n                        attachmentDetailFromJIRA.update({\"authorEmail\": jiraAuthorEmail})\r\n\r\n                        if attachmentDetailFromJIRA:\r\n                            attachmentDetailsFromJIRA.append(attachmentDetailFromJIRA)\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorType = \"e20000\"\r\n\r\n    return {\"attachmentDetailsFromJIRA\": attachmentDetailsFromJIRA, \"result\": result, \"message\": message,\r\n            \"errorMessage\": errorMessage, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity}\r\n\r\n\r\n# download file from JIRA to c:/temp/\r\ndef downloadFileFromJIRA(jiraBasicAuthCredentials,MarketPlace_jiraIssueURL , filesListFromJira,\r\n                         fileExtTypeMapping, jiraticketID, smaxticketID, status_codes):\r\n    import platform\r\n    import os\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    message = \"\"\r\n    downloadFilePath = \"\"\r\n    result = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    downloadFileDetailArray = []\r\n    response = \"\"\r\n    responseCode = \"\"\r\n\r\n    try:\r\n        for file in filesListFromJira:\r\n            fileID = file.get(\"fileID\")\r\n            fileName = file.get(\"fileName\")\r\n            authorEmail = file.get(\"authorEmail\")\r\n            downloadFileDetails = {}\r\n\r\n            jiraFileName = fileID + \"_\" + fileName\r\n\r\n            authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n            reqUrl = \"{0}secure/attachment/{1}/{2}\".format(MarketPlace_jiraIssueURL, fileID, fileName)\r\n\r\n            response = requests.get(reqUrl, auth=jiraBasicAuthCredentials, headers=authHeaders)\r\n            responseCode = str(response.status_code)\r\n\r\n            if response.status_code == 200:\r\n                data = response.content\r\n                my_os = platform.system()\r\n                jiraFileName = fileID + \"_\" + fileName\r\n\r\n                downloadFilePath = downloadFileInDrive(jiraFileName, data)\r\n\r\n                if downloadFilePath != \"\":\r\n                    downloadFileDetails.update({\"filePath\": downloadFilePath})\r\n                if fileName:\r\n                    downloadFileDetails.update({\"fileName\": jiraFileName})\r\n                if authorEmail:\r\n                    downloadFileDetails.update({\"fileAuthorEmail\": authorEmail})\r\n\r\n                if downloadFileDetails:\r\n                    downloadFileDetailArray.append(downloadFileDetails)\r\n                    result = \"True\"\r\n                    message = \"Got the downloadFileDetailArray :-\"\r\n            else:\r\n                failCodes = status_codes[\"jira\"]\r\n                if responseCode in failCodes:\r\n                    provider_issue = \"True\"\r\n                    msg = \"DownloadFileFromJIRA :- Unsupported response from the Provider  \" + str(\r\n                        response.text) + \" :Response Code: \" + str(\r\n                        response.status_code)\r\n                    raise Exception(msg)\r\n                else:\r\n                    errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                        response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs, \"provider_issue\": provider_issue,\r\n            \"downloadFileDetailArray\": downloadFileDetailArray}\r\n\r\n\r\n# upload file to SMAX Environment\r\ndef uploadFileToSMAX(smax_baseurl, smax_authToken, smax_tenantId, updatedDownloadFileDetailArray, fileExtTypeMapping,\r\n                     jiraticketID, smaxticketID, status_codes):\r\n    import requests\r\n    import json\r\n    import mimetypes\r\n\r\n    result = \"\"\r\n    message = \"\"\r\n    guid = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    fileType = \"\"\r\n    errorLogs = \"\"\r\n    provider_issue = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    fileDetails = {}\r\n    fileDetailsArray = []\r\n    response = \"\"\r\n    responseCode = \"\"\r\n    fileName = ''\r\n\r\n\r\n    try:\r\n        import imghdr\r\n        import json\r\n\r\n        fileExtTypeMapping = json.loads(fileExtTypeMapping)\r\n        for file in updatedDownloadFileDetailArray:\r\n            fileName = str(file[\"fileName\"])\r\n            filePath = str(file[\"filePath\"])\r\n            fileCreator = file.get(\"externalID\")\r\n            creator = \"\"\r\n            fileExtn = ''\r\n            invalid_file_format = ''\r\n\r\n            fileDetails = {}\r\n            if '.' in fileName:\r\n                fileExtn = fileName[fileName.rfind('.') + 1:]\r\n            # if file does not have file extension, then zip it\r\n            # run the loop two times, first time as normal and second time if the previous failure was due to Invalid file format\r\n            ## then Zip the file and upload the zipped file to SMAX\r\n            for i in [1,2]:\r\n                if not fileExtn or invalid_file_format:\r\n                    from zipfile import ZipFile as tzip\r\n                    fname = fileName\r\n                    fileName = fileName.split('.')[0] + '.zip'\r\n                    with tzip(fileName,mode='w') as azip:\r\n                        fdata = open(filePath, 'rb').read()\r\n                        azip.writestr(zinfo_or_arcname=fname,data=fdata)\r\n                        #azip.write(filePath)\r\n                    fileExtn = 'zip'\r\n                    filePath = azip.filename\r\n\r\n                # Get file types permitted in SMAX for know file types\r\n                fileType = fileExtTypeMapping.get(fileExtn)\r\n\r\n                # if file type is unknown yet then try to get the file type\r\n                if fileType is None or fileType == '' or not fileType:\r\n                    if fileExtn != 'zip':\r\n                        fileExtn = imghdr.what(filePath)\r\n\r\n                    if fileExtn and 'zip' not in fileExtn:\r\n                        fileType = mimetypes.guess_type(filePath)[0] or 'application/octet-stream'\r\n                        if fileExtn not in fileName[fileName.rfind('.'):]:\r\n                            fileName = fileName[:fileName.rfind('.')] + '.' + fileExtn\r\n                            fileType = 'image/' + fileExtn\r\n                    else:\r\n                        fileType = mimetypes.guess_type(filePath)[0] or 'application/octet-stream'\r\n\r\n                # File Extensions which are accepted by SMAX without any Mime Type or FileType\r\n                if fileType.lower() == 'nofiletype':\r\n                    fileType = ''\r\n\r\n                reqUrl = smax_baseurl + \"/rest/\" + smax_tenantId + \"/ces/attachment\"\r\n                payload = {}\r\n                files = [('files[]', (fileName, open(filePath, 'rb'), fileType))]\r\n                headers = {\r\n                    'Cookie': 'LWSSO_COOKIE_KEY=' + smax_authToken}\r\n                response = requests.request(\"POST\", reqUrl, headers=headers, data=payload, files=files)\r\n                responseCode = str(response.status_code)\r\n\r\n                if response.status_code == 200:\r\n                    content = json.loads(response.content)\r\n                    status = content[\"success\"]\r\n\r\n                    if status:\r\n                        guid = content[\"guid\"]  ##[\"guid\"]\r\n                        fileName = content[\"name\"]  ##[\"name\"]\r\n                        size = content[\"contentLength\"]\r\n                        lastModified = content[\"lastModified\"]\r\n                        if fileCreator:\r\n                            creator = fileCreator\r\n\r\n                        fileDetails.update({\"guid\": guid, \"fileName\": fileName, \"size\": size, \"lastModified\": lastModified,\r\n                                            \"creator\": creator})\r\n\r\n                        if fileDetails:\r\n                            fileDetailsArray.append(fileDetails)\r\n\r\n                        result = 'True'\r\n                        message = 'Successfully uploaded the attachment file: ' + str(fileName)\r\n                        break\r\n                    else:\r\n                        msg = \"Upload file to SMAX :- \" + fileName + \":file type: \" + fileType + \": \" + str(\r\n                            response.content)\r\n                        raise Exception(msg)\r\n\r\n                else:\r\n                    content = json.loads(response.content)\r\n                    errorMsg = content[\"errorMessage\"]\r\n                    ## Check if Failure is due to Invalid File Format\r\n                    if responseCode == '500' and 'format is invalid' in errorMsg:\r\n                        invalid_file_format = True\r\n                        continue\r\n                    failCodes = status_codes[\"smax\"]\r\n                    if responseCode in failCodes:\r\n                        provider_issue = \"True\"\r\n                        msg = \"Upload file to SMAX :- Unsupported response from provider: \" + str(\r\n                            response.text) + \" :Response Code: \" + str(\r\n                            response.status_code)\r\n                        raise Exception(msg)\r\n                    else:\r\n                        errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                            response.content) + ': '+ fileName + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + message + ': ' + fileName + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs,\r\n            \"provider_issue\": provider_issue, \"fileDetailsArray\": fileDetailsArray}\r\n\r\n\r\n# fetch the existing attachment based on SMAXTicketID\r\ndef fetchAttachmentsFromSMAX(smax_authToken, smax_tenantId, smax_baseurl, smaxticketID, jiraticketID, status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    attachmentDetails = {}\r\n    attachmentDetailsArray = []\r\n    file = \"\"\r\n    response = \"\"\r\n    responseCode = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json',\r\n                       'User-Agent': 'Apache-HttpClient/4.4.1', }\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n        reqUrl = '{0}/rest/{1}/ems/Request?layout=RequestAttachments,Id&filter=Id={2}'.format(smax_baseurl,\r\n                                                                                              smax_tenantId,\r\n                                                                                              smaxticketID)\r\n        response = requests.get(reqUrl, headers=authHeaders, cookies=cookies)\r\n        responseCode = str(response.status_code)\r\n\r\n        if (response.status_code == 200):\r\n            entityJSONArray = json.loads(response.content)\r\n            if entityJSONArray[\"entities\"] == []:\r\n                message = \"No attachments in SMAX ID :\" + str(smaxticketID)\r\n                result = \"True\"\r\n            else:\r\n                for entity in entityJSONArray[\"entities\"]:\r\n                    attachmentArray = entity[\"properties\"].get(\"RequestAttachments\")\r\n                    if attachmentArray:\r\n                        attachmentArray = attachmentArray.replace('True', 'true').replace('TRUE', 'true').replace(\r\n                            'False', 'false').replace('FALSE', 'false')\r\n                        attachmentJSONArray = json.loads(attachmentArray)\r\n                        if attachmentJSONArray[\"complexTypeProperties\"] != []:\r\n                            for file in attachmentJSONArray[\"complexTypeProperties\"]:\r\n                                guid = file[\"properties\"].get(\"id\")\r\n                                fileName = file[\"properties\"].get(\"file_name\")\r\n                                name = file[\"properties\"].get(\"name\")\r\n                                size = file[\"properties\"].get(\"size\")\r\n                                lastModified = file[\"properties\"].get(\"LastUpdateTime\")\r\n                                creator = file[\"properties\"].get(\"Creator\")\r\n                                mime_type = file[\"properties\"].get(\"mime_type\")\r\n                                IsHidden = file[\"properties\"].get(\"IsHidden\")\r\n\r\n                                if fileName or name:\r\n                                    attachmentDetails = {\"guid\": guid}\r\n                                    if fileName:\r\n                                        attachmentDetails.update({\"fileName\": fileName})\r\n                                    if name:\r\n                                        attachmentDetails.update({\"name\": name})\r\n                                    if size:\r\n                                        attachmentDetails.update({\"size\": size})\r\n                                    if lastModified:\r\n                                        attachmentDetails.update({\"lastModified\": lastModified})\r\n                                    if creator:\r\n                                        attachmentDetails.update({\"creator\": creator})\r\n                                    if mime_type:\r\n                                        attachmentDetails.update({\"mime_type\": mime_type})\r\n                                    if IsHidden:\r\n                                        attachmentDetails.update({\"IsHidden\": IsHidden})\r\n\r\n                                    if attachmentDetails:\r\n                                        attachmentDetailsArray.append(attachmentDetails)\r\n\r\n                            result = \"True\"\r\n                            message = \"Attachments found in SMAX ID : \" + str(smaxticketID)\r\n                        else:\r\n                            result = \"True\"\r\n                            message = \"No attachment found in SMAX : \" + str(smaxticketID)\r\n                    else:\r\n                        result = \"True\"\r\n                        message = \"No attachment found in SMAX : \" + str(smaxticketID)\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if responseCode in failCodes:\r\n                provider_issue = \"True\"\r\n                msg = \"Unable to fetch the attachments from SMAX :- Unsupported response from the Provider  \" + str(\r\n                    response.text) + \" :Response Code: \" + str(\r\n                    response.status_code)\r\n                raise Exception(msg)\r\n            else:\r\n                errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                    response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs, \"provider_issue\": provider_issue,\r\n            \"attachmentDetailsArray\": attachmentDetailsArray}\r\n\r\n\r\n# post attachments to SMAXTicketID\r\ndef postAttachmentsToSMAX(smax_authToken, smax_tenantId, smax_baseurl, smaxticketID, jiraticketID, smaxAttachResponse,\r\n                          status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    response = \"\"\r\n    responseCode = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n        complexPropertiesData = {}\r\n\r\n        if len(smaxAttachResponse) > 0:\r\n            complexPropertiesData[\"complexTypeProperties\"] = [0] * len(smaxAttachResponse)\r\n            i = 0\r\n\r\n            for attach in smaxAttachResponse:\r\n                complexPropertiesData[\"complexTypeProperties\"][i] = {}\r\n                complexPropertiesData[\"complexTypeProperties\"][i][\"properties\"] = {}\r\n                complexPropertiesData[\"complexTypeProperties\"][i][\"properties\"][\"id\"] = attach.get('guid')\r\n                if attach.get('fileName'):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"file_name\"] = attach.get(\r\n                        'fileName')\r\n                if attach.get('name'):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"name\"] = attach.get('name')\r\n                if attach.get(\"size\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"size\"] = attach.get(\"size\")\r\n                if attach.get(\"lastModified\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"LastUpdateTime\"] = int(\r\n                        attach.get(\"lastModified\"))\r\n                if attach.get(\"creator\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"Creator\"] = attach.get(\"creator\")\r\n                if attach.get(\"IsHidden\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"IsHidden\"] = attach.get(\"IsHidden\")\r\n                if attach.get(\"IsHidden\") is None:\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"IsHidden\"] = False\r\n                if attach.get(\"mime_type\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"mime_type\"] = attach.get(\r\n                        \"mime_type\")\r\n\r\n                i += 1\r\n            complexPropertiesData_toString = str(complexPropertiesData)\r\n            RequestAttachments = complexPropertiesData_toString.replace(\"'\", '\"').replace('False', 'false').replace(\r\n                'True', 'true').replace('\"false\"', 'false').replace('\"true\"', 'true')\r\n\r\n        smaxDataU = {}\r\n        smaxDataU['entities'] = []\r\n        smaxDataU['operation'] = \"UPDATE\"\r\n        smaxDataU['entities'] = [0]\r\n        smaxDataU['entities'][0] = {}\r\n        smaxDataU['entities'][0][\"entity_type\"] = \"Request\"\r\n        smaxDataU['entities'][0][\"properties\"] = {}\r\n        smaxDataU['entities'][0][\"properties\"][\"Id\"] = smaxticketID\r\n        smaxDataU['entities'][0][\"properties\"][\"RequestAttachments\"] = RequestAttachments\r\n\r\n        reqUrl = '{0}/rest/{1}/ems/bulk'.format(smax_baseurl, smax_tenantId)\r\n        response = requests.post(reqUrl, headers=authHeaders, cookies=cookies, json=smaxDataU)\r\n        message = response.text\r\n        responseCode = str(response.status_code)\r\n\r\n        if response.status_code == 200:\r\n            message = \"Attachment Added to! \" + str(smaxticketID)\r\n            result = \"True\"\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if responseCode in failCodes:\r\n                provider_issue = \"True\"\r\n                msg = \"Attachment not updated in SMAX! :- Unsupported response from the Provider  \" + str(\r\n                    response.text) + \" :Response Code: \" + str(\r\n                    response.status_code)\r\n                raise Exception(msg)\r\n            else:\r\n                errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                    response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs, \"provider_issue\": provider_issue}\r\n\r\n\r\n# getExternalID, based on email address\r\ndef getExternalID(smax_baseurl, smax_authToken, smax_tenantId, jiraticketID, smaxticketID, status_codes,\r\n                  downloadFileDetailArray):\r\n    import requests\r\n    import json\r\n    result = \"\"\r\n    message = \"\"\r\n    externalID = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    response = \"\"\r\n    responseCode = \"\"\r\n\r\n    try:\r\n        for file in downloadFileDetailArray:\r\n            fileAuthorEmail = str(file.get(\"fileAuthorEmail\"))\r\n\r\n            if fileAuthorEmail:\r\n                authHeaders = {\"TENANTID\": \"keep-alive\"}\r\n                cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n                reqUrl = '{0}/rest/{1}/ems/Person?layout=Id,ExternalId,Upn,Email,EmployeeStatus &filter=Email=\\'{2}\\''.format(\r\n                    smax_baseurl, smax_tenantId, fileAuthorEmail)\r\n                response = requests.get(reqUrl, headers=authHeaders, cookies=cookies)\r\n                responseCode = str(response.status_code)\r\n\r\n                if (response.status_code == 200):\r\n                    entityJSONArray = json.loads(response.content)\r\n                    if entityJSONArray[\"entities\"] == []:\r\n                        message = \"No External ID for \" + fileAuthorEmail\r\n                        result = \"True\"\r\n                    else:\r\n                        for entity in entityJSONArray[\"entities\"]:\r\n                            extID = entity[\"properties\"].get(\"ExternalId\")\r\n                            if extID:\r\n                                file.update({\"externalID\": extID})\r\n                                # externalID = extID\r\n\r\n                                result = \"True\"\r\n                                message = \"Got the ExternalID\" + externalID\r\n                else:\r\n                    failCodes = status_codes[\"smax\"]\r\n                    if responseCode in failCodes:\r\n                        provider_issue = \"True\"\r\n                        msg = \"getExternalID :- Unsupported response from the Provider  \" + str(\r\n                            response.text) + \" :Response Code: \" + str(\r\n                            response.status_code)\r\n                        raise Exception(msg)\r\n                    else:\r\n                        errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                            response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs, \"provider_issue\": provider_issue,\r\n            \"downloadFileDetailArray\": downloadFileDetailArray}\r\n\r\n\r\n# download the file in drive\r\ndef downloadFileInDrive(jiraFileName, data):\r\n    import os\r\n    import platform\r\n\r\n    my_os = platform.system()\r\n    downloadFilePath = \"\"\r\n\r\n    if (my_os == \"Windows\"):\r\n        downloadFilePath = 'c:\\\\temp\\\\' + jiraFileName\r\n        open(downloadFilePath, 'wb').write(data)\r\n    else:\r\n        downloadFilePath = '\\\\tmp\\\\' + jiraFileName\r\n        open(downloadFilePath, 'wb').write(data)\r\n    return downloadFilePath\r\n\r\n# get created time if Jira Issue\r\ndef get_created_dt(jiraBasicAuthCredentials, MarketPlace_jiraIssueURL, jiraticketID,smaxticketID,status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    responseCode = \"\"\r\n    jiraCreatedDate = ''\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        reqUrl = '{0}rest/api/2/issue/{1}/?fields=status,assignee,created'.format(MarketPlace_jiraIssueURL,jiraticketID)\r\n\r\n        headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n        number = 0\r\n        while number < 4:\r\n            response = requests.get(reqUrl, auth=jiraBasicAuthCredentials, headers=headers)\r\n            responseCode = str(response.status_code)\r\n\r\n            if response.status_code == 200:\r\n                responseData = response.json()\r\n\r\n                if responseData == []:\r\n                    time.sleep(5)\r\n                    number = number + 1\r\n                else:\r\n                    jiraCreatedDate = responseData[\"fields\"][\"created\"]\r\n                    break\r\n            else:\r\n                failCodes = status_codes[\"jira\"]\r\n                if responseCode in failCodes:\r\n                    provider_issue = \"True\"\r\n                    msg = \"Get Jira created date failed,  Unsupported response from provider: \" + str(\r\n                        response.text) + \" :Response Code: \" + str(response.status_code)\r\n                    raise Exception(msg)\r\n                else:\r\n                    result = \"False\"\r\n                    errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                        response.content) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\r\n            \"errorLogs\": errorLogs, \"provider_issue\": provider_issue, \"jiraCreatedDate\": jiraCreatedDate}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - errorLogs
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
