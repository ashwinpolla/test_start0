namespace: Cerner.DFMP.Schedules.JIRA.Operations
operation:
  name: attachmentsDeletedFromJIRAtoSMAX
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - projectNames: "${get_sp('MarketPlace.jiraProjects')}"
    - creator: "${get_sp('MarketPlace.jiraIssueCreator')}"
    - lastUpdate:
        required: false
    - smax_FieldID
    - smax_authToken
    - conn_timeout: "${get_sp('Cerner.DigitalFactory.connection_timeout')}"
    - jira_smaxjiraid_list:
        required: false
    - smax_request_id_list:
        required: false
    - http_fail_status_codes: "${get_sp('Cerner.DigitalFactory.http_fail_status_codes')}"
    - previous_errorLogs:
        required: false
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Jira and Smax\r\n#   Author: Ashwini Shalke (ashwini.shalke@cerner.com), MicroFocus International\r\n#   Operation : attachmentsDeletedFromJiratoSMAX\r\n#   Created on :- 03 May 2021\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  smax_authToken\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#       -  projectNames\r\n#       -  creator\r\n#       -  lastUpdate\r\n#       -  smax_FieldID\r\n#       -  conn_timeout\r\n#       -  jira_smaxjiraid_list\r\n#       -  smax_request_id_list\r\n#       -  http_fail_status_codes\r\n\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - errorType\r\n#       - errorMessage\r\n#       - errorProvider\r\n#       - errorSeverity\r\n#       - errorLogs\r\n#       - provider_issue\r\n# this operation will delete the attachments from JIRA to SMAX\r\n# Modified on 08 Jun 2022 By Rakesh to update back correct Attachment Properties\r\n# Modified on 5 July 2022 by Ashwini to change the logic for delete Attachment.\r\n# Modified on 22 July 2022 by Ashwini Shalke for error logs\r\n###############################################################\r\n\r\nimport sys, os\r\nimport subprocess\r\nimport requests\r\nimport http.client\r\n\r\n\r\n# function do download external modules to python \"on-the-fly\"\r\ndef install(param):\r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n\r\n# main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, smax_authToken, smax_tenantId,\r\n            smax_baseurl, projectNames, creator, lastUpdate,smax_FieldID, conn_timeout,jira_smaxjiraid_list,smax_request_id_list,http_fail_status_codes,previous_errorLogs):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorType = ''\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_issue = \"\"\r\n    data = {}\r\n    reqUrl = \"\"\r\n    #lastUpdate = \"2022-07-12 05:17\"\r\n    errorLogs = \"\"\r\n\r\n    try:\r\n        # requirement external modules\r\n        install(\"requests\")\r\n\r\n        import requests\r\n        import json\r\n        \r\n        if lastUpdate:\r\n            lastUpdate = lastUpdate[:16]\r\n\r\n        if len(jira_smaxjiraid_list.split(\"♪\")) > 0:\r\n            for issues in jira_smaxjiraid_list.split(\"♪\"):\r\n                if issues:\r\n                    status_codes = json.loads(http_fail_status_codes)\r\n                    jiraticketID = str(issues.split(\"♫\")[0])\r\n                    smaxticketID = str(issues.split(\"♫\")[1])\r\n                    print(\"SMAXID\", smaxticketID)\r\n\r\n                    deletedFileList = \"\"\r\n                    attachmentDetailsFromSMAX = []\r\n                    updatedAttachmentListForSMAX= []\r\n\r\n####################calling getAttachmentsFromJIRA to fetch all the attachments from JIRA based on jiraAndSMaxIDs\r\n                    jiraBasicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser,\r\n                                                                           MarketPlace_jiraPassword)\r\n\r\n                    getDeletedAttachmentFromJIRA  = getDeletedAttachmentsFromJIRA(MarketPlace_jiraIssueURL,\r\n                                                                         jiraBasicAuthCredentials, jiraticketID,smaxticketID, smax_request_id_list, status_codes)\r\n\r\n                    tresult = getDeletedAttachmentFromJIRA[\"result\"]\r\n                    message = getDeletedAttachmentFromJIRA[\"message\"]\r\n                    errorType = getDeletedAttachmentFromJIRA[\"errorType\"]\r\n                    provider_issue = getDeletedAttachmentFromJIRA[\"provider_issue\"]\r\n                    deletedFileList = getDeletedAttachmentFromJIRA[\"deletedFileList\"]\r\n                    errorLogs += getDeletedAttachmentFromJIRA[\"errorLogs\"]\r\n                    if tresult == \"False\" and provider_issue == \"True\":\r\n                        raise Exception(message)\r\n                    elif tresult == \"False\" and provider_issue != \"True\":\r\n                        continue\r\n\r\n####################calling fetchAttachmentsFromSMAX to fetch all attachments based on smaxticketID\r\n                    fetchAttachmentFromSMAX = fetchAttachmentsFromSMAX(smax_authToken, smax_tenantId,smax_baseurl, smaxticketID,jiraticketID,status_codes)\r\n\r\n                    tresult = fetchAttachmentFromSMAX[\"result\"]\r\n                    message = fetchAttachmentFromSMAX[\"message\"]\r\n                    errorType = fetchAttachmentFromSMAX[\"errorType\"]\r\n                    errorProvider = fetchAttachmentFromSMAX[\"errorProvider\"]\r\n                    provider_issue = fetchAttachmentFromSMAX[\"provider_issue\"]\r\n                    attachmentDetailsFromSMAX = fetchAttachmentFromSMAX[\"attachmentDetailsArray\"]\r\n                    errorLogs += fetchAttachmentFromSMAX[\"errorLogs\"]\r\n                    if tresult == \"False\" and provider_issue == \"True\":\r\n                        raise Exception(message)\r\n                    elif tresult == \"False\" and provider_issue != \"True\":\r\n                        continue\r\n\r\n####################calling UpdateAttachmentListForSMAX to get the list of updated attachments\r\n                    if (len(deletedFileList) > 0) and (len(attachmentDetailsFromSMAX) > 0) :\r\n                        deletedFileList = deletedFileList[:-1]\r\n\r\n                        getUpdateAttachmentListForSMAX = compareFiles(attachmentDetailsFromSMAX,deletedFileList)\r\n                        result = getUpdateAttachmentListForSMAX[\"result\"]\r\n                        message = getUpdateAttachmentListForSMAX[\"message\"]\r\n                        errorType = getUpdateAttachmentListForSMAX[\"errorType\"]\r\n                        errorLogs += getUpdateAttachmentListForSMAX[\"errorMessage\"]\r\n                        updatedAttachmentListForSMAX = getUpdateAttachmentListForSMAX[\"updatedAttachmentListForSMAX\"]\r\n\r\n                    else:\r\n                        result = \"True\"\r\n                        message = \"No files deleted in JIRA or No file existed in SMAX\"\r\n\r\n#####################calling postAttachmentsToSMAX to post attachment to smaxticketID\r\n                    if len(updatedAttachmentListForSMAX) > 0:\r\n                        postAttachmentToSMAX = postAttachmentsToSMAX(smax_authToken, smax_tenantId,\r\n                                                                     smax_baseurl, smaxticketID,jiraticketID,\r\n                                                                     updatedAttachmentListForSMAX,status_codes)\r\n\r\n                        tresult = postAttachmentToSMAX[\"result\"]\r\n                        message = postAttachmentToSMAX[\"message\"]\r\n                        errorType = postAttachmentToSMAX[\"errorType\"]\r\n                        provider_issue = postAttachmentToSMAX[\"provider_issue\"]\r\n                        errorLogs +=  postAttachmentToSMAX[\"errorLogs\"]\r\n                        if tresult == \"False\" and provider_issue == \"True\":\r\n                            raise Exception(message)\r\n                        elif tresult == \"False\" and provider_issue != \"True\":\r\n                            continue\r\n        \r\n        result = True\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        if not errorType:\r\n            errorType = \"e30000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        if not errorProvider:\r\n            errorProvider = \"JIRA\"\r\n        if not errorLogs:\r\n            errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\"errorLogs\": errorLogs + previous_errorLogs, \"provider_issue\": provider_issue}\r\n\r\n\r\n# fetch all attachment from JIRA based on jiraAndSMaxIDs\r\ndef getDeletedAttachmentsFromJIRA(MarketPlace_jiraIssueURL, jiraBasicAuthCredentials, jiraticketID,smaxticketID,smax_request_id_list,status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    #data = {}\r\n    response = \"\"\r\n    deletedFileList = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    responseCode =\"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        reqUrl = '{0}rest/api/2/issue/{1}?expand=changelog&fields=changelog'.format(MarketPlace_jiraIssueURL,jiraticketID)\r\n\r\n        headers = {'X-Atlassian-Token': 'no-check', 'Content-Type': 'application/json'}\r\n        response = requests.get(reqUrl, auth=jiraBasicAuthCredentials, headers=headers)\r\n        responseCode = str(response.status_code)\r\n\r\n        if response.status_code == 200:\r\n            responseData = {}\r\n            responseData = response.json()\r\n            dataHistory = responseData[\"changelog\"][\"histories\"]\r\n            for data in dataHistory:\r\n                if data:\r\n                    for item in data[\"items\"]:\r\n                        if item[\"field\"] == \"Attachment\":\r\n                            fileName = str(item[\"fromString\"])\r\n                            fileID = str(item[\"from\"])\r\n                            if fileName != \"None\":\r\n                                deletedFileList += fileID + \"♫\" + fileName +\"♪\"\r\n\r\n            result = \"True\"\r\n            message = \"Got the list of deleted attachment :- \" +str(jiraticketID)\r\n\r\n        else:\r\n            failCodes = status_codes['jira']\r\n            if responseCode in failCodes:\r\n                provider_issue = \"True\"\r\n                msg = \"getDeletedAttachmentsFromJIRA:- Unsupported response from provider: \" + str(\r\n                    response.text) + \" :Response Code: \" + str(response.status_code)\r\n                raise Exception(msg)\r\n            else:\r\n                result = \"False\"\r\n                errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                    response.content) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"JIRA\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,JIRA||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\"errorLogs\": errorLogs, \"provider_issue\": provider_issue,\"deletedFileList\":deletedFileList}\r\n\r\n\r\n#preparing latest list of attachments for SMAX\r\ndef compareFiles(attachmentDetailsFromSMAX,deletedFileList):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorType = \"\"\r\n    updatedAttachmentListForSMAX = []\r\n\r\n    # get the list of deleted file from JIRA\r\n    try:\r\n        if len(deletedFileList.split(\"♪\")) > 0:\r\n            updatedAttachmentListForSMAX = attachmentDetailsFromSMAX\r\n            for item in deletedFileList.split(\"♪\"):\r\n                jiraFileId = str(item.split(\"♫\")[0])\r\n                jiraFileName = str(item.split(\"♫\")[1])\r\n\r\n                attachmentDetailsFromSMAX = updatedAttachmentListForSMAX\r\n                updatedAttachmentListForSMAX = []\r\n\r\n                for attachmentFromSMAX in attachmentDetailsFromSMAX:\r\n                    if attachmentFromSMAX != {}:\r\n                        smaxFileID = attachmentFromSMAX.get(\"guid\")\r\n                        smaxFileName = attachmentFromSMAX.get(\"fileName\")\r\n                        if not smaxFileName:\r\n                            smaxFileName = attachmentFromSMAX.get(\"name\")\r\n                            if smaxFileName:\r\n                                smaxFileName = smaxFileName[:40]\r\n                        if not smaxFileName:\r\n                            smaxFileName = 'NONE'\r\n\r\n                        smaxNewFileName = smaxFileID[:8] + \"_\" + smaxFileName\r\n\r\n                    if jiraFileId in smaxFileName[:len(jiraFileId)]:\r\n                        attachmentFromSMAX.clear()\r\n                    elif jiraFileName[:8] in smaxFileID:\r\n                        attachmentFromSMAX.clear()\r\n                    else:\r\n                        updatedAttachmentListForSMAX.append(attachmentFromSMAX)\r\n                        message = \"No such file\"\r\n\r\n        else:\r\n            result = \"True\"\r\n            message = \"No files deleted in JIRA\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorType = \"e20000\"\r\n\r\n    return {\"result\":result,\"message\":message,\"errorMessage\": errorMessage,\"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity,\"updatedAttachmentListForSMAX\":updatedAttachmentListForSMAX}\r\n\r\n\r\n# fetch the existing attachment based on SMAXTicketID\r\ndef fetchAttachmentsFromSMAX(smax_authToken, smax_tenantId, smax_baseurl, smaxticketID,jiraticketID,status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    attachmentDetails = {}\r\n    attachmentDetailsArray = []\r\n    file = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    response =\"\"\r\n    failCodes = \"\"\r\n    responseCode = \"\"\r\n    \r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json',\r\n                       'User-Agent': 'Apache-HttpClient/4.4.1', }\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n\r\n        reqUrl = '{0}/rest/{1}/ems/Request?layout=RequestAttachments,Id&filter=Id={2}'.format(smax_baseurl,\r\n                                                                                              smax_tenantId,\r\n                                                                                              smaxticketID)\r\n       \r\n        response = requests.get(reqUrl, headers=authHeaders, cookies=cookies)\r\n        responseCode = str(response.status_code)\r\n\r\n        if (response.status_code == 200):\r\n            entityJSONArray = json.loads(response.content)\r\n            if entityJSONArray[\"entities\"] == []:\r\n                message = \"No attachments in SMAX ID :\" + str(smaxticketID)\r\n                result = \"True\"\r\n            else:\r\n                for entity in entityJSONArray[\"entities\"]:\r\n                    attachmentArray = entity[\"properties\"].get(\"RequestAttachments\")\r\n                    if attachmentArray:\r\n                        attachmentArray = attachmentArray.replace('True','true').replace('TRUE','true').replace('False','false').replace('FALSE','false')\r\n                        attachmentJSONArray = json.loads(attachmentArray)\r\n                        for file in attachmentJSONArray[\"complexTypeProperties\"]:\r\n                            guid = file[\"properties\"].get(\"id\")\r\n                            fileName = file[\"properties\"].get(\"file_name\")\r\n                            name = file[\"properties\"].get(\"name\")\r\n                            size = file[\"properties\"].get(\"size\")\r\n                            lastModified = file[\"properties\"].get(\"LastUpdateTime\")\r\n                            creator = file[\"properties\"].get(\"Creator\")\r\n                            mime_type = file[\"properties\"].get(\"mime_type\")\r\n                            IsHidden = file[\"properties\"].get(\"IsHidden\")\r\n\r\n                            if fileName or name:\r\n                                attachmentDetails = {\"guid\": guid}\r\n                                if fileName:\r\n                                    attachmentDetails.update({\"fileName\": fileName})\r\n                                if name:\r\n                                    attachmentDetails.update({\"name\": name})\r\n                                if size:\r\n                                    attachmentDetails.update({\"size\": size})\r\n                                if lastModified:\r\n                                    attachmentDetails.update({\"lastModified\": lastModified})\r\n                                if creator:\r\n                                    attachmentDetails.update({\"creator\": creator})\r\n                                if mime_type:\r\n                                    attachmentDetails.update({\"mime_type\": mime_type})\r\n                                if IsHidden:\r\n                                    attachmentDetails.update({\"IsHidden\": IsHidden})\r\n\r\n                                if attachmentDetails:\r\n                                    attachmentDetailsArray.append(attachmentDetails)\r\n\r\n                        result = \"True\"\r\n                        message = \"Attachments found in SMAX ID :\" + str(smaxticketID)\r\n                    else:\r\n                        result = \"True\"\r\n                        message = \"No attachment found in SMAX : \" + str(smaxticketID)\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if responseCode in failCodes:\r\n                provider_issue = \"True\"\r\n                msg = \"Unable to fetch the attachments from SMAX :- Unsupported response from the Provider  \" + str(\r\n                    response.text) + \" :Response Code: \" + str(\r\n                    response.status_code)\r\n                raise Exception(msg)\r\n            else:\r\n                errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                    response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\"errorLogs\": errorLogs,\"provider_issue\": provider_issue,\"attachmentDetailsArray\": attachmentDetailsArray}\r\n\r\n\r\n# post attachments to SMAXTicketID\r\ndef postAttachmentsToSMAX(smax_authToken, smax_tenantId, smax_baseurl, smaxticketID,jiraticketID,smaxAttachResponse,status_codes):\r\n    message = \"\"\r\n    result = \"\"\r\n    errorType = \"\"\r\n    errorMessage = \"\"\r\n    errorSeverity = \"\"\r\n    errorProvider = \"\"\r\n    provider_issue = \"\"\r\n    errorLogs = \"\"\r\n    reqUrl = \"\"\r\n    failCodes = \"\"\r\n    response = \"\"\r\n    responseCode = \"\"\r\n    \r\n    try:\r\n        import requests\r\n        import json\r\n\r\n        authHeaders = {\"TENANTID\": \"keep-alive\", 'Content-Type': 'application/json'}\r\n        cookies = {\"SMAX_AUTH_TOKEN\": smax_authToken}\r\n        complexPropertiesData = {}\r\n\r\n        if len(smaxAttachResponse) > 0:\r\n            complexPropertiesData[\"complexTypeProperties\"] = [0] * len(smaxAttachResponse)\r\n            i = 0\r\n            for attach in smaxAttachResponse:\r\n                complexPropertiesData[\"complexTypeProperties\"][i] = {}\r\n                complexPropertiesData[\"complexTypeProperties\"][i][\"properties\"] = {}\r\n                complexPropertiesData[\"complexTypeProperties\"][i][\"properties\"][\"id\"] = attach.get('guid')\r\n                if attach.get('fileName'):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"file_name\"] = attach.get('fileName')\r\n                if attach.get('name'):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"name\"] = attach.get('name')\r\n                if attach.get(\"size\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"size\"] = attach.get(\"size\")\r\n                if attach.get(\"lastModified\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"LastUpdateTime\"] = int(\r\n                        attach.get(\"lastModified\"))\r\n                if attach.get(\"creator\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"Creator\"] = attach.get(\"creator\")\r\n                if attach.get(\"IsHidden\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"IsHidden\"] = attach.get(\"IsHidden\")\r\n                if attach.get(\"IsHidden\") is None:\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"IsHidden\"] = False\r\n                if attach.get(\"mime_type\"):\r\n                    complexPropertiesData['complexTypeProperties'][i][\"properties\"][\"mime_type\"] = attach.get(\"mime_type\")\r\n                i += 1\r\n            complexPropertiesData_toString = str(complexPropertiesData)\r\n            RequestAttachments = complexPropertiesData_toString.replace(\"'\", '\"').replace('False','false').replace('True','true').replace('\"false\"','false').replace('\"true\"','true')\r\n\r\n        smaxDataU = {}\r\n        smaxDataU['entities'] = []\r\n        smaxDataU['operation'] = \"UPDATE\"\r\n        smaxDataU['entities'] = [0]\r\n        smaxDataU['entities'][0] = {}\r\n        smaxDataU['entities'][0][\"entity_type\"] = \"Request\"\r\n        smaxDataU['entities'][0][\"properties\"] = {}\r\n        smaxDataU['entities'][0][\"properties\"][\"Id\"] = smaxticketID\r\n        smaxDataU['entities'][0][\"properties\"][\"RequestAttachments\"] = RequestAttachments\r\n\r\n        reqUrl = '{0}/rest/{1}/ems/bulk'.format(smax_baseurl, smax_tenantId)\r\n        response = requests.post(reqUrl, headers=authHeaders, cookies=cookies, json=smaxDataU)\r\n        message = response.text\r\n        responseCode = str(response.status_code)\r\n\r\n        if response.status_code == 200:\r\n            message = \"Attachment Deleted for!\" + str(smaxticketID)\r\n            result = \"True\"\r\n        else:\r\n            failCodes = status_codes[\"smax\"]\r\n            if responseCode in failCodes:\r\n                provider_issue = \"True\"\r\n                msg = \"Attachment not deleted in SMAX! :- Unsupported response from the Provider  \" + str(\r\n                    response.text) + \" :Response Code: \" + str(\r\n                    response.status_code)\r\n                raise Exception(msg)\r\n            else:\r\n                errorLogs += \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + str(\r\n                    response.text) + \" :Response Code: \" + str(response.status_code) + \"|||\"\r\n\r\n    except Exception as e:\r\n        message = str(e)\r\n        result = \"False\"\r\n        errorType = \"e20000\"\r\n        errorMessage = message\r\n        errorSeverity = \"ERROR\"\r\n        errorProvider = \"SMAX\"\r\n        if not responseCode:\r\n            provider_issue = \"True\"\r\n        errorLogs = \"SMAXRequestId,\" + smaxticketID + \"||JiraIssueId,\" + jiraticketID + \"||ProviderUrl,\" + reqUrl + \"||ErrorProvider,SMAX||ProviderUrlBody,||ErrorMessage,\" + message + \"|||\"\r\n\r\n    return {\"result\": result, \"message\": message, \"errorType\": errorType,\r\n            \"errorSeverity\": errorSeverity, \"errorProvider\": errorProvider, \"errorMessage\": errorMessage,\"errorLogs\": errorLogs,\"provider_issue\": provider_issue}"
  outputs:
    - result
    - message
    - errorType
    - errorSeverity
    - errorProvider
    - errorMessage
    - errorLogs
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
