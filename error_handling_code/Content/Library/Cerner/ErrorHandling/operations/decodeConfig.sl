namespace: Cerner.ErrorHandling.operations
operation:
  name: decodeConfig
  inputs:
    - confString
    - errorType
  python_action:
    use_jython: false
    script: "def execute(confString, errorType):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorHandlers = \"\"\r\n    errorHandlersFailSafe = \"\"\r\n    try:\r\n        import json\r\n        conf = json.loads(confString)\r\n        confRes = confForId(conf,errorType)\r\n        \r\n        failSafeRes = confFailSafe(conf)\r\n        if failSafeRes[\"result\"] == \"True\":\r\n            errorHandlersFailSafe = json.dumps(failSafeRes[\"conf\"])\r\n            if confRes[\"result\"] == \"False\":\r\n                defaultConfRes = confDefault(conf)\r\n                if defaultConfRes[\"result\"] == \"True\":\r\n                    errorHandlers = json.dumps(defaultConfRes[\"conf\"])\r\n                    message = \"Loading Default Config\"\r\n                    result = \"True\"\r\n                else:\r\n                    message = \"Can't load default config: \" + defaultConfRes[\"message\"]\r\n                    result = \"False\"\r\n            elif confRes[\"result\"] == \"True\":\r\n                errorHandlers = json.dumps(confRes[\"conf\"])\r\n                result = \"True\"\r\n            else:\r\n                message = \"Can't load config: \" + confRes[\"message\"]\r\n                result = \"False\"\r\n        else:\r\n            message = \"Fail Safe Config loading error: \" + failSafeRes[\"message\"]\r\n            result = \"False\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"errorHandlers\":errorHandlers, \"failSafe\":errorHandlersFailSafe }\r\n\r\ndef confForId(confStruct, eid):\r\n    message = \"\"\r\n    result = \"False\"\r\n    conf = []\r\n\r\n    try:\r\n        import json\r\n        import fnmatch\r\n        errorDefinedInConf = confStruct[\"errorActionMapping\"][\"errorTypes\"]\r\n        resultCount = 0\r\n        for errDef in errorDefinedInConf:\r\n            rx = errDef[\"error\"][\"regex\"]\r\n            if fnmatch.fnmatch(eid, rx):\r\n                resultCount += 1\r\n        if resultCount > 0:\r\n            conf = [0]*resultCount\r\n            resultCount = 0\r\n            for errDef in errorDefinedInConf:\r\n                rx = errDef[\"error\"][\"regex\"]\r\n                if fnmatch.fnmatch(eid, rx):\r\n                    conf[resultCount] = {}\r\n                    conf[resultCount][\"actions\"] = errDef[\"error\"][\"actions\"]\r\n                    syncConfRes = syncConfigData(confStruct, conf, resultCount)\r\n                    if syncConfRes[\"result\"] == \"True\":\r\n                        conf[resultCount] = syncConfRes[\"conf\"][resultCount]\r\n                        handlers = syncConfRes[\"handlers\"] \r\n                        result = \"True\"\r\n                    else:\r\n                        result = \"False\"\r\n                    resultCount += 1\r\n\r\n        if result == \"True\" and len(conf) > 0:\r\n            result = \"True\"\r\n        else:\r\n            result = \"False\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"conf\":conf}\r\n\r\ndef confDefault(confStruct):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorDefinedInConf = []\r\n\r\n    try:\r\n        import json\r\n        import fnmatch\r\n        errorDefinedInConf = [0]*1\r\n        errorDefinedInConf[0] = confStruct[\"errorActionMapping\"][\"defalt\"]\r\n        syncConfRes = syncConfigData(confStruct, errorDefinedInConf)\r\n        if syncConfRes[\"result\"] == \"True\":\r\n            errorDefinedInConf = syncConfRes[\"conf\"]\r\n            handlers = syncConfRes[\"handlers\"] \r\n            result = \"True\"\r\n        else:\r\n            result = \"False\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"conf\":errorDefinedInConf}\r\n\r\ndef confFailSafe(confStruct):\r\n    message = \"\"\r\n    result = \"False\"\r\n    errorDefinedInConf = []\r\n    handlers = \"\"\r\n    try:\r\n        import json\r\n        import fnmatch\r\n        errorDefinedInConf = [0]*1\r\n        errorDefinedInConf[0] = confStruct[\"errorActionMapping\"][\"failSafe\"]\r\n        syncConfRes = syncConfigData(confStruct, errorDefinedInConf)\r\n        if syncConfRes[\"result\"] == \"True\":\r\n            errorDefinedInConf = syncConfRes[\"conf\"]\r\n            handlers = syncConfRes[\"handlers\"] \r\n            result = \"True\"\r\n        else:\r\n            result = \"False\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"conf\":errorDefinedInConf, \"handlers\":handlers}\r\n\r\ndef syncConfigData(confStruct, actionConfig, index=0):\r\n    message = \"\"\r\n    result = \"False\"\r\n    handlerName = \"\"\r\n    handlerConf = []\r\n    handlers = \"\"\r\n    found = False\r\n    try:\r\n        for action in actionConfig[index][\"actions\"]:\r\n            id = action[\"action\"][\"id\"]\r\n            handlerCfgRet = lookupHandlerConfig(confStruct, id)\r\n            if handlerCfgRet[\"result\"] == \"True\":\r\n                handlerName = handlerCfgRet[\"handlerName\"]\r\n                action[\"action\"][\"handlerName\"] = handlerName\r\n                handlerConf = handlerCfgRet[\"conf\"] \r\n                for var in handlerConf[0][\"values\"]:\r\n                    found = False\r\n                    try:\r\n                        for vala in action[\"action\"][\"config\"][\"values\"]:\r\n                            if vala[\"value\"][\"name\"] == var[\"value\"][\"name\"]:\r\n                                found = True\r\n                                break\r\n                    except:\r\n                        action[\"action\"][\"config\"] = {}\r\n                        action[\"action\"][\"config\"][\"values\"] = []\r\n                        found = False\r\n                    if found == False:\r\n                        action[\"action\"][\"config\"][\"values\"].append(var)\r\n                handlers += handlerName + \",\"\r\n        if len(handlers) > 0:\r\n            handlers = handlers[:-1]\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"conf\":actionConfig, \"handlers\":handlers}\r\n\r\ndef lookupHandlerConfig(confStruct, id):\r\n    message = \"\"\r\n    result = \"False\"\r\n    handlerName = \"\"\r\n    handlerConf = []\r\n\r\n    try:\r\n        import json\r\n        import fnmatch\r\n        \r\n        lhandler = None\r\n        for handler in confStruct[\"errorHandlers\"]:\r\n            if handler[\"handler\"][\"id\"] == id:\r\n                lhandler = handler\r\n                break\r\n        \r\n        if lhandler is  None:\r\n            message = \"Handler Not Found\"\r\n            result = \"False\"\r\n        else:\r\n            handlerConf = [0]*1\r\n            handlerConf[0] = lhandler[\"handler\"][\"config\"]\r\n            handlerName = lhandler[\"handler\"][\"name\"]\r\n            result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"conf\":handlerConf, \"handlerName\":handlerName}"
  outputs:
    - errorHandlers
    - failSafe
    - result
    - message
  results:
    - SUCCESS: '${result == "True"}'
    - FAILURE
